[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "django",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django",
        "description": "django",
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "argparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "argparse",
        "description": "argparse",
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "transaction",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "transaction",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "connections",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "transaction",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "transaction",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "transaction",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "authentication.models",
        "description": "authentication.models",
        "isExtraImport": true,
        "detail": "authentication.models",
        "documentation": {}
    },
    {
        "label": "UserRole",
        "importPath": "authentication.models",
        "description": "authentication.models",
        "isExtraImport": true,
        "detail": "authentication.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "authentication.models",
        "description": "authentication.models",
        "isExtraImport": true,
        "detail": "authentication.models",
        "documentation": {}
    },
    {
        "label": "UserRole",
        "importPath": "authentication.models",
        "description": "authentication.models",
        "isExtraImport": true,
        "detail": "authentication.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "authentication.models",
        "description": "authentication.models",
        "isExtraImport": true,
        "detail": "authentication.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "authentication.models",
        "description": "authentication.models",
        "isExtraImport": true,
        "detail": "authentication.models",
        "documentation": {}
    },
    {
        "label": "UserRole",
        "importPath": "authentication.models",
        "description": "authentication.models",
        "isExtraImport": true,
        "detail": "authentication.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "authentication.models",
        "description": "authentication.models",
        "isExtraImport": true,
        "detail": "authentication.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "authentication.models",
        "description": "authentication.models",
        "isExtraImport": true,
        "detail": "authentication.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "authentication.models",
        "description": "authentication.models",
        "isExtraImport": true,
        "detail": "authentication.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "authentication.models",
        "description": "authentication.models",
        "isExtraImport": true,
        "detail": "authentication.models",
        "documentation": {}
    },
    {
        "label": "AdminProfile",
        "importPath": "users.models",
        "description": "users.models",
        "isExtraImport": true,
        "detail": "users.models",
        "documentation": {}
    },
    {
        "label": "PatientProfile",
        "importPath": "users.models",
        "description": "users.models",
        "isExtraImport": true,
        "detail": "users.models",
        "documentation": {}
    },
    {
        "label": "DoctorProfile",
        "importPath": "users.models",
        "description": "users.models",
        "isExtraImport": true,
        "detail": "users.models",
        "documentation": {}
    },
    {
        "label": "NurseProfile",
        "importPath": "users.models",
        "description": "users.models",
        "isExtraImport": true,
        "detail": "users.models",
        "documentation": {}
    },
    {
        "label": "PharmacistProfile",
        "importPath": "users.models",
        "description": "users.models",
        "isExtraImport": true,
        "detail": "users.models",
        "documentation": {}
    },
    {
        "label": "LabTechnicianProfile",
        "importPath": "users.models",
        "description": "users.models",
        "isExtraImport": true,
        "detail": "users.models",
        "documentation": {}
    },
    {
        "label": "InsuranceProviderProfile",
        "importPath": "users.models",
        "description": "users.models",
        "isExtraImport": true,
        "detail": "users.models",
        "documentation": {}
    },
    {
        "label": "AdminProfile",
        "importPath": "users.models",
        "description": "users.models",
        "isExtraImport": true,
        "detail": "users.models",
        "documentation": {}
    },
    {
        "label": "AdminProfile",
        "importPath": "users.models",
        "description": "users.models",
        "isExtraImport": true,
        "detail": "users.models",
        "documentation": {}
    },
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "BaseAuthentication",
        "importPath": "rest_framework.authentication",
        "description": "rest_framework.authentication",
        "isExtraImport": true,
        "detail": "rest_framework.authentication",
        "documentation": {}
    },
    {
        "label": "BaseAuthentication",
        "importPath": "rest_framework.authentication",
        "description": "rest_framework.authentication",
        "isExtraImport": true,
        "detail": "rest_framework.authentication",
        "documentation": {}
    },
    {
        "label": "AuthenticationFailed",
        "importPath": "rest_framework.exceptions",
        "description": "rest_framework.exceptions",
        "isExtraImport": true,
        "detail": "rest_framework.exceptions",
        "documentation": {}
    },
    {
        "label": "APIException",
        "importPath": "rest_framework.exceptions",
        "description": "rest_framework.exceptions",
        "isExtraImport": true,
        "detail": "rest_framework.exceptions",
        "documentation": {}
    },
    {
        "label": "AuthenticationFailed",
        "importPath": "rest_framework.exceptions",
        "description": "rest_framework.exceptions",
        "isExtraImport": true,
        "detail": "rest_framework.exceptions",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "rest_framework.exceptions",
        "description": "rest_framework.exceptions",
        "isExtraImport": true,
        "detail": "rest_framework.exceptions",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "rest_framework.exceptions",
        "description": "rest_framework.exceptions",
        "isExtraImport": true,
        "detail": "rest_framework.exceptions",
        "documentation": {}
    },
    {
        "label": "NotAuthenticated",
        "importPath": "rest_framework.exceptions",
        "description": "rest_framework.exceptions",
        "isExtraImport": true,
        "detail": "rest_framework.exceptions",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "jwt",
        "description": "jwt",
        "detail": "jwt",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "viewsets",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "filters",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "permissions",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "viewsets",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "filters",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "permissions",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "permissions",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "permissions",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "permissions",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "permissions",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "viewsets",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "filters",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "permissions",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "permissions",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "viewsets",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "permissions",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "viewsets",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "filters",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "permissions",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "permissions",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "viewsets",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "filters",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "viewsets",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "permissions",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "permissions",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "viewsets",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "permissions",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "exception_handler",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "AppointmentPermissions",
        "importPath": "common_auth.permissions",
        "description": "common_auth.permissions",
        "isExtraImport": true,
        "detail": "common_auth.permissions",
        "documentation": {}
    },
    {
        "label": "IsAdmin",
        "importPath": "common_auth.permissions",
        "description": "common_auth.permissions",
        "isExtraImport": true,
        "detail": "common_auth.permissions",
        "documentation": {}
    },
    {
        "label": "IsDoctor",
        "importPath": "common_auth.permissions",
        "description": "common_auth.permissions",
        "isExtraImport": true,
        "detail": "common_auth.permissions",
        "documentation": {}
    },
    {
        "label": "IsNurse",
        "importPath": "common_auth.permissions",
        "description": "common_auth.permissions",
        "isExtraImport": true,
        "detail": "common_auth.permissions",
        "documentation": {}
    },
    {
        "label": "IsPatient",
        "importPath": "common_auth.permissions",
        "description": "common_auth.permissions",
        "isExtraImport": true,
        "detail": "common_auth.permissions",
        "documentation": {}
    },
    {
        "label": "BillingPermissions",
        "importPath": "common_auth.permissions",
        "description": "common_auth.permissions",
        "isExtraImport": true,
        "detail": "common_auth.permissions",
        "documentation": {}
    },
    {
        "label": "IsAdmin",
        "importPath": "common_auth.permissions",
        "description": "common_auth.permissions",
        "isExtraImport": true,
        "detail": "common_auth.permissions",
        "documentation": {}
    },
    {
        "label": "IsPatient",
        "importPath": "common_auth.permissions",
        "description": "common_auth.permissions",
        "isExtraImport": true,
        "detail": "common_auth.permissions",
        "documentation": {}
    },
    {
        "label": "IsInsuranceProvider",
        "importPath": "common_auth.permissions",
        "description": "common_auth.permissions",
        "isExtraImport": true,
        "detail": "common_auth.permissions",
        "documentation": {}
    },
    {
        "label": "LaboratoryPermissions",
        "importPath": "common_auth.permissions",
        "description": "common_auth.permissions",
        "isExtraImport": true,
        "detail": "common_auth.permissions",
        "documentation": {}
    },
    {
        "label": "IsAdmin",
        "importPath": "common_auth.permissions",
        "description": "common_auth.permissions",
        "isExtraImport": true,
        "detail": "common_auth.permissions",
        "documentation": {}
    },
    {
        "label": "IsDoctor",
        "importPath": "common_auth.permissions",
        "description": "common_auth.permissions",
        "isExtraImport": true,
        "detail": "common_auth.permissions",
        "documentation": {}
    },
    {
        "label": "IsPatient",
        "importPath": "common_auth.permissions",
        "description": "common_auth.permissions",
        "isExtraImport": true,
        "detail": "common_auth.permissions",
        "documentation": {}
    },
    {
        "label": "IsLabTechnician",
        "importPath": "common_auth.permissions",
        "description": "common_auth.permissions",
        "isExtraImport": true,
        "detail": "common_auth.permissions",
        "documentation": {}
    },
    {
        "label": "IsNurse",
        "importPath": "common_auth.permissions",
        "description": "common_auth.permissions",
        "isExtraImport": true,
        "detail": "common_auth.permissions",
        "documentation": {}
    },
    {
        "label": "MedicalRecordPermissions",
        "importPath": "common_auth.permissions",
        "description": "common_auth.permissions",
        "isExtraImport": true,
        "detail": "common_auth.permissions",
        "documentation": {}
    },
    {
        "label": "IsAdmin",
        "importPath": "common_auth.permissions",
        "description": "common_auth.permissions",
        "isExtraImport": true,
        "detail": "common_auth.permissions",
        "documentation": {}
    },
    {
        "label": "IsDoctor",
        "importPath": "common_auth.permissions",
        "description": "common_auth.permissions",
        "isExtraImport": true,
        "detail": "common_auth.permissions",
        "documentation": {}
    },
    {
        "label": "IsNurse",
        "importPath": "common_auth.permissions",
        "description": "common_auth.permissions",
        "isExtraImport": true,
        "detail": "common_auth.permissions",
        "documentation": {}
    },
    {
        "label": "IsPatient",
        "importPath": "common_auth.permissions",
        "description": "common_auth.permissions",
        "isExtraImport": true,
        "detail": "common_auth.permissions",
        "documentation": {}
    },
    {
        "label": "IsLabTechnician",
        "importPath": "common_auth.permissions",
        "description": "common_auth.permissions",
        "isExtraImport": true,
        "detail": "common_auth.permissions",
        "documentation": {}
    },
    {
        "label": "IsPharmacist",
        "importPath": "common_auth.permissions",
        "description": "common_auth.permissions",
        "isExtraImport": true,
        "detail": "common_auth.permissions",
        "documentation": {}
    },
    {
        "label": "NotificationPermissions",
        "importPath": "common_auth.permissions",
        "description": "common_auth.permissions",
        "isExtraImport": true,
        "detail": "common_auth.permissions",
        "documentation": {}
    },
    {
        "label": "IsAdmin",
        "importPath": "common_auth.permissions",
        "description": "common_auth.permissions",
        "isExtraImport": true,
        "detail": "common_auth.permissions",
        "documentation": {}
    },
    {
        "label": "IsDoctor",
        "importPath": "common_auth.permissions",
        "description": "common_auth.permissions",
        "isExtraImport": true,
        "detail": "common_auth.permissions",
        "documentation": {}
    },
    {
        "label": "IsNurse",
        "importPath": "common_auth.permissions",
        "description": "common_auth.permissions",
        "isExtraImport": true,
        "detail": "common_auth.permissions",
        "documentation": {}
    },
    {
        "label": "PharmacyPermissions",
        "importPath": "common_auth.permissions",
        "description": "common_auth.permissions",
        "isExtraImport": true,
        "detail": "common_auth.permissions",
        "documentation": {}
    },
    {
        "label": "IsAdmin",
        "importPath": "common_auth.permissions",
        "description": "common_auth.permissions",
        "isExtraImport": true,
        "detail": "common_auth.permissions",
        "documentation": {}
    },
    {
        "label": "IsDoctor",
        "importPath": "common_auth.permissions",
        "description": "common_auth.permissions",
        "isExtraImport": true,
        "detail": "common_auth.permissions",
        "documentation": {}
    },
    {
        "label": "IsPatient",
        "importPath": "common_auth.permissions",
        "description": "common_auth.permissions",
        "isExtraImport": true,
        "detail": "common_auth.permissions",
        "documentation": {}
    },
    {
        "label": "IsPharmacist",
        "importPath": "common_auth.permissions",
        "description": "common_auth.permissions",
        "isExtraImport": true,
        "detail": "common_auth.permissions",
        "documentation": {}
    },
    {
        "label": "AllowAny",
        "importPath": "common_auth.permissions",
        "description": "common_auth.permissions",
        "isExtraImport": true,
        "detail": "common_auth.permissions",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "common_auth.permissions",
        "description": "common_auth.permissions",
        "isExtraImport": true,
        "detail": "common_auth.permissions",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "common_auth.permissions",
        "description": "common_auth.permissions",
        "isExtraImport": true,
        "detail": "common_auth.permissions",
        "documentation": {}
    },
    {
        "label": "HasRole",
        "importPath": "common_auth.permissions",
        "description": "common_auth.permissions",
        "isExtraImport": true,
        "detail": "common_auth.permissions",
        "documentation": {}
    },
    {
        "label": "HasResourceAccess",
        "importPath": "common_auth.permissions",
        "description": "common_auth.permissions",
        "isExtraImport": true,
        "detail": "common_auth.permissions",
        "documentation": {}
    },
    {
        "label": "post_save",
        "importPath": "django.db.models.signals",
        "description": "django.db.models.signals",
        "isExtraImport": true,
        "detail": "django.db.models.signals",
        "documentation": {}
    },
    {
        "label": "receiver",
        "importPath": "django.dispatch",
        "description": "django.dispatch",
        "isExtraImport": true,
        "detail": "django.dispatch",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "re_path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "re_path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "re_path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "re_path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "re_path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "re_path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "re_path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "re_path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "DefaultRouter",
        "importPath": "rest_framework.routers",
        "description": "rest_framework.routers",
        "isExtraImport": true,
        "detail": "rest_framework.routers",
        "documentation": {}
    },
    {
        "label": "DefaultRouter",
        "importPath": "rest_framework.routers",
        "description": "rest_framework.routers",
        "isExtraImport": true,
        "detail": "rest_framework.routers",
        "documentation": {}
    },
    {
        "label": "DefaultRouter",
        "importPath": "rest_framework.routers",
        "description": "rest_framework.routers",
        "isExtraImport": true,
        "detail": "rest_framework.routers",
        "documentation": {}
    },
    {
        "label": "DefaultRouter",
        "importPath": "rest_framework.routers",
        "description": "rest_framework.routers",
        "isExtraImport": true,
        "detail": "rest_framework.routers",
        "documentation": {}
    },
    {
        "label": "DefaultRouter",
        "importPath": "rest_framework.routers",
        "description": "rest_framework.routers",
        "isExtraImport": true,
        "detail": "rest_framework.routers",
        "documentation": {}
    },
    {
        "label": "DefaultRouter",
        "importPath": "rest_framework.routers",
        "description": "rest_framework.routers",
        "isExtraImport": true,
        "detail": "rest_framework.routers",
        "documentation": {}
    },
    {
        "label": "DefaultRouter",
        "importPath": "rest_framework.routers",
        "description": "rest_framework.routers",
        "isExtraImport": true,
        "detail": "rest_framework.routers",
        "documentation": {}
    },
    {
        "label": "DefaultRouter",
        "importPath": "rest_framework.routers",
        "description": "rest_framework.routers",
        "isExtraImport": true,
        "detail": "rest_framework.routers",
        "documentation": {}
    },
    {
        "label": "action",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "api_view",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "action",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "api_view",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "permission_classes",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "action",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "api_view",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "permission_classes",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "authentication_classes",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "action",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "action",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "api_view",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "permission_classes",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "action",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "api_view",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "permission_classes",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "authentication_classes",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "action",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "api_view",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "action",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "api_view",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "permission_classes",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "DjangoFilterBackend",
        "importPath": "django_filters.rest_framework",
        "description": "django_filters.rest_framework",
        "isExtraImport": true,
        "detail": "django_filters.rest_framework",
        "documentation": {}
    },
    {
        "label": "DjangoFilterBackend",
        "importPath": "django_filters.rest_framework",
        "description": "django_filters.rest_framework",
        "isExtraImport": true,
        "detail": "django_filters.rest_framework",
        "documentation": {}
    },
    {
        "label": "DjangoFilterBackend",
        "importPath": "django_filters.rest_framework",
        "description": "django_filters.rest_framework",
        "isExtraImport": true,
        "detail": "django_filters.rest_framework",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "AllowAny",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "dj_database_url",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "dj_database_url",
        "description": "dj_database_url",
        "detail": "dj_database_url",
        "documentation": {}
    },
    {
        "label": "dotenv",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "dotenv",
        "description": "dotenv",
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "get_schema_view",
        "importPath": "drf_yasg.views",
        "description": "drf_yasg.views",
        "isExtraImport": true,
        "detail": "drf_yasg.views",
        "documentation": {}
    },
    {
        "label": "get_schema_view",
        "importPath": "drf_yasg.views",
        "description": "drf_yasg.views",
        "isExtraImport": true,
        "detail": "drf_yasg.views",
        "documentation": {}
    },
    {
        "label": "get_schema_view",
        "importPath": "drf_yasg.views",
        "description": "drf_yasg.views",
        "isExtraImport": true,
        "detail": "drf_yasg.views",
        "documentation": {}
    },
    {
        "label": "get_schema_view",
        "importPath": "drf_yasg.views",
        "description": "drf_yasg.views",
        "isExtraImport": true,
        "detail": "drf_yasg.views",
        "documentation": {}
    },
    {
        "label": "get_schema_view",
        "importPath": "drf_yasg.views",
        "description": "drf_yasg.views",
        "isExtraImport": true,
        "detail": "drf_yasg.views",
        "documentation": {}
    },
    {
        "label": "get_schema_view",
        "importPath": "drf_yasg.views",
        "description": "drf_yasg.views",
        "isExtraImport": true,
        "detail": "drf_yasg.views",
        "documentation": {}
    },
    {
        "label": "get_schema_view",
        "importPath": "drf_yasg.views",
        "description": "drf_yasg.views",
        "isExtraImport": true,
        "detail": "drf_yasg.views",
        "documentation": {}
    },
    {
        "label": "openapi",
        "importPath": "drf_yasg",
        "description": "drf_yasg",
        "isExtraImport": true,
        "detail": "drf_yasg",
        "documentation": {}
    },
    {
        "label": "openapi",
        "importPath": "drf_yasg",
        "description": "drf_yasg",
        "isExtraImport": true,
        "detail": "drf_yasg",
        "documentation": {}
    },
    {
        "label": "openapi",
        "importPath": "drf_yasg",
        "description": "drf_yasg",
        "isExtraImport": true,
        "detail": "drf_yasg",
        "documentation": {}
    },
    {
        "label": "openapi",
        "importPath": "drf_yasg",
        "description": "drf_yasg",
        "isExtraImport": true,
        "detail": "drf_yasg",
        "documentation": {}
    },
    {
        "label": "openapi",
        "importPath": "drf_yasg",
        "description": "drf_yasg",
        "isExtraImport": true,
        "detail": "drf_yasg",
        "documentation": {}
    },
    {
        "label": "openapi",
        "importPath": "drf_yasg",
        "description": "drf_yasg",
        "isExtraImport": true,
        "detail": "drf_yasg",
        "documentation": {}
    },
    {
        "label": "openapi",
        "importPath": "drf_yasg",
        "description": "drf_yasg",
        "isExtraImport": true,
        "detail": "drf_yasg",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "ServiceAuthentication",
        "importPath": "common_auth.authentication",
        "description": "common_auth.authentication",
        "isExtraImport": true,
        "detail": "common_auth.authentication",
        "documentation": {}
    },
    {
        "label": "ServiceAuthentication",
        "importPath": "common_auth.authentication",
        "description": "common_auth.authentication",
        "isExtraImport": true,
        "detail": "common_auth.authentication",
        "documentation": {}
    },
    {
        "label": "ServiceAuthentication",
        "importPath": "common_auth.authentication",
        "description": "common_auth.authentication",
        "isExtraImport": true,
        "detail": "common_auth.authentication",
        "documentation": {}
    },
    {
        "label": "ServiceAuthentication",
        "importPath": "common_auth.authentication",
        "description": "common_auth.authentication",
        "isExtraImport": true,
        "detail": "common_auth.authentication",
        "documentation": {}
    },
    {
        "label": "ServiceAuthentication",
        "importPath": "common_auth.authentication",
        "description": "common_auth.authentication",
        "isExtraImport": true,
        "detail": "common_auth.authentication",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "BytesIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "get_template",
        "importPath": "django.template.loader",
        "description": "django.template.loader",
        "isExtraImport": true,
        "detail": "django.template.loader",
        "documentation": {}
    },
    {
        "label": "pisa",
        "importPath": "xhtml2pdf",
        "description": "xhtml2pdf",
        "isExtraImport": true,
        "detail": "xhtml2pdf",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "AnonymousUser",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "AbstractBaseUser",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "BaseUserManager",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "PermissionsMixin",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "redis",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "redis",
        "description": "redis",
        "detail": "redis",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "require_GET",
        "importPath": "django.views.decorators.http",
        "description": "django.views.decorators.http",
        "isExtraImport": true,
        "detail": "django.views.decorators.http",
        "documentation": {}
    },
    {
        "label": "MiddlewareMixin",
        "importPath": "django.utils.deprecation",
        "description": "django.utils.deprecation",
        "isExtraImport": true,
        "detail": "django.utils.deprecation",
        "documentation": {}
    },
    {
        "label": "BasePermission",
        "importPath": "common_auth.permissions.base",
        "description": "common_auth.permissions.base",
        "isExtraImport": true,
        "detail": "common_auth.permissions.base",
        "documentation": {}
    },
    {
        "label": "AllowAny",
        "importPath": "common_auth.permissions.base",
        "description": "common_auth.permissions.base",
        "isExtraImport": true,
        "detail": "common_auth.permissions.base",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "common_auth.permissions.base",
        "description": "common_auth.permissions.base",
        "isExtraImport": true,
        "detail": "common_auth.permissions.base",
        "documentation": {}
    },
    {
        "label": "ReadOnly",
        "importPath": "common_auth.permissions.base",
        "description": "common_auth.permissions.base",
        "isExtraImport": true,
        "detail": "common_auth.permissions.base",
        "documentation": {}
    },
    {
        "label": "HasRole",
        "importPath": "common_auth.permissions.roles",
        "description": "common_auth.permissions.roles",
        "isExtraImport": true,
        "detail": "common_auth.permissions.roles",
        "documentation": {}
    },
    {
        "label": "IsAdmin",
        "importPath": "common_auth.permissions.roles",
        "description": "common_auth.permissions.roles",
        "isExtraImport": true,
        "detail": "common_auth.permissions.roles",
        "documentation": {}
    },
    {
        "label": "IsDoctor",
        "importPath": "common_auth.permissions.roles",
        "description": "common_auth.permissions.roles",
        "isExtraImport": true,
        "detail": "common_auth.permissions.roles",
        "documentation": {}
    },
    {
        "label": "IsNurse",
        "importPath": "common_auth.permissions.roles",
        "description": "common_auth.permissions.roles",
        "isExtraImport": true,
        "detail": "common_auth.permissions.roles",
        "documentation": {}
    },
    {
        "label": "IsPatient",
        "importPath": "common_auth.permissions.roles",
        "description": "common_auth.permissions.roles",
        "isExtraImport": true,
        "detail": "common_auth.permissions.roles",
        "documentation": {}
    },
    {
        "label": "IsPharmacist",
        "importPath": "common_auth.permissions.roles",
        "description": "common_auth.permissions.roles",
        "isExtraImport": true,
        "detail": "common_auth.permissions.roles",
        "documentation": {}
    },
    {
        "label": "IsLabTechnician",
        "importPath": "common_auth.permissions.roles",
        "description": "common_auth.permissions.roles",
        "isExtraImport": true,
        "detail": "common_auth.permissions.roles",
        "documentation": {}
    },
    {
        "label": "IsInsuranceProvider",
        "importPath": "common_auth.permissions.roles",
        "description": "common_auth.permissions.roles",
        "isExtraImport": true,
        "detail": "common_auth.permissions.roles",
        "documentation": {}
    },
    {
        "label": "ROLE_ADMIN",
        "importPath": "common_auth.permissions.roles",
        "description": "common_auth.permissions.roles",
        "isExtraImport": true,
        "detail": "common_auth.permissions.roles",
        "documentation": {}
    },
    {
        "label": "ROLE_DOCTOR",
        "importPath": "common_auth.permissions.roles",
        "description": "common_auth.permissions.roles",
        "isExtraImport": true,
        "detail": "common_auth.permissions.roles",
        "documentation": {}
    },
    {
        "label": "ROLE_NURSE",
        "importPath": "common_auth.permissions.roles",
        "description": "common_auth.permissions.roles",
        "isExtraImport": true,
        "detail": "common_auth.permissions.roles",
        "documentation": {}
    },
    {
        "label": "ROLE_PATIENT",
        "importPath": "common_auth.permissions.roles",
        "description": "common_auth.permissions.roles",
        "isExtraImport": true,
        "detail": "common_auth.permissions.roles",
        "documentation": {}
    },
    {
        "label": "ROLE_PHARMACIST",
        "importPath": "common_auth.permissions.roles",
        "description": "common_auth.permissions.roles",
        "isExtraImport": true,
        "detail": "common_auth.permissions.roles",
        "documentation": {}
    },
    {
        "label": "ROLE_LAB_TECHNICIAN",
        "importPath": "common_auth.permissions.roles",
        "description": "common_auth.permissions.roles",
        "isExtraImport": true,
        "detail": "common_auth.permissions.roles",
        "documentation": {}
    },
    {
        "label": "ROLE_INSURANCE_PROVIDER",
        "importPath": "common_auth.permissions.roles",
        "description": "common_auth.permissions.roles",
        "isExtraImport": true,
        "detail": "common_auth.permissions.roles",
        "documentation": {}
    },
    {
        "label": "AppointmentPermissions",
        "importPath": "common_auth.permissions.appointment",
        "description": "common_auth.permissions.appointment",
        "isExtraImport": true,
        "detail": "common_auth.permissions.appointment",
        "documentation": {}
    },
    {
        "label": "MedicalRecordPermissions",
        "importPath": "common_auth.permissions.medical_record",
        "description": "common_auth.permissions.medical_record",
        "isExtraImport": true,
        "detail": "common_auth.permissions.medical_record",
        "documentation": {}
    },
    {
        "label": "PharmacyPermissions",
        "importPath": "common_auth.permissions.pharmacy",
        "description": "common_auth.permissions.pharmacy",
        "isExtraImport": true,
        "detail": "common_auth.permissions.pharmacy",
        "documentation": {}
    },
    {
        "label": "LaboratoryPermissions",
        "importPath": "common_auth.permissions.laboratory",
        "description": "common_auth.permissions.laboratory",
        "isExtraImport": true,
        "detail": "common_auth.permissions.laboratory",
        "documentation": {}
    },
    {
        "label": "BillingPermissions",
        "importPath": "common_auth.permissions.billing",
        "description": "common_auth.permissions.billing",
        "isExtraImport": true,
        "detail": "common_auth.permissions.billing",
        "documentation": {}
    },
    {
        "label": "NotificationPermissions",
        "importPath": "common_auth.permissions.notification",
        "description": "common_auth.permissions.notification",
        "isExtraImport": true,
        "detail": "common_auth.permissions.notification",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "urljoin",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "setup",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "find_packages",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "ServiceClient",
        "importPath": "common_auth",
        "description": "common_auth",
        "isExtraImport": true,
        "detail": "common_auth",
        "documentation": {}
    },
    {
        "label": "register_health_check",
        "importPath": "common_auth",
        "description": "common_auth",
        "isExtraImport": true,
        "detail": "common_auth",
        "documentation": {}
    },
    {
        "label": "ServiceClient",
        "importPath": "common_auth",
        "description": "common_auth",
        "isExtraImport": true,
        "detail": "common_auth",
        "documentation": {}
    },
    {
        "label": "register_health_check",
        "importPath": "common_auth",
        "description": "common_auth",
        "isExtraImport": true,
        "detail": "common_auth",
        "documentation": {}
    },
    {
        "label": "ServiceClient",
        "importPath": "common_auth",
        "description": "common_auth",
        "isExtraImport": true,
        "detail": "common_auth",
        "documentation": {}
    },
    {
        "label": "register_health_check",
        "importPath": "common_auth",
        "description": "common_auth",
        "isExtraImport": true,
        "detail": "common_auth",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "django.utils.timezone",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.utils.timezone",
        "description": "django.utils.timezone",
        "detail": "django.utils.timezone",
        "documentation": {}
    },
    {
        "label": "PageNumberPagination",
        "importPath": "rest_framework.pagination",
        "description": "rest_framework.pagination",
        "isExtraImport": true,
        "detail": "rest_framework.pagination",
        "documentation": {}
    },
    {
        "label": "ProtocolTypeRouter",
        "importPath": "channels.routing",
        "description": "channels.routing",
        "isExtraImport": true,
        "detail": "channels.routing",
        "documentation": {}
    },
    {
        "label": "URLRouter",
        "importPath": "channels.routing",
        "description": "channels.routing",
        "isExtraImport": true,
        "detail": "channels.routing",
        "documentation": {}
    },
    {
        "label": "AuthMiddlewareStack",
        "importPath": "channels.auth",
        "description": "channels.auth",
        "isExtraImport": true,
        "detail": "channels.auth",
        "documentation": {}
    },
    {
        "label": "AllowedHostsOriginValidator",
        "importPath": "channels.security.websocket",
        "description": "channels.security.websocket",
        "isExtraImport": true,
        "detail": "channels.security.websocket",
        "documentation": {}
    },
    {
        "label": "websocket_urlpatterns",
        "importPath": "notification.routing",
        "description": "notification.routing",
        "isExtraImport": true,
        "detail": "notification.routing",
        "documentation": {}
    },
    {
        "label": "Celery",
        "importPath": "celery",
        "description": "celery",
        "isExtraImport": true,
        "detail": "celery",
        "documentation": {}
    },
    {
        "label": "shared_task",
        "importPath": "celery",
        "description": "celery",
        "isExtraImport": true,
        "detail": "celery",
        "documentation": {}
    },
    {
        "label": "BaseCommand",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "BaseCommand",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "BaseCommand",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "BaseCommand",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "BaseCommand",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "BaseCommand",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "BaseCommand",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "BaseCommand",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "BaseCommand",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "RedisNotificationClient",
        "importPath": "common_auth.redis_notifications",
        "description": "common_auth.redis_notifications",
        "isExtraImport": true,
        "detail": "common_auth.redis_notifications",
        "documentation": {}
    },
    {
        "label": "InAppNotification",
        "importPath": "notification.models",
        "description": "notification.models",
        "isExtraImport": true,
        "detail": "notification.models",
        "documentation": {}
    },
    {
        "label": "Notification",
        "importPath": "notification.models",
        "description": "notification.models",
        "isExtraImport": true,
        "detail": "notification.models",
        "documentation": {}
    },
    {
        "label": "NotificationTemplate",
        "importPath": "notification.models",
        "description": "notification.models",
        "isExtraImport": true,
        "detail": "notification.models",
        "documentation": {}
    },
    {
        "label": "Notification",
        "importPath": "notification.models",
        "description": "notification.models",
        "isExtraImport": true,
        "detail": "notification.models",
        "documentation": {}
    },
    {
        "label": "NotificationSchedule",
        "importPath": "notification.models",
        "description": "notification.models",
        "isExtraImport": true,
        "detail": "notification.models",
        "documentation": {}
    },
    {
        "label": "NotificationTemplate",
        "importPath": "notification.models",
        "description": "notification.models",
        "isExtraImport": true,
        "detail": "notification.models",
        "documentation": {}
    },
    {
        "label": "Notification",
        "importPath": "notification.models",
        "description": "notification.models",
        "isExtraImport": true,
        "detail": "notification.models",
        "documentation": {}
    },
    {
        "label": "NotificationSchedule",
        "importPath": "notification.models",
        "description": "notification.models",
        "isExtraImport": true,
        "detail": "notification.models",
        "documentation": {}
    },
    {
        "label": "NotificationTemplate",
        "importPath": "notification.models",
        "description": "notification.models",
        "isExtraImport": true,
        "detail": "notification.models",
        "documentation": {}
    },
    {
        "label": "Notification",
        "importPath": "notification.models",
        "description": "notification.models",
        "isExtraImport": true,
        "detail": "notification.models",
        "documentation": {}
    },
    {
        "label": "NotificationSchedule",
        "importPath": "notification.models",
        "description": "notification.models",
        "isExtraImport": true,
        "detail": "notification.models",
        "documentation": {}
    },
    {
        "label": "NotificationTemplate",
        "importPath": "notification.models",
        "description": "notification.models",
        "isExtraImport": true,
        "detail": "notification.models",
        "documentation": {}
    },
    {
        "label": "Notification",
        "importPath": "notification.models",
        "description": "notification.models",
        "isExtraImport": true,
        "detail": "notification.models",
        "documentation": {}
    },
    {
        "label": "NotificationSchedule",
        "importPath": "notification.models",
        "description": "notification.models",
        "isExtraImport": true,
        "detail": "notification.models",
        "documentation": {}
    },
    {
        "label": "NotificationTemplate",
        "importPath": "notification.models",
        "description": "notification.models",
        "isExtraImport": true,
        "detail": "notification.models",
        "documentation": {}
    },
    {
        "label": "Notification",
        "importPath": "notification.models",
        "description": "notification.models",
        "isExtraImport": true,
        "detail": "notification.models",
        "documentation": {}
    },
    {
        "label": "NotificationSchedule",
        "importPath": "notification.models",
        "description": "notification.models",
        "isExtraImport": true,
        "detail": "notification.models",
        "documentation": {}
    },
    {
        "label": "NotificationTemplate",
        "importPath": "notification.models",
        "description": "notification.models",
        "isExtraImport": true,
        "detail": "notification.models",
        "documentation": {}
    },
    {
        "label": "Notification",
        "importPath": "notification.models",
        "description": "notification.models",
        "isExtraImport": true,
        "detail": "notification.models",
        "documentation": {}
    },
    {
        "label": "get_user_info",
        "importPath": "notification.services",
        "description": "notification.services",
        "isExtraImport": true,
        "detail": "notification.services",
        "documentation": {}
    },
    {
        "label": "get_user_info",
        "importPath": "notification.services",
        "description": "notification.services",
        "isExtraImport": true,
        "detail": "notification.services",
        "documentation": {}
    },
    {
        "label": "get_user_info",
        "importPath": "notification.services",
        "description": "notification.services",
        "isExtraImport": true,
        "detail": "notification.services",
        "documentation": {}
    },
    {
        "label": "get_user_info",
        "importPath": "notification.services",
        "description": "notification.services",
        "isExtraImport": true,
        "detail": "notification.services",
        "documentation": {}
    },
    {
        "label": "get_user_info",
        "importPath": "notification.services",
        "description": "notification.services",
        "isExtraImport": true,
        "detail": "notification.services",
        "documentation": {}
    },
    {
        "label": "CronTab",
        "importPath": "crontab",
        "description": "crontab",
        "isExtraImport": true,
        "detail": "crontab",
        "documentation": {}
    },
    {
        "label": "AsyncWebsocketConsumer",
        "importPath": "channels.generic.websocket",
        "description": "channels.generic.websocket",
        "isExtraImport": true,
        "detail": "channels.generic.websocket",
        "documentation": {}
    },
    {
        "label": "database_sync_to_async",
        "importPath": "channels.db",
        "description": "channels.db",
        "isExtraImport": true,
        "detail": "channels.db",
        "documentation": {}
    },
    {
        "label": "AccessToken",
        "importPath": "rest_framework_simplejwt.tokens",
        "description": "rest_framework_simplejwt.tokens",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.tokens",
        "documentation": {}
    },
    {
        "label": "RefreshToken",
        "importPath": "rest_framework_simplejwt.tokens",
        "description": "rest_framework_simplejwt.tokens",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.tokens",
        "documentation": {}
    },
    {
        "label": "TokenError",
        "importPath": "rest_framework_simplejwt.exceptions",
        "description": "rest_framework_simplejwt.exceptions",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.exceptions",
        "documentation": {}
    },
    {
        "label": "InvalidToken",
        "importPath": "rest_framework_simplejwt.exceptions",
        "description": "rest_framework_simplejwt.exceptions",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.exceptions",
        "documentation": {}
    },
    {
        "label": "send_mail",
        "importPath": "django.core.mail",
        "description": "django.core.mail",
        "isExtraImport": true,
        "detail": "django.core.mail",
        "documentation": {}
    },
    {
        "label": "Template",
        "importPath": "django.template",
        "description": "django.template",
        "isExtraImport": true,
        "detail": "django.template",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "django.template",
        "description": "django.template",
        "isExtraImport": true,
        "detail": "django.template",
        "documentation": {}
    },
    {
        "label": "async_to_sync",
        "importPath": "asgiref.sync",
        "description": "asgiref.sync",
        "isExtraImport": true,
        "detail": "asgiref.sync",
        "documentation": {}
    },
    {
        "label": "get_channel_layer",
        "importPath": "channels.layers",
        "description": "channels.layers",
        "isExtraImport": true,
        "detail": "channels.layers",
        "documentation": {}
    },
    {
        "label": "JWTAuthentication",
        "importPath": "rest_framework_simplejwt.authentication",
        "description": "rest_framework_simplejwt.authentication",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.authentication",
        "documentation": {}
    },
    {
        "label": "TokenObtainPairSerializer",
        "importPath": "rest_framework_simplejwt.serializers",
        "description": "rest_framework_simplejwt.serializers",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.serializers",
        "documentation": {}
    },
    {
        "label": "TokenObtainPairView",
        "importPath": "rest_framework_simplejwt.views",
        "description": "rest_framework_simplejwt.views",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.views",
        "documentation": {}
    },
    {
        "label": "TokenRefreshView",
        "importPath": "rest_framework_simplejwt.views",
        "description": "rest_framework_simplejwt.views",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.views",
        "documentation": {}
    },
    {
        "label": "UserAuthSerializer",
        "importPath": "authentication.serializers",
        "description": "authentication.serializers",
        "isExtraImport": true,
        "detail": "authentication.serializers",
        "documentation": {}
    },
    {
        "label": "csrf_exempt",
        "importPath": "django.views.decorators.csrf",
        "description": "django.views.decorators.csrf",
        "isExtraImport": true,
        "detail": "django.views.decorators.csrf",
        "documentation": {}
    },
    {
        "label": "create_admin_user",
        "kind": 2,
        "importPath": "scripts.create_admin_user",
        "description": "scripts.create_admin_user",
        "peekOfCode": "def create_admin_user(email, password, first_name, last_name, admin_type='SYSTEM', \n                     position='System Administrator', employee_id='ADMIN001', \n                     access_level=5, department='IT'):\n    \"\"\"\n    Tạo tài khoản admin và profile tương ứng.\n    Args:\n        email (str): Email của admin\n        password (str): Mật khẩu của admin\n        first_name (str): Tên của admin\n        last_name (str): Họ của admin",
        "detail": "scripts.create_admin_user",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "scripts.create_admin_user",
        "description": "scripts.create_admin_user",
        "peekOfCode": "def main():\n    parser = argparse.ArgumentParser(description='Tạo tài khoản admin cho hệ thống Healthcare')\n    parser.add_argument('--email', default='admin@gmail.com', help='Email của admin')\n    parser.add_argument('--password', default='123456', help='Mật khẩu của admin')\n    parser.add_argument('--first_name', default='Admin', help='Tên của admin')\n    parser.add_argument('--last_name', default='User', help='Họ của admin')\n    parser.add_argument('--admin_type', default='SYSTEM', help='Loại admin (SYSTEM, CLINIC, BILLING)')\n    parser.add_argument('--position', default='System Administrator', help='Vị trí công việc')\n    parser.add_argument('--employee_id', default='ADMIN001', help='Mã nhân viên')\n    parser.add_argument('--access_level', type=int, default=5, help='Cấp độ truy cập (1-5)')",
        "detail": "scripts.create_admin_user",
        "documentation": {}
    },
    {
        "label": "create_user",
        "kind": 2,
        "importPath": "scripts.create_sample_users",
        "description": "scripts.create_sample_users",
        "peekOfCode": "def create_user(email, password, first_name, last_name, role, **profile_data):\n    \"\"\"\n    Tạo người dùng và profile tương ứng.\n    Args:\n        email (str): Email của người dùng\n        password (str): Mật khẩu của người dùng\n        first_name (str): Tên của người dùng\n        last_name (str): Họ của người dùng\n        role (str): Vai trò của người dùng (PATIENT, DOCTOR, NURSE, ...)\n        profile_data (dict): Dữ liệu cho profile tương ứng",
        "detail": "scripts.create_sample_users",
        "documentation": {}
    },
    {
        "label": "create_sample_users",
        "kind": 2,
        "importPath": "scripts.create_sample_users",
        "description": "scripts.create_sample_users",
        "peekOfCode": "def create_sample_users():\n    \"\"\"Tạo các tài khoản mẫu cho hệ thống\"\"\"\n    # Tạo tài khoản admin\n    admin, _ = create_user(\n        email=\"admin@gmail.com\",\n        password=\"123456\",\n        first_name=\"Admin\",\n        last_name=\"User\",\n        role=UserRole.ADMIN,\n        admin_type=\"SYSTEM\",",
        "detail": "scripts.create_sample_users",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "scripts.create_sample_users",
        "description": "scripts.create_sample_users",
        "peekOfCode": "def main():\n    parser = argparse.ArgumentParser(description='Tạo các tài khoản mẫu cho hệ thống Healthcare')\n    parser.add_argument('--force', action='store_true', help='Ghi đè các tài khoản đã tồn tại')\n    args = parser.parse_args()\n    print(\"Bắt đầu tạo các tài khoản mẫu...\")\n    users = create_sample_users()\n    if all(users.values()):\n        print(\"=== Tạo các tài khoản mẫu thành công ===\")\n        print(\"Danh sách tài khoản:\")\n        for role, user in users.items():",
        "detail": "scripts.create_sample_users",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "services.appointment-service.appointments.migrations.0001_initial",
        "description": "services.appointment-service.appointments.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Appointment',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('patient_id', models.IntegerField(help_text='ID của bệnh nhân trong user-service')),",
        "detail": "services.appointment-service.appointments.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "services.appointment-service.appointments.migrations.0002_remove_timeslot_is_available_and_more",
        "description": "services.appointment-service.appointments.migrations.0002_remove_timeslot_is_available_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('appointments', '0001_initial'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='timeslot',\n            name='is_available',\n        ),\n        migrations.AddField(",
        "detail": "services.appointment-service.appointments.migrations.0002_remove_timeslot_is_available_and_more",
        "documentation": {}
    },
    {
        "label": "DoctorAvailabilityAdmin",
        "kind": 6,
        "importPath": "services.appointment-service.appointments.admin",
        "description": "services.appointment-service.appointments.admin",
        "peekOfCode": "class DoctorAvailabilityAdmin(admin.ModelAdmin):\n    list_display = ('doctor_id', 'weekday', 'start_time', 'end_time', 'is_available', 'is_active', 'schedule_type', 'location')\n    list_filter = ('weekday', 'is_available', 'is_active', 'schedule_type')\n    search_fields = ('doctor_id', 'location')\n@admin.register(TimeSlot)\nclass TimeSlotAdmin(admin.ModelAdmin):\n    list_display = ('doctor_id', 'date', 'start_time', 'end_time', 'status', 'is_active', 'location')\n    list_filter = ('date', 'status', 'is_active')\n    search_fields = ('doctor_id', 'location')\n    date_hierarchy = 'date'",
        "detail": "services.appointment-service.appointments.admin",
        "documentation": {}
    },
    {
        "label": "TimeSlotAdmin",
        "kind": 6,
        "importPath": "services.appointment-service.appointments.admin",
        "description": "services.appointment-service.appointments.admin",
        "peekOfCode": "class TimeSlotAdmin(admin.ModelAdmin):\n    list_display = ('doctor_id', 'date', 'start_time', 'end_time', 'status', 'is_active', 'location')\n    list_filter = ('date', 'status', 'is_active')\n    search_fields = ('doctor_id', 'location')\n    date_hierarchy = 'date'\n@admin.register(Appointment)\nclass AppointmentAdmin(admin.ModelAdmin):\n    list_display = ('id', 'patient_id', 'get_doctor_id', 'get_appointment_date', 'get_start_time', 'get_end_time', 'status')\n    list_filter = ('status', 'time_slot__date')\n    search_fields = ('patient_id', 'time_slot__doctor_id')",
        "detail": "services.appointment-service.appointments.admin",
        "documentation": {}
    },
    {
        "label": "AppointmentAdmin",
        "kind": 6,
        "importPath": "services.appointment-service.appointments.admin",
        "description": "services.appointment-service.appointments.admin",
        "peekOfCode": "class AppointmentAdmin(admin.ModelAdmin):\n    list_display = ('id', 'patient_id', 'get_doctor_id', 'get_appointment_date', 'get_start_time', 'get_end_time', 'status')\n    list_filter = ('status', 'time_slot__date')\n    search_fields = ('patient_id', 'time_slot__doctor_id')\n    date_hierarchy = 'time_slot__date'\n    def get_doctor_id(self, obj):\n        return obj.doctor_id\n    get_doctor_id.short_description = 'Doctor ID'\n    def get_appointment_date(self, obj):\n        return obj.appointment_date",
        "detail": "services.appointment-service.appointments.admin",
        "documentation": {}
    },
    {
        "label": "AppointmentReminderAdmin",
        "kind": 6,
        "importPath": "services.appointment-service.appointments.admin",
        "description": "services.appointment-service.appointments.admin",
        "peekOfCode": "class AppointmentReminderAdmin(admin.ModelAdmin):\n    list_display = ('appointment', 'reminder_type', 'scheduled_time', 'status', 'sent_at')\n    list_filter = ('reminder_type', 'status')\n    search_fields = ('appointment__patient_id', 'appointment__doctor_id')\n    date_hierarchy = 'scheduled_time'",
        "detail": "services.appointment-service.appointments.admin",
        "documentation": {}
    },
    {
        "label": "AppointmentsConfig",
        "kind": 6,
        "importPath": "services.appointment-service.appointments.apps",
        "description": "services.appointment-service.appointments.apps",
        "peekOfCode": "class AppointmentsConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'appointments'\n    def ready(self):\n        import appointments.signals",
        "detail": "services.appointment-service.appointments.apps",
        "documentation": {}
    },
    {
        "label": "ServiceUser",
        "kind": 6,
        "importPath": "services.appointment-service.appointments.authentication",
        "description": "services.appointment-service.appointments.authentication",
        "peekOfCode": "class ServiceUser:\n    \"\"\"\n    Custom user class for appointment service authentication.\n    \"\"\"\n    def __init__(self, user_id, role, email=None, first_name=None, last_name=None, **kwargs):\n        self.id = user_id\n        self.user_id = user_id  # For compatibility with both formats\n        self.role = role\n        self.email = email\n        self.first_name = first_name",
        "detail": "services.appointment-service.appointments.authentication",
        "documentation": {}
    },
    {
        "label": "CustomJWTAuthentication",
        "kind": 6,
        "importPath": "services.appointment-service.appointments.authentication",
        "description": "services.appointment-service.appointments.authentication",
        "peekOfCode": "class CustomJWTAuthentication(BaseAuthentication):\n    \"\"\"\n    Custom authentication that handles JWT tokens for Appointment Service.\n    This bypasses the common_auth module to solve token verification issues.\n    \"\"\"\n    def authenticate(self, request):\n        \"\"\"\n        Authenticate using JWT token or headers.\n        \"\"\"\n        # First try to authenticate from headers (API Gateway method)",
        "detail": "services.appointment-service.appointments.authentication",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "services.appointment-service.appointments.authentication",
        "description": "services.appointment-service.appointments.authentication",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass ServiceUser:\n    \"\"\"\n    Custom user class for appointment service authentication.\n    \"\"\"\n    def __init__(self, user_id, role, email=None, first_name=None, last_name=None, **kwargs):\n        self.id = user_id\n        self.user_id = user_id  # For compatibility with both formats\n        self.role = role\n        self.email = email",
        "detail": "services.appointment-service.appointments.authentication",
        "documentation": {}
    },
    {
        "label": "AppointmentServiceException",
        "kind": 6,
        "importPath": "services.appointment-service.appointments.exceptions",
        "description": "services.appointment-service.appointments.exceptions",
        "peekOfCode": "class AppointmentServiceException(APIException):\n    \"\"\"Base exception for appointment service.\"\"\"\n    status_code = status.HTTP_500_INTERNAL_SERVER_ERROR\n    default_detail = 'Đã xảy ra lỗi trong dịch vụ lịch hẹn.'\n    default_code = 'appointment_service_error'\nclass InvalidStatusTransitionException(AppointmentServiceException):\n    \"\"\"Exception raised when trying to perform an invalid status transition.\"\"\"\n    status_code = status.HTTP_400_BAD_REQUEST\n    default_detail = 'Không thể chuyển trạng thái lịch hẹn.'\n    default_code = 'invalid_status_transition'",
        "detail": "services.appointment-service.appointments.exceptions",
        "documentation": {}
    },
    {
        "label": "InvalidStatusTransitionException",
        "kind": 6,
        "importPath": "services.appointment-service.appointments.exceptions",
        "description": "services.appointment-service.appointments.exceptions",
        "peekOfCode": "class InvalidStatusTransitionException(AppointmentServiceException):\n    \"\"\"Exception raised when trying to perform an invalid status transition.\"\"\"\n    status_code = status.HTTP_400_BAD_REQUEST\n    default_detail = 'Không thể chuyển trạng thái lịch hẹn.'\n    default_code = 'invalid_status_transition'\nclass TimeSlotUnavailableException(AppointmentServiceException):\n    \"\"\"Exception raised when trying to book an unavailable time slot.\"\"\"\n    status_code = status.HTTP_400_BAD_REQUEST\n    default_detail = 'Khung giờ đã chọn không khả dụng.'\n    default_code = 'time_slot_unavailable'",
        "detail": "services.appointment-service.appointments.exceptions",
        "documentation": {}
    },
    {
        "label": "TimeSlotUnavailableException",
        "kind": 6,
        "importPath": "services.appointment-service.appointments.exceptions",
        "description": "services.appointment-service.appointments.exceptions",
        "peekOfCode": "class TimeSlotUnavailableException(AppointmentServiceException):\n    \"\"\"Exception raised when trying to book an unavailable time slot.\"\"\"\n    status_code = status.HTTP_400_BAD_REQUEST\n    default_detail = 'Khung giờ đã chọn không khả dụng.'\n    default_code = 'time_slot_unavailable'\n    def __init__(self, detail=None, code=None, alternatives=None):\n        super().__init__(detail, code)\n        self.alternatives = alternatives\n        # Nếu có alternatives, thêm vào detail\n        if alternatives:",
        "detail": "services.appointment-service.appointments.exceptions",
        "documentation": {}
    },
    {
        "label": "TimeSlotCapacityExceededException",
        "kind": 6,
        "importPath": "services.appointment-service.appointments.exceptions",
        "description": "services.appointment-service.appointments.exceptions",
        "peekOfCode": "class TimeSlotCapacityExceededException(AppointmentServiceException):\n    \"\"\"Exception raised when trying to book a time slot that has reached its capacity.\"\"\"\n    status_code = status.HTTP_400_BAD_REQUEST\n    default_detail = 'Khung giờ đã đạt số lượng bệnh nhân tối đa.'\n    default_code = 'time_slot_capacity_exceeded'\nclass InvalidAppointmentDataException(AppointmentServiceException):\n    \"\"\"Exception raised when appointment data is invalid.\"\"\"\n    status_code = status.HTTP_400_BAD_REQUEST\n    default_detail = 'Dữ liệu lịch hẹn không hợp lệ.'\n    default_code = 'invalid_appointment_data'",
        "detail": "services.appointment-service.appointments.exceptions",
        "documentation": {}
    },
    {
        "label": "InvalidAppointmentDataException",
        "kind": 6,
        "importPath": "services.appointment-service.appointments.exceptions",
        "description": "services.appointment-service.appointments.exceptions",
        "peekOfCode": "class InvalidAppointmentDataException(AppointmentServiceException):\n    \"\"\"Exception raised when appointment data is invalid.\"\"\"\n    status_code = status.HTTP_400_BAD_REQUEST\n    default_detail = 'Dữ liệu lịch hẹn không hợp lệ.'\n    default_code = 'invalid_appointment_data'\nclass PermissionDeniedException(AppointmentServiceException):\n    \"\"\"Exception raised when user doesn't have permission to perform an action.\"\"\"\n    status_code = status.HTTP_403_FORBIDDEN\n    default_detail = 'Bạn không có quyền thực hiện hành động này.'\n    default_code = 'permission_denied'",
        "detail": "services.appointment-service.appointments.exceptions",
        "documentation": {}
    },
    {
        "label": "PermissionDeniedException",
        "kind": 6,
        "importPath": "services.appointment-service.appointments.exceptions",
        "description": "services.appointment-service.appointments.exceptions",
        "peekOfCode": "class PermissionDeniedException(AppointmentServiceException):\n    \"\"\"Exception raised when user doesn't have permission to perform an action.\"\"\"\n    status_code = status.HTTP_403_FORBIDDEN\n    default_detail = 'Bạn không có quyền thực hiện hành động này.'\n    default_code = 'permission_denied'\nclass ResourceNotFoundException(AppointmentServiceException):\n    \"\"\"Exception raised when a resource is not found.\"\"\"\n    status_code = status.HTTP_404_NOT_FOUND\n    default_detail = 'Không tìm thấy tài nguyên yêu cầu.'\n    default_code = 'resource_not_found'",
        "detail": "services.appointment-service.appointments.exceptions",
        "documentation": {}
    },
    {
        "label": "ResourceNotFoundException",
        "kind": 6,
        "importPath": "services.appointment-service.appointments.exceptions",
        "description": "services.appointment-service.appointments.exceptions",
        "peekOfCode": "class ResourceNotFoundException(AppointmentServiceException):\n    \"\"\"Exception raised when a resource is not found.\"\"\"\n    status_code = status.HTTP_404_NOT_FOUND\n    default_detail = 'Không tìm thấy tài nguyên yêu cầu.'\n    default_code = 'resource_not_found'",
        "detail": "services.appointment-service.appointments.exceptions",
        "documentation": {}
    },
    {
        "label": "appointment_exception_handler",
        "kind": 2,
        "importPath": "services.appointment-service.appointments.exception_handlers",
        "description": "services.appointment-service.appointments.exception_handlers",
        "peekOfCode": "def appointment_exception_handler(exc, context):\n    \"\"\"\n    Custom exception handler for appointment service.\n    \"\"\"\n    # First, handle any DRF exceptions using the default handler\n    response = exception_handler(exc, context)\n    # If response is already handled by DRF, return it\n    if response is not None:\n        return response\n    # Handle our custom exceptions",
        "detail": "services.appointment-service.appointments.exception_handlers",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "services.appointment-service.appointments.exception_handlers",
        "description": "services.appointment-service.appointments.exception_handlers",
        "peekOfCode": "logger = logging.getLogger(__name__)\ndef appointment_exception_handler(exc, context):\n    \"\"\"\n    Custom exception handler for appointment service.\n    \"\"\"\n    # First, handle any DRF exceptions using the default handler\n    response = exception_handler(exc, context)\n    # If response is already handled by DRF, return it\n    if response is not None:\n        return response",
        "detail": "services.appointment-service.appointments.exception_handlers",
        "documentation": {}
    },
    {
        "label": "get_service_url",
        "kind": 2,
        "importPath": "services.appointment-service.appointments.integrations",
        "description": "services.appointment-service.appointments.integrations",
        "peekOfCode": "def get_service_url(service_name):\n    \"\"\"Lấy URL service từ settings hoặc biến môi trường\"\"\"\n    service_integrations = getattr(settings, 'SERVICE_INTEGRATIONS', {})\n    return service_integrations.get(f\"{service_name}_URL\", os.environ.get(f\"{service_name}_URL\", f\"http://{service_name.lower()}:8000\"))\n# Lấy URL các service từ settings\nUSER_SERVICE_URL = get_service_url('USER_SERVICE')\nMEDICAL_RECORD_SERVICE_URL = get_service_url('MEDICAL_RECORD_SERVICE')\nPHARMACY_SERVICE_URL = get_service_url('PHARMACY_SERVICE')\nLAB_SERVICE_URL = get_service_url('LABORATORY_SERVICE')\nNOTIFICATION_SERVICE_URL = get_service_url('NOTIFICATION_SERVICE')",
        "detail": "services.appointment-service.appointments.integrations",
        "documentation": {}
    },
    {
        "label": "get_auth_headers",
        "kind": 2,
        "importPath": "services.appointment-service.appointments.integrations",
        "description": "services.appointment-service.appointments.integrations",
        "peekOfCode": "def get_auth_headers(token=None):\n    \"\"\"Tạo headers xác thực cho các request đến service khác\"\"\"\n    headers = {\n        'Content-Type': 'application/json',\n    }\n    if token:\n        headers['Authorization'] = f'Bearer {token}'\n    return headers\ndef make_api_request(method, url, data=None, token=None, retry=0):\n    \"\"\"",
        "detail": "services.appointment-service.appointments.integrations",
        "documentation": {}
    },
    {
        "label": "make_api_request",
        "kind": 2,
        "importPath": "services.appointment-service.appointments.integrations",
        "description": "services.appointment-service.appointments.integrations",
        "peekOfCode": "def make_api_request(method, url, data=None, token=None, retry=0):\n    \"\"\"\n    Hàm chung để thực hiện API call với cơ chế retry\n    \"\"\"\n    import time\n    headers = get_auth_headers(token)\n    try:\n        if method.lower() == 'get':\n            response = requests.get(url, headers=headers, timeout=TIMEOUT)\n        elif method.lower() == 'post':",
        "detail": "services.appointment-service.appointments.integrations",
        "documentation": {}
    },
    {
        "label": "get_user_info",
        "kind": 2,
        "importPath": "services.appointment-service.appointments.integrations",
        "description": "services.appointment-service.appointments.integrations",
        "peekOfCode": "def get_user_info(user_id, token=None):\n    \"\"\"Lấy thông tin người dùng từ User Service\"\"\"\n    url = f\"{USER_SERVICE_URL}/api/users/{user_id}/\"\n    return make_api_request('get', url, token=token)\ndef get_doctor_info(doctor_id, token=None):\n    \"\"\"Lấy thông tin bác sĩ từ User Service\"\"\"\n    try:\n        # Thử gọi API đến User Service\n        url = f\"{USER_SERVICE_URL}/api/doctors/{doctor_id}/\"\n        result = make_api_request('get', url, token=token)",
        "detail": "services.appointment-service.appointments.integrations",
        "documentation": {}
    },
    {
        "label": "get_doctor_info",
        "kind": 2,
        "importPath": "services.appointment-service.appointments.integrations",
        "description": "services.appointment-service.appointments.integrations",
        "peekOfCode": "def get_doctor_info(doctor_id, token=None):\n    \"\"\"Lấy thông tin bác sĩ từ User Service\"\"\"\n    try:\n        # Thử gọi API đến User Service\n        url = f\"{USER_SERVICE_URL}/api/doctors/{doctor_id}/\"\n        result = make_api_request('get', url, token=token)\n        if result:\n            return result\n        # Nếu không lấy được thông tin, thử gọi API danh sách và lọc\n        url = f\"{USER_SERVICE_URL}/api/doctors/\"",
        "detail": "services.appointment-service.appointments.integrations",
        "documentation": {}
    },
    {
        "label": "get_doctors_by_specialty",
        "kind": 2,
        "importPath": "services.appointment-service.appointments.integrations",
        "description": "services.appointment-service.appointments.integrations",
        "peekOfCode": "def get_doctors_by_specialty(specialty, token=None):\n    \"\"\"Lấy danh sách ID bác sĩ theo chuyên khoa từ User Service\"\"\"\n    url = f\"{USER_SERVICE_URL}/api/doctors/?specialty={specialty}\"\n    doctors = make_api_request('get', url, token=token)\n    return [doctor.get('id') for doctor in doctors if doctor.get('id')] if doctors else None\ndef get_doctors_by_department(department, token=None):\n    \"\"\"Lấy danh sách ID bác sĩ theo khoa từ User Service\"\"\"\n    # Lấy danh sách chuyên khoa thuộc khoa này\n    url = f\"{USER_SERVICE_URL}/api/specialties/?department={department}\"\n    specialties = make_api_request('get', url, token=token)",
        "detail": "services.appointment-service.appointments.integrations",
        "documentation": {}
    },
    {
        "label": "get_doctors_by_department",
        "kind": 2,
        "importPath": "services.appointment-service.appointments.integrations",
        "description": "services.appointment-service.appointments.integrations",
        "peekOfCode": "def get_doctors_by_department(department, token=None):\n    \"\"\"Lấy danh sách ID bác sĩ theo khoa từ User Service\"\"\"\n    # Lấy danh sách chuyên khoa thuộc khoa này\n    url = f\"{USER_SERVICE_URL}/api/specialties/?department={department}\"\n    specialties = make_api_request('get', url, token=token)\n    if not specialties:\n        logger.warning(f\"No specialties found for department {department}\")\n        return None\n    # Lấy ID của các chuyên khoa\n    specialty_ids = [specialty.get('id') for specialty in specialties if specialty.get('id')]",
        "detail": "services.appointment-service.appointments.integrations",
        "documentation": {}
    },
    {
        "label": "get_doctors_info",
        "kind": 2,
        "importPath": "services.appointment-service.appointments.integrations",
        "description": "services.appointment-service.appointments.integrations",
        "peekOfCode": "def get_doctors_info(doctor_ids, token=None):\n    \"\"\"Lấy thông tin chi tiết của nhiều bác sĩ từ User Service\"\"\"\n    if not doctor_ids:\n        return []\n    # Nếu chỉ có một ID, sử dụng API chi tiết\n    if len(doctor_ids) == 1:\n        doctor_info = get_doctor_info(doctor_ids[0], token)\n        return [doctor_info] if doctor_info else []\n    # Nếu có nhiều ID, sử dụng API danh sách với filter\n    try:",
        "detail": "services.appointment-service.appointments.integrations",
        "documentation": {}
    },
    {
        "label": "get_specialties",
        "kind": 2,
        "importPath": "services.appointment-service.appointments.integrations",
        "description": "services.appointment-service.appointments.integrations",
        "peekOfCode": "def get_specialties(token=None):\n    \"\"\"Lấy danh sách chuyên khoa từ User Service\"\"\"\n    url = f\"{USER_SERVICE_URL}/api/specialties/\"\n    return make_api_request('get', url, token=token) or []\ndef get_departments(token=None):\n    \"\"\"Lấy danh sách khoa từ User Service\"\"\"\n    url = f\"{USER_SERVICE_URL}/api/departments/\"\n    return make_api_request('get', url, token=token) or []\n# Tích hợp với Medical Record Service\ndef get_patient_medical_record(patient_id, token=None):",
        "detail": "services.appointment-service.appointments.integrations",
        "documentation": {}
    },
    {
        "label": "get_departments",
        "kind": 2,
        "importPath": "services.appointment-service.appointments.integrations",
        "description": "services.appointment-service.appointments.integrations",
        "peekOfCode": "def get_departments(token=None):\n    \"\"\"Lấy danh sách khoa từ User Service\"\"\"\n    url = f\"{USER_SERVICE_URL}/api/departments/\"\n    return make_api_request('get', url, token=token) or []\n# Tích hợp với Medical Record Service\ndef get_patient_medical_record(patient_id, token=None):\n    \"\"\"\n    Lấy thông tin hồ sơ y tế của bệnh nhân\n    Parameters:\n    patient_id - int: ID bệnh nhân",
        "detail": "services.appointment-service.appointments.integrations",
        "documentation": {}
    },
    {
        "label": "get_patient_medical_record",
        "kind": 2,
        "importPath": "services.appointment-service.appointments.integrations",
        "description": "services.appointment-service.appointments.integrations",
        "peekOfCode": "def get_patient_medical_record(patient_id, token=None):\n    \"\"\"\n    Lấy thông tin hồ sơ y tế của bệnh nhân\n    Parameters:\n    patient_id - int: ID bệnh nhân\n    token - str: JWT token để xác thực với Medical Record Service\n    \"\"\"\n    url = f\"{MEDICAL_RECORD_SERVICE_URL}/api/medical-records/?patient_id={patient_id}\"\n    result = make_api_request('get', url, token=token)\n    # Ghi log kết quả",
        "detail": "services.appointment-service.appointments.integrations",
        "documentation": {}
    },
    {
        "label": "update_medical_record",
        "kind": 2,
        "importPath": "services.appointment-service.appointments.integrations",
        "description": "services.appointment-service.appointments.integrations",
        "peekOfCode": "def update_medical_record(medical_record_id, data, token=None):\n    \"\"\"\n    Cập nhật hồ sơ y tế\n    Parameters:\n    medical_record_id - int: ID hồ sơ y tế\n    data - dict: Dữ liệu cập nhật\n    token - str: JWT token để xác thực với Medical Record Service\n    \"\"\"\n    url = f\"{MEDICAL_RECORD_SERVICE_URL}/api/medical-records/{medical_record_id}/\"\n    result = make_api_request('patch', url, data=data, token=token)",
        "detail": "services.appointment-service.appointments.integrations",
        "documentation": {}
    },
    {
        "label": "create_medical_record",
        "kind": 2,
        "importPath": "services.appointment-service.appointments.integrations",
        "description": "services.appointment-service.appointments.integrations",
        "peekOfCode": "def create_medical_record(patient_id, data, token=None):\n    \"\"\"\n    Tạo hồ sơ y tế mới\n    Parameters:\n    patient_id - int: ID bệnh nhân\n    data - dict: Dữ liệu hồ sơ y tế\n    token - str: JWT token để xác thực với Medical Record Service\n    \"\"\"\n    url = f\"{MEDICAL_RECORD_SERVICE_URL}/api/medical-records/\"\n    # Thêm patient_id vào dữ liệu",
        "detail": "services.appointment-service.appointments.integrations",
        "documentation": {}
    },
    {
        "label": "update_medical_record_from_appointment",
        "kind": 2,
        "importPath": "services.appointment-service.appointments.integrations",
        "description": "services.appointment-service.appointments.integrations",
        "peekOfCode": "def update_medical_record_from_appointment(appointment, diagnosis=None, treatment=None, notes=None, token=None):\n    \"\"\"\n    Cập nhật hồ sơ y tế từ lịch hẹn\n    Parameters:\n    appointment - Appointment: Đối tượng lịch hẹn\n    diagnosis - str: Chẩn đoán\n    treatment - str: Phương pháp điều trị\n    notes - str: Ghi chú\n    token - str: JWT token để xác thực với Medical Record Service\n    \"\"\"",
        "detail": "services.appointment-service.appointments.integrations",
        "documentation": {}
    },
    {
        "label": "create_lab_request",
        "kind": 2,
        "importPath": "services.appointment-service.appointments.integrations",
        "description": "services.appointment-service.appointments.integrations",
        "peekOfCode": "def create_lab_request(appointment_id, doctor_id, patient_id, tests, token=None):\n    \"\"\"Tạo yêu cầu xét nghiệm\"\"\"\n    url = f\"{LAB_SERVICE_URL}/api/lab-requests/\"\n    data = {\n        \"appointment_id\": appointment_id,\n        \"doctor_id\": doctor_id,\n        \"patient_id\": patient_id,\n        \"tests\": tests\n    }\n    return make_api_request('post', url, data=data, token=token)",
        "detail": "services.appointment-service.appointments.integrations",
        "documentation": {}
    },
    {
        "label": "get_lab_results",
        "kind": 2,
        "importPath": "services.appointment-service.appointments.integrations",
        "description": "services.appointment-service.appointments.integrations",
        "peekOfCode": "def get_lab_results(appointment_id, token=None):\n    \"\"\"Lấy kết quả xét nghiệm cho lịch hẹn\"\"\"\n    url = f\"{LAB_SERVICE_URL}/api/lab-results/?appointment_id={appointment_id}\"\n    return make_api_request('get', url, token=token)\n# Tích hợp với Pharmacy Service\ndef create_prescription(appointment_id, doctor_id, patient_id, medications, token=None):\n    \"\"\"Tạo đơn thuốc\"\"\"\n    url = f\"{PHARMACY_SERVICE_URL}/api/prescriptions/\"\n    data = {\n        \"appointment_id\": appointment_id,",
        "detail": "services.appointment-service.appointments.integrations",
        "documentation": {}
    },
    {
        "label": "create_prescription",
        "kind": 2,
        "importPath": "services.appointment-service.appointments.integrations",
        "description": "services.appointment-service.appointments.integrations",
        "peekOfCode": "def create_prescription(appointment_id, doctor_id, patient_id, medications, token=None):\n    \"\"\"Tạo đơn thuốc\"\"\"\n    url = f\"{PHARMACY_SERVICE_URL}/api/prescriptions/\"\n    data = {\n        \"appointment_id\": appointment_id,\n        \"doctor_id\": doctor_id,\n        \"patient_id\": patient_id,\n        \"medications\": medications\n    }\n    return make_api_request('post', url, data=data, token=token)",
        "detail": "services.appointment-service.appointments.integrations",
        "documentation": {}
    },
    {
        "label": "get_prescription",
        "kind": 2,
        "importPath": "services.appointment-service.appointments.integrations",
        "description": "services.appointment-service.appointments.integrations",
        "peekOfCode": "def get_prescription(prescription_id, token=None):\n    \"\"\"Lấy thông tin đơn thuốc\"\"\"\n    url = f\"{PHARMACY_SERVICE_URL}/api/prescriptions/{prescription_id}/\"\n    return make_api_request('get', url, token=token)\n# Tích hợp với Notification Service\ndef send_notification(user_id, notification_type, message, additional_data=None, token=None):\n    \"\"\"\n    Gửi thông báo cho người dùng\n    Parameters:\n    user_id - int: ID người dùng nhận thông báo",
        "detail": "services.appointment-service.appointments.integrations",
        "documentation": {}
    },
    {
        "label": "send_notification",
        "kind": 2,
        "importPath": "services.appointment-service.appointments.integrations",
        "description": "services.appointment-service.appointments.integrations",
        "peekOfCode": "def send_notification(user_id, notification_type, message, additional_data=None, token=None):\n    \"\"\"\n    Gửi thông báo cho người dùng\n    Parameters:\n    user_id - int: ID người dùng nhận thông báo\n    notification_type - str: Loại thông báo (APPOINTMENT_CREATED, APPOINTMENT_UPDATED, APPOINTMENT_CANCELLED, etc.)\n    message - str: Nội dung thông báo\n    additional_data - dict: Dữ liệu bổ sung (tùy chọn)\n    token - str: JWT token để xác thực với Notification Service\n    \"\"\"",
        "detail": "services.appointment-service.appointments.integrations",
        "documentation": {}
    },
    {
        "label": "send_appointment_notification",
        "kind": 2,
        "importPath": "services.appointment-service.appointments.integrations",
        "description": "services.appointment-service.appointments.integrations",
        "peekOfCode": "def send_appointment_notification(appointment, notification_type, message=None, token=None):\n    \"\"\"\n    Gửi thông báo liên quan đến lịch hẹn\n    Parameters:\n    appointment - Appointment: Đối tượng lịch hẹn\n    notification_type - str: Loại thông báo (CREATED, UPDATED, CANCELLED, REMINDER, etc.)\n    message - str: Nội dung thông báo tùy chỉnh (nếu không cung cấp, sẽ tạo tự động)\n    token - str: JWT token để xác thực với Notification Service\n    \"\"\"\n    # Lấy thông tin cần thiết từ lịch hẹn",
        "detail": "services.appointment-service.appointments.integrations",
        "documentation": {}
    },
    {
        "label": "create_billing",
        "kind": 2,
        "importPath": "services.appointment-service.appointments.integrations",
        "description": "services.appointment-service.appointments.integrations",
        "peekOfCode": "def create_billing(data, token=None):\n    \"\"\"\n    Tạo hóa đơn mới cho một lịch hẹn\n    Parameters:\n    data - dict: Dữ liệu hóa đơn bao gồm:\n        - appointment_id: ID lịch hẹn\n        - patient_id: ID bệnh nhân\n        - doctor_id: ID bác sĩ\n        - service_items: Danh sách các dịch vụ\n        - insurance_id: ID bảo hiểm (tùy chọn)",
        "detail": "services.appointment-service.appointments.integrations",
        "documentation": {}
    },
    {
        "label": "create_appointment_billing",
        "kind": 2,
        "importPath": "services.appointment-service.appointments.integrations",
        "description": "services.appointment-service.appointments.integrations",
        "peekOfCode": "def create_appointment_billing(appointment, service_items=None, token=None):\n    \"\"\"\n    Tạo hóa đơn cho lịch hẹn\n    Parameters:\n    appointment - Appointment: Đối tượng lịch hẹn\n    service_items - list: Danh sách các dịch vụ (nếu không cung cấp, sẽ tạo dịch vụ mặc định)\n    token - str: JWT token để xác thực với Billing Service\n    \"\"\"\n    # Lấy thông tin cần thiết từ lịch hẹn\n    appointment_id = appointment.id",
        "detail": "services.appointment-service.appointments.integrations",
        "documentation": {}
    },
    {
        "label": "update_billing_status",
        "kind": 2,
        "importPath": "services.appointment-service.appointments.integrations",
        "description": "services.appointment-service.appointments.integrations",
        "peekOfCode": "def update_billing_status(billing_id, status, token=None):\n    \"\"\"\n    Cập nhật trạng thái của hóa đơn\n    Parameters:\n    billing_id - int: ID hóa đơn cần cập nhật\n    status - str: Trạng thái mới ('PENDING', 'PAID', 'CANCELLED', 'REFUNDED')\n    \"\"\"\n    url = f\"{BILLING_SERVICE_URL}/api/billings/{billing_id}/update-status/\"\n    data = {\"status\": status}\n    return make_api_request('patch', url, data=data, token=token)",
        "detail": "services.appointment-service.appointments.integrations",
        "documentation": {}
    },
    {
        "label": "get_billing_by_appointment",
        "kind": 2,
        "importPath": "services.appointment-service.appointments.integrations",
        "description": "services.appointment-service.appointments.integrations",
        "peekOfCode": "def get_billing_by_appointment(appointment_id, token=None):\n    \"\"\"\n    Lấy thông tin hóa đơn theo ID lịch hẹn\n    Parameters:\n    appointment_id - int: ID lịch hẹn\n    \"\"\"\n    url = f\"{BILLING_SERVICE_URL}/api/billings/by-appointment/{appointment_id}/\"\n    return make_api_request('get', url, token=token)\n# Tích hợp với Insurance Service\n# Giả định URL của Insurance Service",
        "detail": "services.appointment-service.appointments.integrations",
        "documentation": {}
    },
    {
        "label": "get_patient_insurance",
        "kind": 2,
        "importPath": "services.appointment-service.appointments.integrations",
        "description": "services.appointment-service.appointments.integrations",
        "peekOfCode": "def get_patient_insurance(patient_id, token=None):\n    \"\"\"\n    Lấy thông tin bảo hiểm của bệnh nhân\n    Parameters:\n    patient_id - int: ID bệnh nhân\n    token - str: JWT token để xác thực với Insurance Service\n    \"\"\"\n    # Thử gọi API đến Insurance Service nếu có\n    try:\n        url = f\"{INSURANCE_SERVICE_URL}/api/insurance-policies/?patient_id={patient_id}\"",
        "detail": "services.appointment-service.appointments.integrations",
        "documentation": {}
    },
    {
        "label": "verify_insurance",
        "kind": 2,
        "importPath": "services.appointment-service.appointments.integrations",
        "description": "services.appointment-service.appointments.integrations",
        "peekOfCode": "def verify_insurance(insurance_id, service_code, amount, token=None):\n    \"\"\"\n    Xác minh bảo hiểm cho dịch vụ cụ thể\n    Parameters:\n    insurance_id - int: ID bảo hiểm\n    service_code - str: Mã dịch vụ\n    amount - float: Số tiền cần thanh toán\n    token - str: JWT token để xác thực với Insurance Service\n    \"\"\"\n    # Thử gọi API đến Insurance Service nếu có",
        "detail": "services.appointment-service.appointments.integrations",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "services.appointment-service.appointments.integrations",
        "description": "services.appointment-service.appointments.integrations",
        "peekOfCode": "logger = logging.getLogger(__name__)\n# Lấy URL các service từ settings (có fallback nếu không có)\ndef get_service_url(service_name):\n    \"\"\"Lấy URL service từ settings hoặc biến môi trường\"\"\"\n    service_integrations = getattr(settings, 'SERVICE_INTEGRATIONS', {})\n    return service_integrations.get(f\"{service_name}_URL\", os.environ.get(f\"{service_name}_URL\", f\"http://{service_name.lower()}:8000\"))\n# Lấy URL các service từ settings\nUSER_SERVICE_URL = get_service_url('USER_SERVICE')\nMEDICAL_RECORD_SERVICE_URL = get_service_url('MEDICAL_RECORD_SERVICE')\nPHARMACY_SERVICE_URL = get_service_url('PHARMACY_SERVICE')",
        "detail": "services.appointment-service.appointments.integrations",
        "documentation": {}
    },
    {
        "label": "USER_SERVICE_URL",
        "kind": 5,
        "importPath": "services.appointment-service.appointments.integrations",
        "description": "services.appointment-service.appointments.integrations",
        "peekOfCode": "USER_SERVICE_URL = get_service_url('USER_SERVICE')\nMEDICAL_RECORD_SERVICE_URL = get_service_url('MEDICAL_RECORD_SERVICE')\nPHARMACY_SERVICE_URL = get_service_url('PHARMACY_SERVICE')\nLAB_SERVICE_URL = get_service_url('LABORATORY_SERVICE')\nNOTIFICATION_SERVICE_URL = get_service_url('NOTIFICATION_SERVICE')\nBILLING_SERVICE_URL = get_service_url('BILLING_SERVICE')\n# Cấu hình retry cho các API call\nMAX_RETRIES = getattr(settings, 'API_RETRY_CONFIG', {}).get('MAX_RETRIES', 3)\nRETRY_DELAY = getattr(settings, 'API_RETRY_CONFIG', {}).get('RETRY_DELAY', 1)\nTIMEOUT = getattr(settings, 'API_RETRY_CONFIG', {}).get('TIMEOUT', 5)",
        "detail": "services.appointment-service.appointments.integrations",
        "documentation": {}
    },
    {
        "label": "MEDICAL_RECORD_SERVICE_URL",
        "kind": 5,
        "importPath": "services.appointment-service.appointments.integrations",
        "description": "services.appointment-service.appointments.integrations",
        "peekOfCode": "MEDICAL_RECORD_SERVICE_URL = get_service_url('MEDICAL_RECORD_SERVICE')\nPHARMACY_SERVICE_URL = get_service_url('PHARMACY_SERVICE')\nLAB_SERVICE_URL = get_service_url('LABORATORY_SERVICE')\nNOTIFICATION_SERVICE_URL = get_service_url('NOTIFICATION_SERVICE')\nBILLING_SERVICE_URL = get_service_url('BILLING_SERVICE')\n# Cấu hình retry cho các API call\nMAX_RETRIES = getattr(settings, 'API_RETRY_CONFIG', {}).get('MAX_RETRIES', 3)\nRETRY_DELAY = getattr(settings, 'API_RETRY_CONFIG', {}).get('RETRY_DELAY', 1)\nTIMEOUT = getattr(settings, 'API_RETRY_CONFIG', {}).get('TIMEOUT', 5)\ndef get_auth_headers(token=None):",
        "detail": "services.appointment-service.appointments.integrations",
        "documentation": {}
    },
    {
        "label": "PHARMACY_SERVICE_URL",
        "kind": 5,
        "importPath": "services.appointment-service.appointments.integrations",
        "description": "services.appointment-service.appointments.integrations",
        "peekOfCode": "PHARMACY_SERVICE_URL = get_service_url('PHARMACY_SERVICE')\nLAB_SERVICE_URL = get_service_url('LABORATORY_SERVICE')\nNOTIFICATION_SERVICE_URL = get_service_url('NOTIFICATION_SERVICE')\nBILLING_SERVICE_URL = get_service_url('BILLING_SERVICE')\n# Cấu hình retry cho các API call\nMAX_RETRIES = getattr(settings, 'API_RETRY_CONFIG', {}).get('MAX_RETRIES', 3)\nRETRY_DELAY = getattr(settings, 'API_RETRY_CONFIG', {}).get('RETRY_DELAY', 1)\nTIMEOUT = getattr(settings, 'API_RETRY_CONFIG', {}).get('TIMEOUT', 5)\ndef get_auth_headers(token=None):\n    \"\"\"Tạo headers xác thực cho các request đến service khác\"\"\"",
        "detail": "services.appointment-service.appointments.integrations",
        "documentation": {}
    },
    {
        "label": "LAB_SERVICE_URL",
        "kind": 5,
        "importPath": "services.appointment-service.appointments.integrations",
        "description": "services.appointment-service.appointments.integrations",
        "peekOfCode": "LAB_SERVICE_URL = get_service_url('LABORATORY_SERVICE')\nNOTIFICATION_SERVICE_URL = get_service_url('NOTIFICATION_SERVICE')\nBILLING_SERVICE_URL = get_service_url('BILLING_SERVICE')\n# Cấu hình retry cho các API call\nMAX_RETRIES = getattr(settings, 'API_RETRY_CONFIG', {}).get('MAX_RETRIES', 3)\nRETRY_DELAY = getattr(settings, 'API_RETRY_CONFIG', {}).get('RETRY_DELAY', 1)\nTIMEOUT = getattr(settings, 'API_RETRY_CONFIG', {}).get('TIMEOUT', 5)\ndef get_auth_headers(token=None):\n    \"\"\"Tạo headers xác thực cho các request đến service khác\"\"\"\n    headers = {",
        "detail": "services.appointment-service.appointments.integrations",
        "documentation": {}
    },
    {
        "label": "NOTIFICATION_SERVICE_URL",
        "kind": 5,
        "importPath": "services.appointment-service.appointments.integrations",
        "description": "services.appointment-service.appointments.integrations",
        "peekOfCode": "NOTIFICATION_SERVICE_URL = get_service_url('NOTIFICATION_SERVICE')\nBILLING_SERVICE_URL = get_service_url('BILLING_SERVICE')\n# Cấu hình retry cho các API call\nMAX_RETRIES = getattr(settings, 'API_RETRY_CONFIG', {}).get('MAX_RETRIES', 3)\nRETRY_DELAY = getattr(settings, 'API_RETRY_CONFIG', {}).get('RETRY_DELAY', 1)\nTIMEOUT = getattr(settings, 'API_RETRY_CONFIG', {}).get('TIMEOUT', 5)\ndef get_auth_headers(token=None):\n    \"\"\"Tạo headers xác thực cho các request đến service khác\"\"\"\n    headers = {\n        'Content-Type': 'application/json',",
        "detail": "services.appointment-service.appointments.integrations",
        "documentation": {}
    },
    {
        "label": "BILLING_SERVICE_URL",
        "kind": 5,
        "importPath": "services.appointment-service.appointments.integrations",
        "description": "services.appointment-service.appointments.integrations",
        "peekOfCode": "BILLING_SERVICE_URL = get_service_url('BILLING_SERVICE')\n# Cấu hình retry cho các API call\nMAX_RETRIES = getattr(settings, 'API_RETRY_CONFIG', {}).get('MAX_RETRIES', 3)\nRETRY_DELAY = getattr(settings, 'API_RETRY_CONFIG', {}).get('RETRY_DELAY', 1)\nTIMEOUT = getattr(settings, 'API_RETRY_CONFIG', {}).get('TIMEOUT', 5)\ndef get_auth_headers(token=None):\n    \"\"\"Tạo headers xác thực cho các request đến service khác\"\"\"\n    headers = {\n        'Content-Type': 'application/json',\n    }",
        "detail": "services.appointment-service.appointments.integrations",
        "documentation": {}
    },
    {
        "label": "MAX_RETRIES",
        "kind": 5,
        "importPath": "services.appointment-service.appointments.integrations",
        "description": "services.appointment-service.appointments.integrations",
        "peekOfCode": "MAX_RETRIES = getattr(settings, 'API_RETRY_CONFIG', {}).get('MAX_RETRIES', 3)\nRETRY_DELAY = getattr(settings, 'API_RETRY_CONFIG', {}).get('RETRY_DELAY', 1)\nTIMEOUT = getattr(settings, 'API_RETRY_CONFIG', {}).get('TIMEOUT', 5)\ndef get_auth_headers(token=None):\n    \"\"\"Tạo headers xác thực cho các request đến service khác\"\"\"\n    headers = {\n        'Content-Type': 'application/json',\n    }\n    if token:\n        headers['Authorization'] = f'Bearer {token}'",
        "detail": "services.appointment-service.appointments.integrations",
        "documentation": {}
    },
    {
        "label": "RETRY_DELAY",
        "kind": 5,
        "importPath": "services.appointment-service.appointments.integrations",
        "description": "services.appointment-service.appointments.integrations",
        "peekOfCode": "RETRY_DELAY = getattr(settings, 'API_RETRY_CONFIG', {}).get('RETRY_DELAY', 1)\nTIMEOUT = getattr(settings, 'API_RETRY_CONFIG', {}).get('TIMEOUT', 5)\ndef get_auth_headers(token=None):\n    \"\"\"Tạo headers xác thực cho các request đến service khác\"\"\"\n    headers = {\n        'Content-Type': 'application/json',\n    }\n    if token:\n        headers['Authorization'] = f'Bearer {token}'\n    return headers",
        "detail": "services.appointment-service.appointments.integrations",
        "documentation": {}
    },
    {
        "label": "TIMEOUT",
        "kind": 5,
        "importPath": "services.appointment-service.appointments.integrations",
        "description": "services.appointment-service.appointments.integrations",
        "peekOfCode": "TIMEOUT = getattr(settings, 'API_RETRY_CONFIG', {}).get('TIMEOUT', 5)\ndef get_auth_headers(token=None):\n    \"\"\"Tạo headers xác thực cho các request đến service khác\"\"\"\n    headers = {\n        'Content-Type': 'application/json',\n    }\n    if token:\n        headers['Authorization'] = f'Bearer {token}'\n    return headers\ndef make_api_request(method, url, data=None, token=None, retry=0):",
        "detail": "services.appointment-service.appointments.integrations",
        "documentation": {}
    },
    {
        "label": "INSURANCE_SERVICE_URL",
        "kind": 5,
        "importPath": "services.appointment-service.appointments.integrations",
        "description": "services.appointment-service.appointments.integrations",
        "peekOfCode": "INSURANCE_SERVICE_URL = get_service_url('INSURANCE_SERVICE')\ndef get_patient_insurance(patient_id, token=None):\n    \"\"\"\n    Lấy thông tin bảo hiểm của bệnh nhân\n    Parameters:\n    patient_id - int: ID bệnh nhân\n    token - str: JWT token để xác thực với Insurance Service\n    \"\"\"\n    # Thử gọi API đến Insurance Service nếu có\n    try:",
        "detail": "services.appointment-service.appointments.integrations",
        "documentation": {}
    },
    {
        "label": "Department",
        "kind": 6,
        "importPath": "services.appointment-service.appointments.models",
        "description": "services.appointment-service.appointments.models",
        "peekOfCode": "class Department(models.Model):\n    \"\"\"Khoa trong bệnh viện\"\"\"\n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    name = models.CharField(max_length=100, unique=True)\n    description = models.TextField(blank=True)\n    image = models.CharField(max_length=255, blank=True, null=True)  # URL hình ảnh\n    is_active = models.BooleanField(default=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    def __str__(self):",
        "detail": "services.appointment-service.appointments.models",
        "documentation": {}
    },
    {
        "label": "DoctorProfile",
        "kind": 6,
        "importPath": "services.appointment-service.appointments.models",
        "description": "services.appointment-service.appointments.models",
        "peekOfCode": "class DoctorProfile(models.Model):\n    \"\"\"Hồ sơ chi tiết của bác sĩ\"\"\"\n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    user_id = models.IntegerField(unique=True)  # ID từ user service\n    department = models.ForeignKey(Department, on_delete=models.SET_NULL, null=True, related_name='doctors')\n    specialty = models.CharField(max_length=100)\n    qualifications = models.TextField()\n    experience_years = models.PositiveIntegerField(default=0)\n    bio = models.TextField(blank=True)\n    avatar = models.CharField(max_length=255, blank=True, null=True)  # URL avatar",
        "detail": "services.appointment-service.appointments.models",
        "documentation": {}
    },
    {
        "label": "DoctorAvailability",
        "kind": 6,
        "importPath": "services.appointment-service.appointments.models",
        "description": "services.appointment-service.appointments.models",
        "peekOfCode": "class DoctorAvailability(models.Model):\n    \"\"\"Lịch trống của bác sĩ\"\"\"\n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    doctor = models.ForeignKey(DoctorProfile, on_delete=models.CASCADE, related_name='availabilities')\n    date = models.DateField()\n    start_time = models.TimeField()\n    end_time = models.TimeField()\n    is_available = models.BooleanField(default=True)  # False nếu đã có lịch hẹn\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)",
        "detail": "services.appointment-service.appointments.models",
        "documentation": {}
    },
    {
        "label": "TimeSlot",
        "kind": 6,
        "importPath": "services.appointment-service.appointments.models",
        "description": "services.appointment-service.appointments.models",
        "peekOfCode": "class TimeSlot(models.Model):\n    \"\"\"Khung giờ khám bệnh\"\"\"\n    STATUS_CHOICES = [\n        ('AVAILABLE', 'Còn trống'),\n        ('BOOKED', 'Đã đặt'),\n        ('CANCELLED', 'Đã hủy'),\n        ('BLOCKED', 'Bị khóa')\n    ]\n    SOURCE_TYPE_CHOICES = [\n        ('REGULAR', 'Từ lịch thường xuyên'),",
        "detail": "services.appointment-service.appointments.models",
        "documentation": {}
    },
    {
        "label": "AppointmentReason",
        "kind": 6,
        "importPath": "services.appointment-service.appointments.models",
        "description": "services.appointment-service.appointments.models",
        "peekOfCode": "class AppointmentReason(models.Model):\n    \"\"\"Phân loại lý do khám\"\"\"\n    name = models.CharField(max_length=100, help_text=\"Tên lý do khám\")\n    description = models.TextField(blank=True, null=True, help_text=\"Mô tả chi tiết\")\n    department = models.CharField(max_length=100, blank=True, null=True, help_text=\"Khoa/Phòng liên quan\")\n    priority = models.IntegerField(default=0, help_text=\"Mức độ ưu tiên (cao hơn = ưu tiên hơn)\")\n    estimated_duration = models.IntegerField(default=30, help_text=\"Thời gian ước tính (phút)\")\n    is_active = models.BooleanField(default=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)",
        "detail": "services.appointment-service.appointments.models",
        "documentation": {}
    },
    {
        "label": "AppointmentStatus",
        "kind": 6,
        "importPath": "services.appointment-service.appointments.models",
        "description": "services.appointment-service.appointments.models",
        "peekOfCode": "class AppointmentStatus(models.TextChoices):\n    PENDING = 'PENDING', 'Chờ xác nhận'\n    CONFIRMED = 'CONFIRMED', 'Đã xác nhận'\n    COMPLETED = 'COMPLETED', 'Hoàn thành'\n    CANCELLED = 'CANCELLED', 'Đã hủy'\n    RESCHEDULED = 'RESCHEDULED', 'Đã đổi lịch'\n    NO_SHOW = 'NO_SHOW', 'Không đến'\nclass Appointment(models.Model):\n    \"\"\"Lịch hẹn của bệnh nhân với bác sĩ\"\"\"\n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)",
        "detail": "services.appointment-service.appointments.models",
        "documentation": {}
    },
    {
        "label": "Appointment",
        "kind": 6,
        "importPath": "services.appointment-service.appointments.models",
        "description": "services.appointment-service.appointments.models",
        "peekOfCode": "class Appointment(models.Model):\n    \"\"\"Lịch hẹn của bệnh nhân với bác sĩ\"\"\"\n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    patient_id = models.IntegerField()  # ID từ user service\n    doctor = models.ForeignKey(DoctorProfile, on_delete=models.CASCADE, related_name='appointments')\n    availability = models.OneToOneField(DoctorAvailability, on_delete=models.SET_NULL, null=True, related_name='appointment')\n    appointment_date = models.DateField()\n    start_time = models.TimeField()\n    end_time = models.TimeField()\n    status = models.CharField(max_length=20, choices=AppointmentStatus.choices, default=AppointmentStatus.PENDING)",
        "detail": "services.appointment-service.appointments.models",
        "documentation": {}
    },
    {
        "label": "AppointmentReminder",
        "kind": 6,
        "importPath": "services.appointment-service.appointments.models",
        "description": "services.appointment-service.appointments.models",
        "peekOfCode": "class AppointmentReminder(models.Model):\n    \"\"\"Nhắc nhở lịch hẹn khám bệnh\"\"\"\n    REMINDER_TYPE_CHOICES = [\n        ('EMAIL', 'Email'),\n        ('SMS', 'SMS'),\n        ('PUSH', 'Push Notification'),\n    ]\n    STATUS_CHOICES = [\n        ('PENDING', 'Chờ gửi'),\n        ('SENT', 'Đã gửi'),",
        "detail": "services.appointment-service.appointments.models",
        "documentation": {}
    },
    {
        "label": "PatientVisit",
        "kind": 6,
        "importPath": "services.appointment-service.appointments.models",
        "description": "services.appointment-service.appointments.models",
        "peekOfCode": "class PatientVisit(models.Model):\n    \"\"\"Thông tin chi tiết về lần khám bệnh\"\"\"\n    VISIT_STATUS_CHOICES = [\n        ('WAITING', 'Đang chờ'),\n        ('WITH_NURSE', 'Đang với y tá'),\n        ('WITH_DOCTOR', 'Đang khám với bác sĩ'),\n        ('COMPLETED', 'Đã hoàn thành'),\n        ('CANCELLED', 'Đã hủy')\n    ]\n    appointment = models.OneToOneField(Appointment, on_delete=models.CASCADE, related_name='visit')",
        "detail": "services.appointment-service.appointments.models",
        "documentation": {}
    },
    {
        "label": "CanAssistDoctor",
        "kind": 6,
        "importPath": "services.appointment-service.appointments.permissions",
        "description": "services.appointment-service.appointments.permissions",
        "peekOfCode": "class CanAssistDoctor:\n    \"\"\"\n    Permission cho phép y tá hỗ trợ bác sĩ trong quản lý lịch hẹn.\n    Y tá có thể xem, check-in và cập nhật thông tin sinh tồn cho bệnh nhân.\n    \"\"\"\n    def has_permission(self, request, view):\n        user_role = getattr(request.user, 'role', None)\n        return user_role in ['NURSE', 'DOCTOR', 'ADMIN']\n    def has_object_permission(self, request, view, obj):\n        user_role = getattr(request.user, 'role', None)",
        "detail": "services.appointment-service.appointments.permissions",
        "documentation": {}
    },
    {
        "label": "CanVerifyInsurance",
        "kind": 6,
        "importPath": "services.appointment-service.appointments.permissions",
        "description": "services.appointment-service.appointments.permissions",
        "peekOfCode": "class CanVerifyInsurance:\n    \"\"\"\n    Permission cho phép nhà cung cấp bảo hiểm xác minh thông tin bảo hiểm.\n    \"\"\"\n    def has_permission(self, request, view):\n        user_role = getattr(request.user, 'role', None)\n        return user_role in ['INSURANCE_PROVIDER', 'ADMIN']\n# Quyền hạn quản lý danh sách chờ\nclass CanManageWaitingList:\n    \"\"\"",
        "detail": "services.appointment-service.appointments.permissions",
        "documentation": {}
    },
    {
        "label": "CanManageWaitingList",
        "kind": 6,
        "importPath": "services.appointment-service.appointments.permissions",
        "description": "services.appointment-service.appointments.permissions",
        "peekOfCode": "class CanManageWaitingList:\n    \"\"\"\n    Permission cho phép quản lý danh sách chờ.\n    Bệnh nhân có thể tạo và hủy yêu cầu chờ.\n    Bác sĩ, y tá và admin có thể xem và cập nhật danh sách chờ.\n    \"\"\"\n    def has_permission(self, request, view):\n        user_role = getattr(request.user, 'role', None)\n        # Bệnh nhân chỉ có thể tạo và xem danh sách chờ của họ\n        if user_role == 'PATIENT':",
        "detail": "services.appointment-service.appointments.permissions",
        "documentation": {}
    },
    {
        "label": "IsPatientOrDoctor",
        "kind": 6,
        "importPath": "services.appointment-service.appointments.permissions",
        "description": "services.appointment-service.appointments.permissions",
        "peekOfCode": "class IsPatientOrDoctor:\n    def __new__(cls):\n        return CanViewAppointments()\nclass IsDoctor(IsDoctor):\n    \"\"\"\n    Permission to only allow doctors to access their availabilities and time slots.\n    \"\"\"\n    pass\n# Use IsAdmin directly from common-auth\n# No need to redefine",
        "detail": "services.appointment-service.appointments.permissions",
        "documentation": {}
    },
    {
        "label": "IsDoctor",
        "kind": 6,
        "importPath": "services.appointment-service.appointments.permissions",
        "description": "services.appointment-service.appointments.permissions",
        "peekOfCode": "class IsDoctor(IsDoctor):\n    \"\"\"\n    Permission to only allow doctors to access their availabilities and time slots.\n    \"\"\"\n    pass\n# Use IsAdmin directly from common-auth\n# No need to redefine",
        "detail": "services.appointment-service.appointments.permissions",
        "documentation": {}
    },
    {
        "label": "CanViewAppointments",
        "kind": 5,
        "importPath": "services.appointment-service.appointments.permissions",
        "description": "services.appointment-service.appointments.permissions",
        "peekOfCode": "CanViewAppointments = AppointmentPermissions.CanViewAppointments\nCanCreateAppointment = AppointmentPermissions.CanCreateAppointment\nCanUpdateAppointment = AppointmentPermissions.CanUpdateAppointment\nCanDeleteAppointment = AppointmentPermissions.CanDeleteAppointment\nCanManageDoctorSchedule = AppointmentPermissions.CanManageDoctorSchedule\n# Quyền hạn mới cho y tá\nclass CanAssistDoctor:\n    \"\"\"\n    Permission cho phép y tá hỗ trợ bác sĩ trong quản lý lịch hẹn.\n    Y tá có thể xem, check-in và cập nhật thông tin sinh tồn cho bệnh nhân.",
        "detail": "services.appointment-service.appointments.permissions",
        "documentation": {}
    },
    {
        "label": "CanCreateAppointment",
        "kind": 5,
        "importPath": "services.appointment-service.appointments.permissions",
        "description": "services.appointment-service.appointments.permissions",
        "peekOfCode": "CanCreateAppointment = AppointmentPermissions.CanCreateAppointment\nCanUpdateAppointment = AppointmentPermissions.CanUpdateAppointment\nCanDeleteAppointment = AppointmentPermissions.CanDeleteAppointment\nCanManageDoctorSchedule = AppointmentPermissions.CanManageDoctorSchedule\n# Quyền hạn mới cho y tá\nclass CanAssistDoctor:\n    \"\"\"\n    Permission cho phép y tá hỗ trợ bác sĩ trong quản lý lịch hẹn.\n    Y tá có thể xem, check-in và cập nhật thông tin sinh tồn cho bệnh nhân.\n    \"\"\"",
        "detail": "services.appointment-service.appointments.permissions",
        "documentation": {}
    },
    {
        "label": "CanUpdateAppointment",
        "kind": 5,
        "importPath": "services.appointment-service.appointments.permissions",
        "description": "services.appointment-service.appointments.permissions",
        "peekOfCode": "CanUpdateAppointment = AppointmentPermissions.CanUpdateAppointment\nCanDeleteAppointment = AppointmentPermissions.CanDeleteAppointment\nCanManageDoctorSchedule = AppointmentPermissions.CanManageDoctorSchedule\n# Quyền hạn mới cho y tá\nclass CanAssistDoctor:\n    \"\"\"\n    Permission cho phép y tá hỗ trợ bác sĩ trong quản lý lịch hẹn.\n    Y tá có thể xem, check-in và cập nhật thông tin sinh tồn cho bệnh nhân.\n    \"\"\"\n    def has_permission(self, request, view):",
        "detail": "services.appointment-service.appointments.permissions",
        "documentation": {}
    },
    {
        "label": "CanDeleteAppointment",
        "kind": 5,
        "importPath": "services.appointment-service.appointments.permissions",
        "description": "services.appointment-service.appointments.permissions",
        "peekOfCode": "CanDeleteAppointment = AppointmentPermissions.CanDeleteAppointment\nCanManageDoctorSchedule = AppointmentPermissions.CanManageDoctorSchedule\n# Quyền hạn mới cho y tá\nclass CanAssistDoctor:\n    \"\"\"\n    Permission cho phép y tá hỗ trợ bác sĩ trong quản lý lịch hẹn.\n    Y tá có thể xem, check-in và cập nhật thông tin sinh tồn cho bệnh nhân.\n    \"\"\"\n    def has_permission(self, request, view):\n        user_role = getattr(request.user, 'role', None)",
        "detail": "services.appointment-service.appointments.permissions",
        "documentation": {}
    },
    {
        "label": "CanManageDoctorSchedule",
        "kind": 5,
        "importPath": "services.appointment-service.appointments.permissions",
        "description": "services.appointment-service.appointments.permissions",
        "peekOfCode": "CanManageDoctorSchedule = AppointmentPermissions.CanManageDoctorSchedule\n# Quyền hạn mới cho y tá\nclass CanAssistDoctor:\n    \"\"\"\n    Permission cho phép y tá hỗ trợ bác sĩ trong quản lý lịch hẹn.\n    Y tá có thể xem, check-in và cập nhật thông tin sinh tồn cho bệnh nhân.\n    \"\"\"\n    def has_permission(self, request, view):\n        user_role = getattr(request.user, 'role', None)\n        return user_role in ['NURSE', 'DOCTOR', 'ADMIN']",
        "detail": "services.appointment-service.appointments.permissions",
        "documentation": {}
    },
    {
        "label": "DepartmentSerializer",
        "kind": 6,
        "importPath": "services.appointment-service.appointments.serializers",
        "description": "services.appointment-service.appointments.serializers",
        "peekOfCode": "class DepartmentSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Department\n        fields = '__all__'\nclass DoctorProfileSerializer(serializers.ModelSerializer):\n    department_name = serializers.SerializerMethodField()\n    class Meta:\n        model = DoctorProfile\n        fields = '__all__'\n    def get_department_name(self, obj):",
        "detail": "services.appointment-service.appointments.serializers",
        "documentation": {}
    },
    {
        "label": "DoctorProfileSerializer",
        "kind": 6,
        "importPath": "services.appointment-service.appointments.serializers",
        "description": "services.appointment-service.appointments.serializers",
        "peekOfCode": "class DoctorProfileSerializer(serializers.ModelSerializer):\n    department_name = serializers.SerializerMethodField()\n    class Meta:\n        model = DoctorProfile\n        fields = '__all__'\n    def get_department_name(self, obj):\n        if obj.department:\n            return obj.department.name\n        return None\nclass DoctorAvailabilitySerializer(serializers.ModelSerializer):",
        "detail": "services.appointment-service.appointments.serializers",
        "documentation": {}
    },
    {
        "label": "DoctorAvailabilitySerializer",
        "kind": 6,
        "importPath": "services.appointment-service.appointments.serializers",
        "description": "services.appointment-service.appointments.serializers",
        "peekOfCode": "class DoctorAvailabilitySerializer(serializers.ModelSerializer):\n    weekday_name = serializers.CharField(source='get_weekday_display', read_only=True)\n    schedule_type_name = serializers.CharField(source='get_schedule_type_display', read_only=True)\n    recurring_pattern_name = serializers.CharField(source='get_recurring_pattern_display', read_only=True)\n    class Meta:\n        model = DoctorAvailability\n        fields = [\n            'id', 'doctor_id', 'weekday', 'weekday_name', 'start_time', 'end_time', 'is_available', 'is_active',\n            'location', 'department', 'room', 'schedule_type', 'schedule_type_name',\n            'recurring_pattern', 'recurring_pattern_name', 'effective_date', 'start_date', 'end_date',",
        "detail": "services.appointment-service.appointments.serializers",
        "documentation": {}
    },
    {
        "label": "TimeSlotSerializer",
        "kind": 6,
        "importPath": "services.appointment-service.appointments.serializers",
        "description": "services.appointment-service.appointments.serializers",
        "peekOfCode": "class TimeSlotSerializer(serializers.ModelSerializer):\n    availability_id = serializers.PrimaryKeyRelatedField(source='availability', read_only=True)\n    doctor_info = serializers.SerializerMethodField()\n    status_name = serializers.CharField(source='get_status_display', read_only=True)\n    source_type_name = serializers.CharField(source='get_source_type_display', read_only=True)\n    class Meta:\n        model = TimeSlot\n        fields = [\n            'id', 'doctor_id', 'doctor_info', 'date', 'start_time', 'end_time',\n            'status', 'status_name', 'is_active', 'source_type', 'source_type_name',",
        "detail": "services.appointment-service.appointments.serializers",
        "documentation": {}
    },
    {
        "label": "AppointmentReasonSerializer",
        "kind": 6,
        "importPath": "services.appointment-service.appointments.serializers",
        "description": "services.appointment-service.appointments.serializers",
        "peekOfCode": "class AppointmentReasonSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = AppointmentReason\n        fields = [\n            'id', 'name', 'description', 'department', 'priority', 'estimated_duration',\n            'is_active', 'created_at', 'updated_at'\n        ]\n        read_only_fields = ['created_at', 'updated_at']\nclass AppointmentReminderSerializer(serializers.ModelSerializer):\n    reminder_type_name = serializers.CharField(source='get_reminder_type_display', read_only=True)",
        "detail": "services.appointment-service.appointments.serializers",
        "documentation": {}
    },
    {
        "label": "AppointmentReminderSerializer",
        "kind": 6,
        "importPath": "services.appointment-service.appointments.serializers",
        "description": "services.appointment-service.appointments.serializers",
        "peekOfCode": "class AppointmentReminderSerializer(serializers.ModelSerializer):\n    reminder_type_name = serializers.CharField(source='get_reminder_type_display', read_only=True)\n    status_name = serializers.CharField(source='get_status_display', read_only=True)\n    class Meta:\n        model = AppointmentReminder\n        fields = ['id', 'appointment', 'reminder_type', 'reminder_type_name', 'scheduled_time', 'status', 'status_name', 'sent_at', 'message', 'created_at', 'updated_at']\n        read_only_fields = ['created_at', 'updated_at', 'sent_at']\nclass PatientVisitSerializer(serializers.ModelSerializer):\n    waiting_time_display = serializers.SerializerMethodField()\n    status_name = serializers.CharField(source='get_status_display', read_only=True)",
        "detail": "services.appointment-service.appointments.serializers",
        "documentation": {}
    },
    {
        "label": "PatientVisitSerializer",
        "kind": 6,
        "importPath": "services.appointment-service.appointments.serializers",
        "description": "services.appointment-service.appointments.serializers",
        "peekOfCode": "class PatientVisitSerializer(serializers.ModelSerializer):\n    waiting_time_display = serializers.SerializerMethodField()\n    status_name = serializers.CharField(source='get_status_display', read_only=True)\n    class Meta:\n        model = PatientVisit\n        fields = [\n            'id', 'appointment', 'status', 'status_name', 'checked_in_at', 'checked_in_by',\n            'nurse_id', 'vitals_recorded', 'vitals_recorded_at',\n            'doctor_start_time', 'doctor_end_time', 'waiting_time', 'waiting_time_display',\n            'notes', 'created_at', 'updated_at'",
        "detail": "services.appointment-service.appointments.serializers",
        "documentation": {}
    },
    {
        "label": "AppointmentSerializer",
        "kind": 6,
        "importPath": "services.appointment-service.appointments.serializers",
        "description": "services.appointment-service.appointments.serializers",
        "peekOfCode": "class AppointmentSerializer(serializers.ModelSerializer):\n    status_name = serializers.CharField(source='get_status_display', read_only=True)\n    appointment_type_name = serializers.CharField(source='get_appointment_type_display', read_only=True)\n    priority_name = serializers.CharField(source='get_priority_display', read_only=True)\n    reminders = AppointmentReminderSerializer(many=True, read_only=True)\n    doctor_id = serializers.IntegerField(read_only=True)\n    appointment_date = serializers.DateField(source='time_slot.date', read_only=True)\n    start_time = serializers.TimeField(source='time_slot.start_time', read_only=True)\n    end_time = serializers.TimeField(source='time_slot.end_time', read_only=True)\n    location = serializers.CharField(source='time_slot.location', read_only=True)",
        "detail": "services.appointment-service.appointments.serializers",
        "documentation": {}
    },
    {
        "label": "AppointmentCreateSerializer",
        "kind": 6,
        "importPath": "services.appointment-service.appointments.serializers",
        "description": "services.appointment-service.appointments.serializers",
        "peekOfCode": "class AppointmentCreateSerializer(serializers.ModelSerializer):\n    # patient_id will be set from the authenticated user, not provided by client\n    patient_id = serializers.IntegerField(read_only=True)\n    time_slot_id = serializers.IntegerField(write_only=True, required=True)\n    reason_category_id = serializers.IntegerField(write_only=True, required=False)\n    created_by = serializers.IntegerField(required=False)\n    doctor_name = serializers.CharField(read_only=True)\n    class Meta:\n        model = Appointment\n        fields = [",
        "detail": "services.appointment-service.appointments.serializers",
        "documentation": {}
    },
    {
        "label": "AppointmentTypeSerializer",
        "kind": 6,
        "importPath": "services.appointment-service.appointments.serializers_choices",
        "description": "services.appointment-service.appointments.serializers_choices",
        "peekOfCode": "class AppointmentTypeSerializer(serializers.Serializer):\n    id = serializers.CharField()\n    name = serializers.CharField()\n    code = serializers.CharField()\n    def to_representation(self, instance):\n        return {\n            'id': instance[0],\n            'name': instance[1],\n            'code': instance[0]\n        }",
        "detail": "services.appointment-service.appointments.serializers_choices",
        "documentation": {}
    },
    {
        "label": "PrioritySerializer",
        "kind": 6,
        "importPath": "services.appointment-service.appointments.serializers_choices",
        "description": "services.appointment-service.appointments.serializers_choices",
        "peekOfCode": "class PrioritySerializer(serializers.Serializer):\n    id = serializers.CharField()\n    name = serializers.CharField()\n    code = serializers.CharField()\n    description = serializers.CharField(required=False)\n    def to_representation(self, instance):\n        return {\n            'id': str(instance[0]),\n            'name': instance[1],\n            'code': str(instance[0]),",
        "detail": "services.appointment-service.appointments.serializers_choices",
        "documentation": {}
    },
    {
        "label": "create_appointment_reminder",
        "kind": 2,
        "importPath": "services.appointment-service.appointments.signals",
        "description": "services.appointment-service.appointments.signals",
        "peekOfCode": "def create_appointment_reminder(sender, instance, created, **kwargs):\n    \"\"\"\n    Tự động tạo nhắc nhở cho lịch hẹn.\n    \"\"\"\n    if created or instance.status == 'CONFIRMED':\n        # Tạo nhắc nhở 24 giờ trước lịch hẹn\n        reminder_time = datetime.combine(\n            instance.time_slot.date,\n            instance.time_slot.start_time,\n            tzinfo=timezone.get_current_timezone()",
        "detail": "services.appointment-service.appointments.signals",
        "documentation": {}
    },
    {
        "label": "send_appointment_notification",
        "kind": 2,
        "importPath": "services.appointment-service.appointments.signals",
        "description": "services.appointment-service.appointments.signals",
        "peekOfCode": "def send_appointment_notification(sender, instance, created, **kwargs):\n    \"\"\"\n    Gửi thông báo khi lịch hẹn được tạo hoặc cập nhật.\n    \"\"\"\n    try:\n        # Xác định loại sự kiện dựa trên trạng thái\n        if created:\n            # Lịch hẹn mới được tạo\n            event_type = 'CREATED'\n            message = f\"Lịch hẹn mới đã được tạo vào ngày {instance.time_slot.date} lúc {instance.time_slot.start_time}.\"",
        "detail": "services.appointment-service.appointments.signals",
        "documentation": {}
    },
    {
        "label": "send_reminder_notification",
        "kind": 2,
        "importPath": "services.appointment-service.appointments.signals",
        "description": "services.appointment-service.appointments.signals",
        "peekOfCode": "def send_reminder_notification(sender, instance, created, **kwargs):\n    \"\"\"\n    Gửi thông báo khi reminder được tạo hoặc kích hoạt.\n    \"\"\"\n    try:\n        # Chỉ gửi thông báo nếu reminder mới được tạo hoặc đang chờ xử lý\n        if created or instance.status == 'PENDING':\n            appointment = instance.appointment\n            # Chuẩn bị dữ liệu thông báo\n            data = {",
        "detail": "services.appointment-service.appointments.signals",
        "documentation": {}
    },
    {
        "label": "save_original_status",
        "kind": 2,
        "importPath": "services.appointment-service.appointments.signals",
        "description": "services.appointment-service.appointments.signals",
        "peekOfCode": "def save_original_status(sender, instance, **kwargs):\n    \"\"\"\n    Lưu trạng thái ban đầu của lịch hẹn để so sánh sau khi cập nhật.\n    \"\"\"\n    if hasattr(instance, 'status'):\n        instance._original_status = instance.status",
        "detail": "services.appointment-service.appointments.signals",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "services.appointment-service.appointments.urls",
        "description": "services.appointment-service.appointments.urls",
        "peekOfCode": "router = DefaultRouter()\nrouter.register(r'doctor-availabilities', DoctorAvailabilityViewSet)\nrouter.register(r'time-slots', TimeSlotViewSet)\nrouter.register(r'appointments', AppointmentViewSet)\nrouter.register(r'patient-visits', PatientVisitViewSet)\nrouter.register(r'appointment-reasons', AppointmentReasonViewSet)\nrouter.register(r'departments', DepartmentViewSet)\nrouter.register(r'doctors', DoctorProfileViewSet)\n# Cấu trúc URL đơn giản và thống nhất\nurlpatterns = [",
        "detail": "services.appointment-service.appointments.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "services.appointment-service.appointments.urls",
        "description": "services.appointment-service.appointments.urls",
        "peekOfCode": "urlpatterns = [\n    path('', include(router.urls)),\n]",
        "detail": "services.appointment-service.appointments.urls",
        "documentation": {}
    },
    {
        "label": "DoctorAvailabilityViewSet",
        "kind": 6,
        "importPath": "services.appointment-service.appointments.views",
        "description": "services.appointment-service.appointments.views",
        "peekOfCode": "class DoctorAvailabilityViewSet(viewsets.ModelViewSet):\n    queryset = DoctorAvailability.objects.all()\n    serializer_class = DoctorAvailabilitySerializer\n    authentication_classes = [CustomJWTAuthentication]\n    permission_classes = [CanManageDoctorSchedule]\n    filter_backends = [DjangoFilterBackend, filters.OrderingFilter]\n    filterset_fields = ['doctor_id', 'weekday', 'is_available']\n    ordering_fields = ['weekday', 'start_time']\n    def get_queryset(self):\n        \"\"\"",
        "detail": "services.appointment-service.appointments.views",
        "documentation": {}
    },
    {
        "label": "TimeSlotViewSet",
        "kind": 6,
        "importPath": "services.appointment-service.appointments.views",
        "description": "services.appointment-service.appointments.views",
        "peekOfCode": "class TimeSlotViewSet(viewsets.ModelViewSet):\n    \"\"\"\n    API endpoint for managing time slots.\n    Supports both URL structures:\n    - /api/time-slots/\n    - /api/appointments/time-slots/\n    \"\"\"\n    queryset = TimeSlot.objects.all()\n    serializer_class = TimeSlotSerializer\n    authentication_classes = [CustomJWTAuthentication]",
        "detail": "services.appointment-service.appointments.views",
        "documentation": {}
    },
    {
        "label": "AppointmentViewSet",
        "kind": 6,
        "importPath": "services.appointment-service.appointments.views",
        "description": "services.appointment-service.appointments.views",
        "peekOfCode": "class AppointmentViewSet(viewsets.ModelViewSet):\n    \"\"\"\n    API endpoint for managing appointments.\n    Supports both URL structures:\n    - /api/appointments/\n    - /api/appointments/appointments/ (nested)\n    \"\"\"\n    queryset = Appointment.objects.all()\n    serializer_class = AppointmentSerializer\n    authentication_classes = [CustomJWTAuthentication]",
        "detail": "services.appointment-service.appointments.views",
        "documentation": {}
    },
    {
        "label": "PatientVisitViewSet",
        "kind": 6,
        "importPath": "services.appointment-service.appointments.views",
        "description": "services.appointment-service.appointments.views",
        "peekOfCode": "class PatientVisitViewSet(viewsets.ModelViewSet):\n    \"\"\"\n    API endpoint for managing patient visits (check-ins).\n    Supports both URL structures:\n    - /api/patient-visits/\n    - /api/appointments/visits/\n    \"\"\"\n    queryset = PatientVisit.objects.all()\n    serializer_class = PatientVisitSerializer\n    authentication_classes = [CustomJWTAuthentication]",
        "detail": "services.appointment-service.appointments.views",
        "documentation": {}
    },
    {
        "label": "DepartmentViewSet",
        "kind": 6,
        "importPath": "services.appointment-service.appointments.views",
        "description": "services.appointment-service.appointments.views",
        "peekOfCode": "class DepartmentViewSet(viewsets.ModelViewSet):\n    \"\"\"\n    API để quản lý Khoa.\n    \"\"\"\n    queryset = Department.objects.all()\n    serializer_class = DepartmentSerializer\n    def get_permissions(self):\n        \"\"\"\n        Admin có thể tạo/sửa/xóa, nhưng mọi người đều có thể xem.\n        \"\"\"",
        "detail": "services.appointment-service.appointments.views",
        "documentation": {}
    },
    {
        "label": "DoctorProfileViewSet",
        "kind": 6,
        "importPath": "services.appointment-service.appointments.views",
        "description": "services.appointment-service.appointments.views",
        "peekOfCode": "class DoctorProfileViewSet(viewsets.ModelViewSet):\n    \"\"\"\n    API để quản lý hồ sơ bác sĩ.\n    \"\"\"\n    queryset = DoctorProfile.objects.filter(is_active=True)\n    serializer_class = DoctorProfileSerializer\n    def get_permissions(self):\n        \"\"\"\n        Admin có thể tạo/sửa/xóa, bác sĩ có thể cập nhật thông tin của mình.\n        \"\"\"",
        "detail": "services.appointment-service.appointments.views",
        "documentation": {}
    },
    {
        "label": "available_doctors",
        "kind": 2,
        "importPath": "services.appointment-service.appointments.views",
        "description": "services.appointment-service.appointments.views",
        "peekOfCode": "def available_doctors(request):\n    \"\"\"\n    API endpoint for getting doctors with available time slots in a date range.\n    Query parameters:\n    - start_date: Ngày bắt đầu (YYYY-MM-DD) (optional, mặc định là ngày hiện tại)\n    - end_date: Ngày kết thúc (YYYY-MM-DD) (optional, mặc định là 30 ngày sau start_date)\n    - specialty: Lọc theo chuyên khoa (optional)\n    - department: Lọc theo khoa (optional)\n    - location: Lọc theo địa điểm (optional)\n    - time_range: Lọc theo khoảng thởi gian (optional, format: HH:MM-HH:MM)",
        "detail": "services.appointment-service.appointments.views",
        "documentation": {}
    },
    {
        "label": "estimated_waiting_time",
        "kind": 2,
        "importPath": "services.appointment-service.appointments.views",
        "description": "services.appointment-service.appointments.views",
        "peekOfCode": "def estimated_waiting_time(request):\n    \"\"\"\n    API endpoint for getting estimated waiting time for a doctor or department.\n    Query parameters:\n    - doctor_id: Doctor ID (optional)\n    - department: Department name (optional)\n    - date: Date in YYYY-MM-DD format (optional, defaults to today)\n    \"\"\"\n    # Xác thực người dùng\n    if not request.user.is_authenticated:",
        "detail": "services.appointment-service.appointments.views",
        "documentation": {}
    },
    {
        "label": "specialties",
        "kind": 2,
        "importPath": "services.appointment-service.appointments.views",
        "description": "services.appointment-service.appointments.views",
        "peekOfCode": "def specialties(request):\n    \"\"\"\n    API endpoint for getting specialties.\n    \"\"\"\n    # Xác thực người dùng\n    if not request.user.is_authenticated:\n        return Response({\"error\": \"Authentication required\"}, status=status.HTTP_401_UNAUTHORIZED)\n    # Lấy danh sách chuyên khoa từ user-service\n    from .integrations import get_specialties\n    token = getattr(request, 'auth', None)",
        "detail": "services.appointment-service.appointments.views",
        "documentation": {}
    },
    {
        "label": "departments",
        "kind": 2,
        "importPath": "services.appointment-service.appointments.views",
        "description": "services.appointment-service.appointments.views",
        "peekOfCode": "def departments(request):\n    \"\"\"\n    API endpoint for getting departments.\n    \"\"\"\n    # Xác thực người dùng\n    if not request.user.is_authenticated:\n        return Response({\"error\": \"Authentication required\"}, status=status.HTTP_401_UNAUTHORIZED)\n    # Lấy danh sách khoa từ user-service\n    from .integrations import get_departments\n    token = getattr(request, 'auth', None)",
        "detail": "services.appointment-service.appointments.views",
        "documentation": {}
    },
    {
        "label": "appointment_reasons_list",
        "kind": 2,
        "importPath": "services.appointment-service.appointments.views",
        "description": "services.appointment-service.appointments.views",
        "peekOfCode": "def appointment_reasons_list(request):\n    \"\"\"\n    API endpoint để lấy danh sách lý do khám.\n    Query parameters:\n    - department: Lọc theo khoa (optional)\n    - priority: Lọc theo mức độ ưu tiên (optional)\n    - search: Tìm kiếm theo tên hoặc mô tả (optional)\n    - is_active: Lọc theo trạng thái hoạt động (optional, mặc định là True)\n    \"\"\"\n    # Xác thực người dùng",
        "detail": "services.appointment-service.appointments.views",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "services.appointment-service.appointments.views",
        "description": "services.appointment-service.appointments.views",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass DoctorAvailabilityViewSet(viewsets.ModelViewSet):\n    queryset = DoctorAvailability.objects.all()\n    serializer_class = DoctorAvailabilitySerializer\n    authentication_classes = [CustomJWTAuthentication]\n    permission_classes = [CanManageDoctorSchedule]\n    filter_backends = [DjangoFilterBackend, filters.OrderingFilter]\n    filterset_fields = ['doctor_id', 'weekday', 'is_available']\n    ordering_fields = ['weekday', 'start_time']\n    def get_queryset(self):",
        "detail": "services.appointment-service.appointments.views",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "services.appointment-service.core.asgi",
        "description": "services.appointment-service.core.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "services.appointment-service.core.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "services.appointment-service.core.settings",
        "description": "services.appointment-service.core.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure-key')\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = os.environ.get('DEBUG', 'False') == 'True'\nALLOWED_HOSTS = ['*']\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',",
        "detail": "services.appointment-service.core.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "services.appointment-service.core.settings",
        "description": "services.appointment-service.core.settings",
        "peekOfCode": "SECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure-key')\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = os.environ.get('DEBUG', 'False') == 'True'\nALLOWED_HOSTS = ['*']\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',",
        "detail": "services.appointment-service.core.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "services.appointment-service.core.settings",
        "description": "services.appointment-service.core.settings",
        "peekOfCode": "DEBUG = os.environ.get('DEBUG', 'False') == 'True'\nALLOWED_HOSTS = ['*']\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',",
        "detail": "services.appointment-service.core.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "services.appointment-service.core.settings",
        "description": "services.appointment-service.core.settings",
        "peekOfCode": "ALLOWED_HOSTS = ['*']\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    # Third-party apps",
        "detail": "services.appointment-service.core.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "services.appointment-service.core.settings",
        "description": "services.appointment-service.core.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    # Third-party apps\n    'rest_framework',\n    'rest_framework_simplejwt',",
        "detail": "services.appointment-service.core.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "services.appointment-service.core.settings",
        "description": "services.appointment-service.core.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'corsheaders.middleware.CorsMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]",
        "detail": "services.appointment-service.core.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "services.appointment-service.core.settings",
        "description": "services.appointment-service.core.settings",
        "peekOfCode": "ROOT_URLCONF = 'core.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',",
        "detail": "services.appointment-service.core.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "services.appointment-service.core.settings",
        "description": "services.appointment-service.core.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "services.appointment-service.core.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "services.appointment-service.core.settings",
        "description": "services.appointment-service.core.settings",
        "peekOfCode": "WSGI_APPLICATION = 'core.wsgi.application'\n# Database\n# https://docs.djangoproject.com/en/4.2/ref/settings/#databases\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql',\n        'NAME': os.environ.get('DATABASE_NAME', 'healthcare_appointments'),\n        'USER': os.environ.get('DATABASE_USER', 'postgres'),\n        'PASSWORD': os.environ.get('DATABASE_PASSWORD', 'postgres'),\n        'HOST': os.environ.get('DATABASE_HOST', 'postgres'),",
        "detail": "services.appointment-service.core.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "services.appointment-service.core.settings",
        "description": "services.appointment-service.core.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql',\n        'NAME': os.environ.get('DATABASE_NAME', 'healthcare_appointments'),\n        'USER': os.environ.get('DATABASE_USER', 'postgres'),\n        'PASSWORD': os.environ.get('DATABASE_PASSWORD', 'postgres'),\n        'HOST': os.environ.get('DATABASE_HOST', 'postgres'),\n        'PORT': os.environ.get('DATABASE_PORT', '5432'),\n    }\n}",
        "detail": "services.appointment-service.core.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "services.appointment-service.core.settings",
        "description": "services.appointment-service.core.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "services.appointment-service.core.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "services.appointment-service.core.settings",
        "description": "services.appointment-service.core.settings",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = 'static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field",
        "detail": "services.appointment-service.core.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "services.appointment-service.core.settings",
        "description": "services.appointment-service.core.settings",
        "peekOfCode": "TIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = 'static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "services.appointment-service.core.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "services.appointment-service.core.settings",
        "description": "services.appointment-service.core.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = 'static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# CORS settings",
        "detail": "services.appointment-service.core.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "services.appointment-service.core.settings",
        "description": "services.appointment-service.core.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = 'static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# CORS settings\nCORS_ALLOWED_ORIGINS = os.environ.get(",
        "detail": "services.appointment-service.core.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "services.appointment-service.core.settings",
        "description": "services.appointment-service.core.settings",
        "peekOfCode": "STATIC_URL = 'static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# CORS settings\nCORS_ALLOWED_ORIGINS = os.environ.get(\n    'CORS_ALLOWED_ORIGINS',\n    'http://localhost:3000,http://localhost:4000'\n).split(',')",
        "detail": "services.appointment-service.core.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_ROOT",
        "kind": 5,
        "importPath": "services.appointment-service.core.settings",
        "description": "services.appointment-service.core.settings",
        "peekOfCode": "STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# CORS settings\nCORS_ALLOWED_ORIGINS = os.environ.get(\n    'CORS_ALLOWED_ORIGINS',\n    'http://localhost:3000,http://localhost:4000'\n).split(',')\n# REST Framework settings",
        "detail": "services.appointment-service.core.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "services.appointment-service.core.settings",
        "description": "services.appointment-service.core.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# CORS settings\nCORS_ALLOWED_ORIGINS = os.environ.get(\n    'CORS_ALLOWED_ORIGINS',\n    'http://localhost:3000,http://localhost:4000'\n).split(',')\n# REST Framework settings\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'common_auth.authentication.ServiceAuthentication',",
        "detail": "services.appointment-service.core.settings",
        "documentation": {}
    },
    {
        "label": "CORS_ALLOWED_ORIGINS",
        "kind": 5,
        "importPath": "services.appointment-service.core.settings",
        "description": "services.appointment-service.core.settings",
        "peekOfCode": "CORS_ALLOWED_ORIGINS = os.environ.get(\n    'CORS_ALLOWED_ORIGINS',\n    'http://localhost:3000,http://localhost:4000'\n).split(',')\n# REST Framework settings\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'common_auth.authentication.ServiceAuthentication',\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n    ),",
        "detail": "services.appointment-service.core.settings",
        "documentation": {}
    },
    {
        "label": "REST_FRAMEWORK",
        "kind": 5,
        "importPath": "services.appointment-service.core.settings",
        "description": "services.appointment-service.core.settings",
        "peekOfCode": "REST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'common_auth.authentication.ServiceAuthentication',\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n    ),\n    'DEFAULT_PERMISSION_CLASSES': [\n        'common_auth.permissions.IsAuthenticated',\n        'rest_framework.permissions.IsAuthenticated',\n    ],\n    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',",
        "detail": "services.appointment-service.core.settings",
        "documentation": {}
    },
    {
        "label": "API_GATEWAY_URL",
        "kind": 5,
        "importPath": "services.appointment-service.core.settings",
        "description": "services.appointment-service.core.settings",
        "peekOfCode": "API_GATEWAY_URL = os.environ.get('API_GATEWAY_URL', 'http://api-gateway:8000')\n# Common Auth settings\nREDIS_URL = os.environ.get('REDIS_URL', 'redis://redis:6379/0')\n# Đặt JWT_SECRET cố định để đảm bảo nhất quán với các service khác\nJWT_SECRET = 'healthcare_jwt_secret_key_2025'\n# Disable JWT signature verification for testing\nVERIFY_JWT_SIGNATURE = False  # Tạm thời tắt xác thực chữ ký JWT để debug\n# JWT Settings\nACCESS_TOKEN_LIFETIME = timedelta(minutes=60)\nREFRESH_TOKEN_LIFETIME = timedelta(days=7)",
        "detail": "services.appointment-service.core.settings",
        "documentation": {}
    },
    {
        "label": "REDIS_URL",
        "kind": 5,
        "importPath": "services.appointment-service.core.settings",
        "description": "services.appointment-service.core.settings",
        "peekOfCode": "REDIS_URL = os.environ.get('REDIS_URL', 'redis://redis:6379/0')\n# Đặt JWT_SECRET cố định để đảm bảo nhất quán với các service khác\nJWT_SECRET = 'healthcare_jwt_secret_key_2025'\n# Disable JWT signature verification for testing\nVERIFY_JWT_SIGNATURE = False  # Tạm thời tắt xác thực chữ ký JWT để debug\n# JWT Settings\nACCESS_TOKEN_LIFETIME = timedelta(minutes=60)\nREFRESH_TOKEN_LIFETIME = timedelta(days=7)\nROTATE_REFRESH_TOKENS = False\nSESSION_TTL = 86400  # 1 day in seconds",
        "detail": "services.appointment-service.core.settings",
        "documentation": {}
    },
    {
        "label": "JWT_SECRET",
        "kind": 5,
        "importPath": "services.appointment-service.core.settings",
        "description": "services.appointment-service.core.settings",
        "peekOfCode": "JWT_SECRET = 'healthcare_jwt_secret_key_2025'\n# Disable JWT signature verification for testing\nVERIFY_JWT_SIGNATURE = False  # Tạm thời tắt xác thực chữ ký JWT để debug\n# JWT Settings\nACCESS_TOKEN_LIFETIME = timedelta(minutes=60)\nREFRESH_TOKEN_LIFETIME = timedelta(days=7)\nROTATE_REFRESH_TOKENS = False\nSESSION_TTL = 86400  # 1 day in seconds\nMAX_SESSIONS_PER_USER = 5\n# Appointment Reminder Config - Thời gian tính bằng giờ trước khi lịch hẹn diễn ra",
        "detail": "services.appointment-service.core.settings",
        "documentation": {}
    },
    {
        "label": "VERIFY_JWT_SIGNATURE",
        "kind": 5,
        "importPath": "services.appointment-service.core.settings",
        "description": "services.appointment-service.core.settings",
        "peekOfCode": "VERIFY_JWT_SIGNATURE = False  # Tạm thời tắt xác thực chữ ký JWT để debug\n# JWT Settings\nACCESS_TOKEN_LIFETIME = timedelta(minutes=60)\nREFRESH_TOKEN_LIFETIME = timedelta(days=7)\nROTATE_REFRESH_TOKENS = False\nSESSION_TTL = 86400  # 1 day in seconds\nMAX_SESSIONS_PER_USER = 5\n# Appointment Reminder Config - Thời gian tính bằng giờ trước khi lịch hẹn diễn ra\nAPPOINTMENT_REMINDERS = [\n    {'hours': 24, 'type': 'EMAIL', 'message_template': 'Nhắc nhở: Bạn có lịch hẹn khám bệnh với {doctor_name} vào ngày {date} lúc {time} {location}.'},",
        "detail": "services.appointment-service.core.settings",
        "documentation": {}
    },
    {
        "label": "ACCESS_TOKEN_LIFETIME",
        "kind": 5,
        "importPath": "services.appointment-service.core.settings",
        "description": "services.appointment-service.core.settings",
        "peekOfCode": "ACCESS_TOKEN_LIFETIME = timedelta(minutes=60)\nREFRESH_TOKEN_LIFETIME = timedelta(days=7)\nROTATE_REFRESH_TOKENS = False\nSESSION_TTL = 86400  # 1 day in seconds\nMAX_SESSIONS_PER_USER = 5\n# Appointment Reminder Config - Thời gian tính bằng giờ trước khi lịch hẹn diễn ra\nAPPOINTMENT_REMINDERS = [\n    {'hours': 24, 'type': 'EMAIL', 'message_template': 'Nhắc nhở: Bạn có lịch hẹn khám bệnh với {doctor_name} vào ngày {date} lúc {time} {location}.'},\n    {'hours': 3, 'type': 'EMAIL', 'message_template': 'Nhắc nhở: Lịch hẹn của bạn với {doctor_name} sẽ diễn ra trong vòng 3 giờ nữa {location}.'},\n    {'hours': 1, 'type': 'SMS', 'message_template': 'Nhắc nhở gấp: Bạn có lịch hẹn khám bệnh với {doctor_name} trong vòng 1 giờ nữa {location}. Vui lòng đến sớm 15 phút để chuẩn bị.'},",
        "detail": "services.appointment-service.core.settings",
        "documentation": {}
    },
    {
        "label": "REFRESH_TOKEN_LIFETIME",
        "kind": 5,
        "importPath": "services.appointment-service.core.settings",
        "description": "services.appointment-service.core.settings",
        "peekOfCode": "REFRESH_TOKEN_LIFETIME = timedelta(days=7)\nROTATE_REFRESH_TOKENS = False\nSESSION_TTL = 86400  # 1 day in seconds\nMAX_SESSIONS_PER_USER = 5\n# Appointment Reminder Config - Thời gian tính bằng giờ trước khi lịch hẹn diễn ra\nAPPOINTMENT_REMINDERS = [\n    {'hours': 24, 'type': 'EMAIL', 'message_template': 'Nhắc nhở: Bạn có lịch hẹn khám bệnh với {doctor_name} vào ngày {date} lúc {time} {location}.'},\n    {'hours': 3, 'type': 'EMAIL', 'message_template': 'Nhắc nhở: Lịch hẹn của bạn với {doctor_name} sẽ diễn ra trong vòng 3 giờ nữa {location}.'},\n    {'hours': 1, 'type': 'SMS', 'message_template': 'Nhắc nhở gấp: Bạn có lịch hẹn khám bệnh với {doctor_name} trong vòng 1 giờ nữa {location}. Vui lòng đến sớm 15 phút để chuẩn bị.'},\n]",
        "detail": "services.appointment-service.core.settings",
        "documentation": {}
    },
    {
        "label": "ROTATE_REFRESH_TOKENS",
        "kind": 5,
        "importPath": "services.appointment-service.core.settings",
        "description": "services.appointment-service.core.settings",
        "peekOfCode": "ROTATE_REFRESH_TOKENS = False\nSESSION_TTL = 86400  # 1 day in seconds\nMAX_SESSIONS_PER_USER = 5\n# Appointment Reminder Config - Thời gian tính bằng giờ trước khi lịch hẹn diễn ra\nAPPOINTMENT_REMINDERS = [\n    {'hours': 24, 'type': 'EMAIL', 'message_template': 'Nhắc nhở: Bạn có lịch hẹn khám bệnh với {doctor_name} vào ngày {date} lúc {time} {location}.'},\n    {'hours': 3, 'type': 'EMAIL', 'message_template': 'Nhắc nhở: Lịch hẹn của bạn với {doctor_name} sẽ diễn ra trong vòng 3 giờ nữa {location}.'},\n    {'hours': 1, 'type': 'SMS', 'message_template': 'Nhắc nhở gấp: Bạn có lịch hẹn khám bệnh với {doctor_name} trong vòng 1 giờ nữa {location}. Vui lòng đến sớm 15 phút để chuẩn bị.'},\n]\n# Tích hợp với các service khác",
        "detail": "services.appointment-service.core.settings",
        "documentation": {}
    },
    {
        "label": "SESSION_TTL",
        "kind": 5,
        "importPath": "services.appointment-service.core.settings",
        "description": "services.appointment-service.core.settings",
        "peekOfCode": "SESSION_TTL = 86400  # 1 day in seconds\nMAX_SESSIONS_PER_USER = 5\n# Appointment Reminder Config - Thời gian tính bằng giờ trước khi lịch hẹn diễn ra\nAPPOINTMENT_REMINDERS = [\n    {'hours': 24, 'type': 'EMAIL', 'message_template': 'Nhắc nhở: Bạn có lịch hẹn khám bệnh với {doctor_name} vào ngày {date} lúc {time} {location}.'},\n    {'hours': 3, 'type': 'EMAIL', 'message_template': 'Nhắc nhở: Lịch hẹn của bạn với {doctor_name} sẽ diễn ra trong vòng 3 giờ nữa {location}.'},\n    {'hours': 1, 'type': 'SMS', 'message_template': 'Nhắc nhở gấp: Bạn có lịch hẹn khám bệnh với {doctor_name} trong vòng 1 giờ nữa {location}. Vui lòng đến sớm 15 phút để chuẩn bị.'},\n]\n# Tích hợp với các service khác\nSERVICE_INTEGRATIONS = {",
        "detail": "services.appointment-service.core.settings",
        "documentation": {}
    },
    {
        "label": "MAX_SESSIONS_PER_USER",
        "kind": 5,
        "importPath": "services.appointment-service.core.settings",
        "description": "services.appointment-service.core.settings",
        "peekOfCode": "MAX_SESSIONS_PER_USER = 5\n# Appointment Reminder Config - Thời gian tính bằng giờ trước khi lịch hẹn diễn ra\nAPPOINTMENT_REMINDERS = [\n    {'hours': 24, 'type': 'EMAIL', 'message_template': 'Nhắc nhở: Bạn có lịch hẹn khám bệnh với {doctor_name} vào ngày {date} lúc {time} {location}.'},\n    {'hours': 3, 'type': 'EMAIL', 'message_template': 'Nhắc nhở: Lịch hẹn của bạn với {doctor_name} sẽ diễn ra trong vòng 3 giờ nữa {location}.'},\n    {'hours': 1, 'type': 'SMS', 'message_template': 'Nhắc nhở gấp: Bạn có lịch hẹn khám bệnh với {doctor_name} trong vòng 1 giờ nữa {location}. Vui lòng đến sớm 15 phút để chuẩn bị.'},\n]\n# Tích hợp với các service khác\nSERVICE_INTEGRATIONS = {\n    'USER_SERVICE_URL': os.environ.get('USER_SERVICE_URL', 'http://user-service:8000'),",
        "detail": "services.appointment-service.core.settings",
        "documentation": {}
    },
    {
        "label": "APPOINTMENT_REMINDERS",
        "kind": 5,
        "importPath": "services.appointment-service.core.settings",
        "description": "services.appointment-service.core.settings",
        "peekOfCode": "APPOINTMENT_REMINDERS = [\n    {'hours': 24, 'type': 'EMAIL', 'message_template': 'Nhắc nhở: Bạn có lịch hẹn khám bệnh với {doctor_name} vào ngày {date} lúc {time} {location}.'},\n    {'hours': 3, 'type': 'EMAIL', 'message_template': 'Nhắc nhở: Lịch hẹn của bạn với {doctor_name} sẽ diễn ra trong vòng 3 giờ nữa {location}.'},\n    {'hours': 1, 'type': 'SMS', 'message_template': 'Nhắc nhở gấp: Bạn có lịch hẹn khám bệnh với {doctor_name} trong vòng 1 giờ nữa {location}. Vui lòng đến sớm 15 phút để chuẩn bị.'},\n]\n# Tích hợp với các service khác\nSERVICE_INTEGRATIONS = {\n    'USER_SERVICE_URL': os.environ.get('USER_SERVICE_URL', 'http://user-service:8000'),\n    'MEDICAL_RECORD_SERVICE_URL': os.environ.get('MEDICAL_RECORD_SERVICE_URL', 'http://medical-record-service:8000'),\n    'NOTIFICATION_SERVICE_URL': os.environ.get('NOTIFICATION_SERVICE_URL', 'http://notification-service:8000'),",
        "detail": "services.appointment-service.core.settings",
        "documentation": {}
    },
    {
        "label": "SERVICE_INTEGRATIONS",
        "kind": 5,
        "importPath": "services.appointment-service.core.settings",
        "description": "services.appointment-service.core.settings",
        "peekOfCode": "SERVICE_INTEGRATIONS = {\n    'USER_SERVICE_URL': os.environ.get('USER_SERVICE_URL', 'http://user-service:8000'),\n    'MEDICAL_RECORD_SERVICE_URL': os.environ.get('MEDICAL_RECORD_SERVICE_URL', 'http://medical-record-service:8000'),\n    'NOTIFICATION_SERVICE_URL': os.environ.get('NOTIFICATION_SERVICE_URL', 'http://notification-service:8000'),\n    'BILLING_SERVICE_URL': os.environ.get('BILLING_SERVICE_URL', 'http://billing-service:8000'),\n    'PHARMACY_SERVICE_URL': os.environ.get('PHARMACY_SERVICE_URL', 'http://pharmacy-service:8000'),\n    'LABORATORY_SERVICE_URL': os.environ.get('LABORATORY_SERVICE_URL', 'http://laboratory-service:8000'),\n}\n# Cấu hình retry cho các API call tích hợp\nAPI_RETRY_CONFIG = {",
        "detail": "services.appointment-service.core.settings",
        "documentation": {}
    },
    {
        "label": "API_RETRY_CONFIG",
        "kind": 5,
        "importPath": "services.appointment-service.core.settings",
        "description": "services.appointment-service.core.settings",
        "peekOfCode": "API_RETRY_CONFIG = {\n    'MAX_RETRIES': 3,\n    'RETRY_DELAY': 1,  # seconds\n    'TIMEOUT': 5,  # seconds\n}\n# Swagger UI JWT auth configuration\nSWAGGER_SETTINGS = {\n    'SECURITY_DEFINITIONS': {\n        'Bearer': {\n            'type': 'apiKey',",
        "detail": "services.appointment-service.core.settings",
        "documentation": {}
    },
    {
        "label": "SWAGGER_SETTINGS",
        "kind": 5,
        "importPath": "services.appointment-service.core.settings",
        "description": "services.appointment-service.core.settings",
        "peekOfCode": "SWAGGER_SETTINGS = {\n    'SECURITY_DEFINITIONS': {\n        'Bearer': {\n            'type': 'apiKey',\n            'in': 'header',\n            'name': 'Authorization',\n            'description': 'JWT Authorization header using the Bearer scheme. Example: \"Bearer {token}\"',\n        },\n    },\n    'USE_SESSION_AUTH': False,",
        "detail": "services.appointment-service.core.settings",
        "documentation": {}
    },
    {
        "label": "schema_view",
        "kind": 5,
        "importPath": "services.appointment-service.core.urls",
        "description": "services.appointment-service.core.urls",
        "peekOfCode": "schema_view = get_schema_view(\n    openapi.Info(\n        title=\"Appointment Service API\",\n        default_version='v1',\n        description=\"API for managing appointments in the healthcare system\",\n        terms_of_service=\"https://www.example.com/terms/\",\n        contact=openapi.Contact(email=\"contact@example.com\"),\n        license=openapi.License(name=\"BSD License\"),\n    ),\n    public=True,",
        "detail": "services.appointment-service.core.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "services.appointment-service.core.urls",
        "description": "services.appointment-service.core.urls",
        "peekOfCode": "urlpatterns = [\n    path('admin/', admin.site.urls),\n    path('api/', include('appointments.urls')),\n    path('', schema_view.with_ui('swagger', cache_timeout=0), name='schema-swagger-ui'),\n    re_path(r'^appointment-service(?P<format>\\.json|\\.yaml)$', schema_view.without_ui(cache_timeout=0), name='schema-json'),\n    path('redoc/', schema_view.with_ui('redoc', cache_timeout=0), name='schema-redoc'),\n]",
        "detail": "services.appointment-service.core.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "services.appointment-service.core.wsgi",
        "description": "services.appointment-service.core.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "services.appointment-service.core.wsgi",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "services.appointment-service.manage",
        "description": "services.appointment-service.manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    # Load environment variables from .env file\n    dotenv_path = Path(__file__).resolve().parent / '.env'\n    if dotenv_path.exists():\n        dotenv.load_dotenv(str(dotenv_path))\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'core.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:",
        "detail": "services.appointment-service.manage",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "services.billing-service.billing.migrations.0001_initial",
        "description": "services.billing-service.billing.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Invoice',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('patient_id', models.IntegerField()),",
        "detail": "services.billing-service.billing.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "services.billing-service.billing.migrations.0002_invoiceitem_appointment_id_invoiceitem_lab_test_id_and_more",
        "description": "services.billing-service.billing.migrations.0002_invoiceitem_appointment_id_invoiceitem_lab_test_id_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('billing', '0001_initial'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='invoiceitem',\n            name='appointment_id',\n            field=models.IntegerField(blank=True, null=True),\n        ),",
        "detail": "services.billing-service.billing.migrations.0002_invoiceitem_appointment_id_invoiceitem_lab_test_id_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "services.billing-service.billing.migrations.0003_insuranceclaim_claim_amount_insuranceclaim_member_id",
        "description": "services.billing-service.billing.migrations.0003_insuranceclaim_claim_amount_insuranceclaim_member_id",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('billing', '0002_invoiceitem_appointment_id_invoiceitem_lab_test_id_and_more'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='insuranceclaim',\n            name='claim_amount',\n            field=models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True),\n        ),",
        "detail": "services.billing-service.billing.migrations.0003_insuranceclaim_claim_amount_insuranceclaim_member_id",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "services.billing-service.billing.migrations.0004_payment_payment_gateway_payment_payment_reference",
        "description": "services.billing-service.billing.migrations.0004_payment_payment_gateway_payment_payment_reference",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('billing', '0003_insuranceclaim_claim_amount_insuranceclaim_member_id'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='payment',\n            name='payment_gateway',\n            field=models.CharField(blank=True, help_text='Payment gateway used for processing', max_length=50, null=True),\n        ),",
        "detail": "services.billing-service.billing.migrations.0004_payment_payment_gateway_payment_payment_reference",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "services.billing-service.billing.migrations.0005_invoiceitem_encounter_id_invoiceitem_medication_id",
        "description": "services.billing-service.billing.migrations.0005_invoiceitem_encounter_id_invoiceitem_medication_id",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('billing', '0004_payment_payment_gateway_payment_payment_reference'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='invoiceitem',\n            name='encounter_id',\n            field=models.IntegerField(blank=True, null=True),\n        ),",
        "detail": "services.billing-service.billing.migrations.0005_invoiceitem_encounter_id_invoiceitem_medication_id",
        "documentation": {}
    },
    {
        "label": "BillingConfig",
        "kind": 6,
        "importPath": "services.billing-service.billing.apps",
        "description": "services.billing-service.billing.apps",
        "peekOfCode": "class BillingConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'billing'",
        "detail": "services.billing-service.billing.apps",
        "documentation": {}
    },
    {
        "label": "HeaderAuthentication",
        "kind": 5,
        "importPath": "services.billing-service.billing.authentication",
        "description": "services.billing-service.billing.authentication",
        "peekOfCode": "HeaderAuthentication = ServiceAuthentication",
        "detail": "services.billing-service.billing.authentication",
        "documentation": {}
    },
    {
        "label": "Invoice",
        "kind": 6,
        "importPath": "services.billing-service.billing.models",
        "description": "services.billing-service.billing.models",
        "peekOfCode": "class Invoice(models.Model):\n    \"\"\"\n    Model representing a billing invoice.\n    \"\"\"\n    class Status(models.TextChoices):\n        DRAFT = 'DRAFT', _('Draft')\n        PENDING = 'PENDING', _('Pending')\n        PAID = 'PAID', _('Paid')\n        PARTIALLY_PAID = 'PARTIALLY_PAID', _('Partially Paid')\n        OVERDUE = 'OVERDUE', _('Overdue')",
        "detail": "services.billing-service.billing.models",
        "documentation": {}
    },
    {
        "label": "InvoiceItem",
        "kind": 6,
        "importPath": "services.billing-service.billing.models",
        "description": "services.billing-service.billing.models",
        "peekOfCode": "class InvoiceItem(models.Model):\n    \"\"\"\n    Model representing an item in an invoice.\n    \"\"\"\n    class ItemType(models.TextChoices):\n        # Appointment related\n        APPOINTMENT = 'APPOINTMENT', _('Appointment')\n        CONSULTATION = 'CONSULTATION', _('Consultation')\n        FOLLOW_UP = 'FOLLOW_UP', _('Follow-up Visit')\n        EMERGENCY = 'EMERGENCY', _('Emergency Visit')",
        "detail": "services.billing-service.billing.models",
        "documentation": {}
    },
    {
        "label": "Payment",
        "kind": 6,
        "importPath": "services.billing-service.billing.models",
        "description": "services.billing-service.billing.models",
        "peekOfCode": "class Payment(models.Model):\n    \"\"\"\n    Model representing a payment for an invoice.\n    \"\"\"\n    class PaymentMethod(models.TextChoices):\n        CASH = 'CASH', _('Cash')\n        CREDIT_CARD = 'CREDIT_CARD', _('Credit Card')\n        DEBIT_CARD = 'DEBIT_CARD', _('Debit Card')\n        BANK_TRANSFER = 'BANK_TRANSFER', _('Bank Transfer')\n        INSURANCE = 'INSURANCE', _('Insurance')",
        "detail": "services.billing-service.billing.models",
        "documentation": {}
    },
    {
        "label": "InsuranceClaim",
        "kind": 6,
        "importPath": "services.billing-service.billing.models",
        "description": "services.billing-service.billing.models",
        "peekOfCode": "class InsuranceClaim(models.Model):\n    \"\"\"\n    Model representing an insurance claim for an invoice.\n    \"\"\"\n    class Status(models.TextChoices):\n        SUBMITTED = 'SUBMITTED', _('Submitted')\n        IN_REVIEW = 'IN_REVIEW', _('In Review')\n        APPROVED = 'APPROVED', _('Approved')\n        PARTIALLY_APPROVED = 'PARTIALLY_APPROVED', _('Partially Approved')\n        REJECTED = 'REJECTED', _('Rejected')",
        "detail": "services.billing-service.billing.models",
        "documentation": {}
    },
    {
        "label": "render_to_pdf",
        "kind": 2,
        "importPath": "services.billing-service.billing.pdf_generator",
        "description": "services.billing-service.billing.pdf_generator",
        "peekOfCode": "def render_to_pdf(template_src, context_dict={}):\n    \"\"\"\n    Render HTML template to PDF.\n    \"\"\"\n    template = get_template(template_src)\n    html = template.render(context_dict)\n    result = BytesIO()\n    pdf = pisa.pisaDocument(BytesIO(html.encode(\"UTF-8\")), result)\n    if not pdf.err:\n        return result.getvalue()",
        "detail": "services.billing-service.billing.pdf_generator",
        "documentation": {}
    },
    {
        "label": "generate_invoice_pdf",
        "kind": 2,
        "importPath": "services.billing-service.billing.pdf_generator",
        "description": "services.billing-service.billing.pdf_generator",
        "peekOfCode": "def generate_invoice_pdf(invoice_id):\n    \"\"\"\n    Generate PDF for an invoice.\n    \"\"\"\n    try:\n        # Get invoice data\n        invoice = Invoice.objects.get(id=invoice_id)\n        # Format currency values\n        def format_currency(value):\n            if value is None:",
        "detail": "services.billing-service.billing.pdf_generator",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "services.billing-service.billing.pdf_generator",
        "description": "services.billing-service.billing.pdf_generator",
        "peekOfCode": "logger = logging.getLogger(__name__)\ndef render_to_pdf(template_src, context_dict={}):\n    \"\"\"\n    Render HTML template to PDF.\n    \"\"\"\n    template = get_template(template_src)\n    html = template.render(context_dict)\n    result = BytesIO()\n    pdf = pisa.pisaDocument(BytesIO(html.encode(\"UTF-8\")), result)\n    if not pdf.err:",
        "detail": "services.billing-service.billing.pdf_generator",
        "documentation": {}
    },
    {
        "label": "IsAdminOrBillingStaff",
        "kind": 6,
        "importPath": "services.billing-service.billing.permissions",
        "description": "services.billing-service.billing.permissions",
        "peekOfCode": "class IsAdminOrBillingStaff:\n    def __new__(cls):\n        return IsAdmin()\nclass IsPatientOwner:\n    def __new__(cls):\n        return CanViewInvoices()\nclass IsAdminOrOwner:\n    def __new__(cls):\n        return CanViewInvoices()",
        "detail": "services.billing-service.billing.permissions",
        "documentation": {}
    },
    {
        "label": "IsPatientOwner",
        "kind": 6,
        "importPath": "services.billing-service.billing.permissions",
        "description": "services.billing-service.billing.permissions",
        "peekOfCode": "class IsPatientOwner:\n    def __new__(cls):\n        return CanViewInvoices()\nclass IsAdminOrOwner:\n    def __new__(cls):\n        return CanViewInvoices()",
        "detail": "services.billing-service.billing.permissions",
        "documentation": {}
    },
    {
        "label": "IsAdminOrOwner",
        "kind": 6,
        "importPath": "services.billing-service.billing.permissions",
        "description": "services.billing-service.billing.permissions",
        "peekOfCode": "class IsAdminOrOwner:\n    def __new__(cls):\n        return CanViewInvoices()",
        "detail": "services.billing-service.billing.permissions",
        "documentation": {}
    },
    {
        "label": "CanViewInvoices",
        "kind": 5,
        "importPath": "services.billing-service.billing.permissions",
        "description": "services.billing-service.billing.permissions",
        "peekOfCode": "CanViewInvoices = BillingPermissions.CanViewInvoices\nCanCreateInvoice = BillingPermissions.CanCreateInvoice\nCanUpdateInvoice = BillingPermissions.CanUpdateInvoice\nCanProcessPayment = BillingPermissions.CanProcessPayment\nCanSubmitInsuranceClaim = BillingPermissions.CanSubmitInsuranceClaim\nCanProcessInsuranceClaim = BillingPermissions.CanProcessInsuranceClaim\n# Legacy classes - mapped to new permissions for backward compatibility\nclass IsAdminOrBillingStaff:\n    def __new__(cls):\n        return IsAdmin()",
        "detail": "services.billing-service.billing.permissions",
        "documentation": {}
    },
    {
        "label": "CanCreateInvoice",
        "kind": 5,
        "importPath": "services.billing-service.billing.permissions",
        "description": "services.billing-service.billing.permissions",
        "peekOfCode": "CanCreateInvoice = BillingPermissions.CanCreateInvoice\nCanUpdateInvoice = BillingPermissions.CanUpdateInvoice\nCanProcessPayment = BillingPermissions.CanProcessPayment\nCanSubmitInsuranceClaim = BillingPermissions.CanSubmitInsuranceClaim\nCanProcessInsuranceClaim = BillingPermissions.CanProcessInsuranceClaim\n# Legacy classes - mapped to new permissions for backward compatibility\nclass IsAdminOrBillingStaff:\n    def __new__(cls):\n        return IsAdmin()\nclass IsPatientOwner:",
        "detail": "services.billing-service.billing.permissions",
        "documentation": {}
    },
    {
        "label": "CanUpdateInvoice",
        "kind": 5,
        "importPath": "services.billing-service.billing.permissions",
        "description": "services.billing-service.billing.permissions",
        "peekOfCode": "CanUpdateInvoice = BillingPermissions.CanUpdateInvoice\nCanProcessPayment = BillingPermissions.CanProcessPayment\nCanSubmitInsuranceClaim = BillingPermissions.CanSubmitInsuranceClaim\nCanProcessInsuranceClaim = BillingPermissions.CanProcessInsuranceClaim\n# Legacy classes - mapped to new permissions for backward compatibility\nclass IsAdminOrBillingStaff:\n    def __new__(cls):\n        return IsAdmin()\nclass IsPatientOwner:\n    def __new__(cls):",
        "detail": "services.billing-service.billing.permissions",
        "documentation": {}
    },
    {
        "label": "CanProcessPayment",
        "kind": 5,
        "importPath": "services.billing-service.billing.permissions",
        "description": "services.billing-service.billing.permissions",
        "peekOfCode": "CanProcessPayment = BillingPermissions.CanProcessPayment\nCanSubmitInsuranceClaim = BillingPermissions.CanSubmitInsuranceClaim\nCanProcessInsuranceClaim = BillingPermissions.CanProcessInsuranceClaim\n# Legacy classes - mapped to new permissions for backward compatibility\nclass IsAdminOrBillingStaff:\n    def __new__(cls):\n        return IsAdmin()\nclass IsPatientOwner:\n    def __new__(cls):\n        return CanViewInvoices()",
        "detail": "services.billing-service.billing.permissions",
        "documentation": {}
    },
    {
        "label": "CanSubmitInsuranceClaim",
        "kind": 5,
        "importPath": "services.billing-service.billing.permissions",
        "description": "services.billing-service.billing.permissions",
        "peekOfCode": "CanSubmitInsuranceClaim = BillingPermissions.CanSubmitInsuranceClaim\nCanProcessInsuranceClaim = BillingPermissions.CanProcessInsuranceClaim\n# Legacy classes - mapped to new permissions for backward compatibility\nclass IsAdminOrBillingStaff:\n    def __new__(cls):\n        return IsAdmin()\nclass IsPatientOwner:\n    def __new__(cls):\n        return CanViewInvoices()\nclass IsAdminOrOwner:",
        "detail": "services.billing-service.billing.permissions",
        "documentation": {}
    },
    {
        "label": "CanProcessInsuranceClaim",
        "kind": 5,
        "importPath": "services.billing-service.billing.permissions",
        "description": "services.billing-service.billing.permissions",
        "peekOfCode": "CanProcessInsuranceClaim = BillingPermissions.CanProcessInsuranceClaim\n# Legacy classes - mapped to new permissions for backward compatibility\nclass IsAdminOrBillingStaff:\n    def __new__(cls):\n        return IsAdmin()\nclass IsPatientOwner:\n    def __new__(cls):\n        return CanViewInvoices()\nclass IsAdminOrOwner:\n    def __new__(cls):",
        "detail": "services.billing-service.billing.permissions",
        "documentation": {}
    },
    {
        "label": "InvoiceItemSerializer",
        "kind": 6,
        "importPath": "services.billing-service.billing.serializers",
        "description": "services.billing-service.billing.serializers",
        "peekOfCode": "class InvoiceItemSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = InvoiceItem\n        fields = '__all__'\n        read_only_fields = ['invoice']\nclass PaymentSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Payment\n        fields = '__all__'\n        read_only_fields = ['invoice']",
        "detail": "services.billing-service.billing.serializers",
        "documentation": {}
    },
    {
        "label": "PaymentSerializer",
        "kind": 6,
        "importPath": "services.billing-service.billing.serializers",
        "description": "services.billing-service.billing.serializers",
        "peekOfCode": "class PaymentSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Payment\n        fields = '__all__'\n        read_only_fields = ['invoice']\nclass InsuranceClaimSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = InsuranceClaim\n        fields = '__all__'\n        read_only_fields = ['invoice']",
        "detail": "services.billing-service.billing.serializers",
        "documentation": {}
    },
    {
        "label": "InsuranceClaimSerializer",
        "kind": 6,
        "importPath": "services.billing-service.billing.serializers",
        "description": "services.billing-service.billing.serializers",
        "peekOfCode": "class InsuranceClaimSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = InsuranceClaim\n        fields = '__all__'\n        read_only_fields = ['invoice']\nclass InvoiceSerializer(serializers.ModelSerializer):\n    items = InvoiceItemSerializer(many=True, read_only=True)\n    payments = PaymentSerializer(many=True, read_only=True)\n    insurance_claims = InsuranceClaimSerializer(many=True, read_only=True)\n    class Meta:",
        "detail": "services.billing-service.billing.serializers",
        "documentation": {}
    },
    {
        "label": "InvoiceSerializer",
        "kind": 6,
        "importPath": "services.billing-service.billing.serializers",
        "description": "services.billing-service.billing.serializers",
        "peekOfCode": "class InvoiceSerializer(serializers.ModelSerializer):\n    items = InvoiceItemSerializer(many=True, read_only=True)\n    payments = PaymentSerializer(many=True, read_only=True)\n    insurance_claims = InsuranceClaimSerializer(many=True, read_only=True)\n    class Meta:\n        model = Invoice\n        fields = '__all__'\nclass InvoiceDetailSerializer(serializers.ModelSerializer):\n    items = InvoiceItemSerializer(many=True, read_only=True)\n    payments = PaymentSerializer(many=True, read_only=True)",
        "detail": "services.billing-service.billing.serializers",
        "documentation": {}
    },
    {
        "label": "InvoiceDetailSerializer",
        "kind": 6,
        "importPath": "services.billing-service.billing.serializers",
        "description": "services.billing-service.billing.serializers",
        "peekOfCode": "class InvoiceDetailSerializer(serializers.ModelSerializer):\n    items = InvoiceItemSerializer(many=True, read_only=True)\n    payments = PaymentSerializer(many=True, read_only=True)\n    insurance_claims = InsuranceClaimSerializer(many=True, read_only=True)\n    class Meta:\n        model = Invoice\n        fields = '__all__'\nclass InvoiceCreateSerializer(serializers.ModelSerializer):\n    items = serializers.ListField(child=serializers.DictField(), required=True, write_only=True)\n    class Meta:",
        "detail": "services.billing-service.billing.serializers",
        "documentation": {}
    },
    {
        "label": "InvoiceCreateSerializer",
        "kind": 6,
        "importPath": "services.billing-service.billing.serializers",
        "description": "services.billing-service.billing.serializers",
        "peekOfCode": "class InvoiceCreateSerializer(serializers.ModelSerializer):\n    items = serializers.ListField(child=serializers.DictField(), required=True, write_only=True)\n    class Meta:\n        model = Invoice\n        fields = ['patient_id', 'issue_date', 'due_date', 'notes', 'items']\n    def create(self, validated_data):\n        items_data = validated_data.pop('items', [])\n        issue_date = validated_data.pop('issue_date')\n        due_date = validated_data.pop('due_date')\n        notes = validated_data.pop('notes', '')",
        "detail": "services.billing-service.billing.serializers",
        "documentation": {}
    },
    {
        "label": "PaymentCreateSerializer",
        "kind": 6,
        "importPath": "services.billing-service.billing.serializers",
        "description": "services.billing-service.billing.serializers",
        "peekOfCode": "class PaymentCreateSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Payment\n        fields = ['payment_method', 'amount', 'transaction_id', 'payment_date', 'status', 'payment_gateway', 'payment_reference', 'notes']\nclass InsuranceClaimCreateSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = InsuranceClaim\n        fields = ['insurance_provider_id', 'policy_number', 'member_id', 'claim_number', 'claim_amount', 'submission_date', 'status', 'approved_amount', 'rejection_reason', 'notes']",
        "detail": "services.billing-service.billing.serializers",
        "documentation": {}
    },
    {
        "label": "InsuranceClaimCreateSerializer",
        "kind": 6,
        "importPath": "services.billing-service.billing.serializers",
        "description": "services.billing-service.billing.serializers",
        "peekOfCode": "class InsuranceClaimCreateSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = InsuranceClaim\n        fields = ['insurance_provider_id', 'policy_number', 'member_id', 'claim_number', 'claim_amount', 'submission_date', 'status', 'approved_amount', 'rejection_reason', 'notes']",
        "detail": "services.billing-service.billing.serializers",
        "documentation": {}
    },
    {
        "label": "ServiceClient",
        "kind": 6,
        "importPath": "services.billing-service.billing.services",
        "description": "services.billing-service.billing.services",
        "peekOfCode": "class ServiceClient:\n    \"\"\"\n    Base client for interacting with other services.\n    \"\"\"\n    def __init__(self, base_url):\n        self.base_url = base_url\n    def get(self, endpoint, headers=None):\n        \"\"\"\n        Make a GET request to the service.\n        \"\"\"",
        "detail": "services.billing-service.billing.services",
        "documentation": {}
    },
    {
        "label": "UserServiceClient",
        "kind": 6,
        "importPath": "services.billing-service.billing.services",
        "description": "services.billing-service.billing.services",
        "peekOfCode": "class UserServiceClient(ServiceClient):\n    \"\"\"\n    Client for interacting with the User Service.\n    \"\"\"\n    def __init__(self):\n        super().__init__(settings.USER_SERVICE_URL)\n    def get_patient(self, patient_id, headers=None):\n        \"\"\"\n        Get patient information from the User Service.\n        \"\"\"",
        "detail": "services.billing-service.billing.services",
        "documentation": {}
    },
    {
        "label": "AppointmentServiceClient",
        "kind": 6,
        "importPath": "services.billing-service.billing.services",
        "description": "services.billing-service.billing.services",
        "peekOfCode": "class AppointmentServiceClient(ServiceClient):\n    \"\"\"\n    Client for interacting with the Appointment Service.\n    \"\"\"\n    def __init__(self):\n        super().__init__(settings.APPOINTMENT_SERVICE_URL)\n    def get_appointment(self, appointment_id, headers=None):\n        \"\"\"\n        Get appointment information from the Appointment Service.\n        \"\"\"",
        "detail": "services.billing-service.billing.services",
        "documentation": {}
    },
    {
        "label": "MedicalRecordServiceClient",
        "kind": 6,
        "importPath": "services.billing-service.billing.services",
        "description": "services.billing-service.billing.services",
        "peekOfCode": "class MedicalRecordServiceClient(ServiceClient):\n    \"\"\"\n    Client for interacting with the Medical Record Service.\n    \"\"\"\n    def __init__(self):\n        super().__init__(settings.MEDICAL_RECORD_SERVICE_URL)\n    def get_medical_record(self, record_id, headers=None):\n        \"\"\"\n        Get medical record information from the Medical Record Service.\n        \"\"\"",
        "detail": "services.billing-service.billing.services",
        "documentation": {}
    },
    {
        "label": "LaboratoryServiceClient",
        "kind": 6,
        "importPath": "services.billing-service.billing.services",
        "description": "services.billing-service.billing.services",
        "peekOfCode": "class LaboratoryServiceClient(ServiceClient):\n    \"\"\"\n    Client for interacting with the Laboratory Service.\n    \"\"\"\n    def __init__(self):\n        super().__init__(settings.LABORATORY_SERVICE_URL)\n    def get_lab_test(self, test_id, headers=None):\n        \"\"\"\n        Get lab test information from the Laboratory Service.\n        \"\"\"",
        "detail": "services.billing-service.billing.services",
        "documentation": {}
    },
    {
        "label": "PharmacyServiceClient",
        "kind": 6,
        "importPath": "services.billing-service.billing.services",
        "description": "services.billing-service.billing.services",
        "peekOfCode": "class PharmacyServiceClient(ServiceClient):\n    \"\"\"\n    Client for interacting with the Pharmacy Service.\n    \"\"\"\n    def __init__(self):\n        super().__init__(settings.PHARMACY_SERVICE_URL)\n    def get_prescription(self, prescription_id, headers=None):\n        \"\"\"\n        Get prescription information from the Pharmacy Service.\n        \"\"\"",
        "detail": "services.billing-service.billing.services",
        "documentation": {}
    },
    {
        "label": "create_invoice_from_appointment",
        "kind": 2,
        "importPath": "services.billing-service.billing.services",
        "description": "services.billing-service.billing.services",
        "peekOfCode": "def create_invoice_from_appointment(appointment_id, headers=None):\n    \"\"\"\n    Create an invoice from an appointment.\n    \"\"\"\n    from .models import Invoice, InvoiceItem\n    # Get appointment information\n    client = AppointmentServiceClient()\n    appointment = client.get_appointment(appointment_id, headers)\n    if not appointment:\n        logger.error(f\"Could not retrieve appointment {appointment_id}\")",
        "detail": "services.billing-service.billing.services",
        "documentation": {}
    },
    {
        "label": "create_invoice_from_lab_test",
        "kind": 2,
        "importPath": "services.billing-service.billing.services",
        "description": "services.billing-service.billing.services",
        "peekOfCode": "def create_invoice_from_lab_test(lab_test_id, headers=None):\n    \"\"\"\n    Create an invoice from a lab test.\n    \"\"\"\n    from .models import Invoice, InvoiceItem\n    # Get lab test information\n    client = LaboratoryServiceClient()\n    lab_test = client.get_lab_test(lab_test_id, headers)\n    if not lab_test:\n        logger.error(f\"Could not retrieve lab test {lab_test_id}\")",
        "detail": "services.billing-service.billing.services",
        "documentation": {}
    },
    {
        "label": "create_invoice_from_prescription",
        "kind": 2,
        "importPath": "services.billing-service.billing.services",
        "description": "services.billing-service.billing.services",
        "peekOfCode": "def create_invoice_from_prescription(prescription_id, headers=None):\n    \"\"\"\n    Create an invoice from a prescription.\n    \"\"\"\n    from .models import Invoice, InvoiceItem\n    # Get prescription information\n    client = PharmacyServiceClient()\n    prescription = client.get_prescription(prescription_id, headers)\n    if not prescription:\n        logger.error(f\"Could not retrieve prescription {prescription_id}\")",
        "detail": "services.billing-service.billing.services",
        "documentation": {}
    },
    {
        "label": "create_invoice_from_encounter",
        "kind": 2,
        "importPath": "services.billing-service.billing.services",
        "description": "services.billing-service.billing.services",
        "peekOfCode": "def create_invoice_from_encounter(encounter_id, headers=None):\n    \"\"\"\n    Create an invoice from an encounter.\n    \"\"\"\n    from .models import Invoice, InvoiceItem\n    # Get encounter information\n    client = MedicalRecordServiceClient()\n    encounter = client.get_encounter(encounter_id, headers)\n    if not encounter:\n        logger.error(f\"Could not retrieve encounter {encounter_id}\")",
        "detail": "services.billing-service.billing.services",
        "documentation": {}
    },
    {
        "label": "create_invoice_from_medical_record",
        "kind": 2,
        "importPath": "services.billing-service.billing.services",
        "description": "services.billing-service.billing.services",
        "peekOfCode": "def create_invoice_from_medical_record(record_id, headers=None):\n    \"\"\"\n    Create an invoice from a medical record.\n    \"\"\"\n    from .models import Invoice, InvoiceItem\n    # Get medical record information\n    client = MedicalRecordServiceClient()\n    record = client.get_medical_record(record_id, headers)\n    if not record:\n        logger.error(f\"Could not retrieve medical record {record_id}\")",
        "detail": "services.billing-service.billing.services",
        "documentation": {}
    },
    {
        "label": "apply_insurance_to_invoice",
        "kind": 2,
        "importPath": "services.billing-service.billing.services",
        "description": "services.billing-service.billing.services",
        "peekOfCode": "def apply_insurance_to_invoice(invoice, headers=None):\n    \"\"\"\n    Apply insurance coverage to an invoice if the patient has insurance.\n    \"\"\"\n    from .models import InsuranceClaim\n    # Get patient's insurance information\n    user_client = UserServiceClient()\n    insurance_info = user_client.get_patient_insurance(invoice.patient_id, headers)\n    if not insurance_info or 'results' not in insurance_info or not insurance_info['results']:\n        logger.info(f\"No insurance information found for patient {invoice.patient_id}\")",
        "detail": "services.billing-service.billing.services",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "services.billing-service.billing.services",
        "description": "services.billing-service.billing.services",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass ServiceClient:\n    \"\"\"\n    Base client for interacting with other services.\n    \"\"\"\n    def __init__(self, base_url):\n        self.base_url = base_url\n    def get(self, endpoint, headers=None):\n        \"\"\"\n        Make a GET request to the service.",
        "detail": "services.billing-service.billing.services",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "services.billing-service.billing.urls",
        "description": "services.billing-service.billing.urls",
        "peekOfCode": "router = DefaultRouter()\nrouter.register(r'invoices', InvoiceViewSet)\nrouter.register(r'invoice-items', InvoiceItemViewSet)\nrouter.register(r'payments', PaymentViewSet)\nrouter.register(r'insurance-claims', InsuranceClaimViewSet)\nrouter.register(r'invoice-creation', InvoiceCreationViewSet, basename='invoice-creation')\nurlpatterns = [\n    path('', include(router.urls)),\n    # API endpoints for creating invoices from other services - now using ViewSet\n    # Old paths are kept for backward compatibility",
        "detail": "services.billing-service.billing.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "services.billing-service.billing.urls",
        "description": "services.billing-service.billing.urls",
        "peekOfCode": "urlpatterns = [\n    path('', include(router.urls)),\n    # API endpoints for creating invoices from other services - now using ViewSet\n    # Old paths are kept for backward compatibility\n    path('create-from-appointment/', InvoiceCreationViewSet.as_view({'post': 'from_appointment'}), name='create-from-appointment'),\n    path('create-from-lab-test/', InvoiceCreationViewSet.as_view({'post': 'from_lab_test'}), name='create-from-lab-test'),\n    path('create-from-prescription/', InvoiceCreationViewSet.as_view({'post': 'from_prescription'}), name='create-from-prescription'),\n    path('create-from-medical-record/', InvoiceCreationViewSet.as_view({'post': 'from_medical_record'}), name='create-from-medical-record'),\n    path('create-from-encounter/', InvoiceCreationViewSet.as_view({'post': 'from_encounter'}), name='create-from-encounter'),\n]",
        "detail": "services.billing-service.billing.urls",
        "documentation": {}
    },
    {
        "label": "InvoiceViewSet",
        "kind": 6,
        "importPath": "services.billing-service.billing.views",
        "description": "services.billing-service.billing.views",
        "peekOfCode": "class InvoiceViewSet(viewsets.ModelViewSet):\n    \"\"\"\n    API endpoint for managing invoices.\n    \"\"\"\n    queryset = Invoice.objects.all().order_by('-created_at')\n    authentication_classes = [HeaderAuthentication]\n    filter_backends = [filters.SearchFilter, filters.OrderingFilter]\n    search_fields = ['invoice_number', 'status', 'patient_id']\n    ordering_fields = ['issue_date', 'due_date', 'total_amount', 'created_at']\n    def get_serializer_class(self):",
        "detail": "services.billing-service.billing.views",
        "documentation": {}
    },
    {
        "label": "InvoiceItemViewSet",
        "kind": 6,
        "importPath": "services.billing-service.billing.views",
        "description": "services.billing-service.billing.views",
        "peekOfCode": "class InvoiceItemViewSet(viewsets.ModelViewSet):\n    \"\"\"\n    API endpoint for managing invoice items.\n    \"\"\"\n    queryset = InvoiceItem.objects.all()\n    serializer_class = InvoiceItemSerializer\n    authentication_classes = [HeaderAuthentication]\n    permission_classes = [IsAdminOrBillingStaff]\n    def get_queryset(self):\n        invoice_id = self.request.query_params.get('invoice_id', None)",
        "detail": "services.billing-service.billing.views",
        "documentation": {}
    },
    {
        "label": "PaymentViewSet",
        "kind": 6,
        "importPath": "services.billing-service.billing.views",
        "description": "services.billing-service.billing.views",
        "peekOfCode": "class PaymentViewSet(viewsets.ModelViewSet):\n    \"\"\"\n    API endpoint for managing payments.\n    \"\"\"\n    queryset = Payment.objects.all().order_by('-payment_date')\n    serializer_class = PaymentSerializer\n    authentication_classes = [HeaderAuthentication]\n    def get_permissions(self):\n        if self.action in ['create', 'update', 'partial_update', 'destroy']:\n            permission_classes = [IsAdminOrBillingStaff]",
        "detail": "services.billing-service.billing.views",
        "documentation": {}
    },
    {
        "label": "InsuranceClaimViewSet",
        "kind": 6,
        "importPath": "services.billing-service.billing.views",
        "description": "services.billing-service.billing.views",
        "peekOfCode": "class InsuranceClaimViewSet(viewsets.ModelViewSet):\n    \"\"\"\n    API endpoint for managing insurance claims.\n    \"\"\"\n    queryset = InsuranceClaim.objects.all().order_by('-submission_date')\n    serializer_class = InsuranceClaimSerializer\n    authentication_classes = [HeaderAuthentication]\n    def get_permissions(self):\n        if self.action in ['create', 'update', 'partial_update', 'destroy']:\n            permission_classes = [IsAdminOrBillingStaff]",
        "detail": "services.billing-service.billing.views",
        "documentation": {}
    },
    {
        "label": "InvoiceCreationViewSet",
        "kind": 6,
        "importPath": "services.billing-service.billing.views",
        "description": "services.billing-service.billing.views",
        "peekOfCode": "class InvoiceCreationViewSet(viewsets.ViewSet):\n    \"\"\"\n    ViewSet for creating invoices from different sources.\n    \"\"\"\n    permission_classes = [IsAuthenticated]\n    @action(detail=False, methods=['post'])\n    def from_appointment(self, request):\n        \"\"\"\n        Create an invoice from an appointment.\n        \"\"\"",
        "detail": "services.billing-service.billing.views",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "services.billing-service.billing.views",
        "description": "services.billing-service.billing.views",
        "peekOfCode": "logger = logging.getLogger(__name__)\nfrom .models import Invoice, InvoiceItem, Payment, InsuranceClaim\nfrom .serializers import (\n    InvoiceSerializer, InvoiceDetailSerializer, InvoiceCreateSerializer,\n    InvoiceItemSerializer, PaymentSerializer, PaymentCreateSerializer,\n    InsuranceClaimSerializer, InsuranceClaimCreateSerializer\n)\nfrom .authentication import HeaderAuthentication\nfrom .permissions import IsAdmin, IsAdminOrBillingStaff, IsPatientOwner, IsAdminOrOwner\nfrom .services import (",
        "detail": "services.billing-service.billing.views",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "services.billing-service.core.asgi",
        "description": "services.billing-service.core.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "services.billing-service.core.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "services.billing-service.core.settings",
        "description": "services.billing-service.core.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure-key')\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = os.environ.get('DEBUG', 'False') == 'True'\nALLOWED_HOSTS = ['*']\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',",
        "detail": "services.billing-service.core.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "services.billing-service.core.settings",
        "description": "services.billing-service.core.settings",
        "peekOfCode": "SECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure-key')\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = os.environ.get('DEBUG', 'False') == 'True'\nALLOWED_HOSTS = ['*']\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',",
        "detail": "services.billing-service.core.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "services.billing-service.core.settings",
        "description": "services.billing-service.core.settings",
        "peekOfCode": "DEBUG = os.environ.get('DEBUG', 'False') == 'True'\nALLOWED_HOSTS = ['*']\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',",
        "detail": "services.billing-service.core.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "services.billing-service.core.settings",
        "description": "services.billing-service.core.settings",
        "peekOfCode": "ALLOWED_HOSTS = ['*']\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    # Third-party apps",
        "detail": "services.billing-service.core.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "services.billing-service.core.settings",
        "description": "services.billing-service.core.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    # Third-party apps\n    'rest_framework',\n    'rest_framework_simplejwt',",
        "detail": "services.billing-service.core.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "services.billing-service.core.settings",
        "description": "services.billing-service.core.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'corsheaders.middleware.CorsMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]",
        "detail": "services.billing-service.core.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "services.billing-service.core.settings",
        "description": "services.billing-service.core.settings",
        "peekOfCode": "ROOT_URLCONF = 'core.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',",
        "detail": "services.billing-service.core.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "services.billing-service.core.settings",
        "description": "services.billing-service.core.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "services.billing-service.core.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "services.billing-service.core.settings",
        "description": "services.billing-service.core.settings",
        "peekOfCode": "WSGI_APPLICATION = 'core.wsgi.application'\n# Database\n# https://docs.djangoproject.com/en/4.2/ref/settings/#databases\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql',\n        'NAME': os.environ.get('DATABASE_NAME', 'healthcare_billing'),\n        'USER': os.environ.get('DATABASE_USER', 'postgres'),\n        'PASSWORD': os.environ.get('DATABASE_PASSWORD', 'postgres'),\n        'HOST': os.environ.get('DATABASE_HOST', 'postgres'),",
        "detail": "services.billing-service.core.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "services.billing-service.core.settings",
        "description": "services.billing-service.core.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql',\n        'NAME': os.environ.get('DATABASE_NAME', 'healthcare_billing'),\n        'USER': os.environ.get('DATABASE_USER', 'postgres'),\n        'PASSWORD': os.environ.get('DATABASE_PASSWORD', 'postgres'),\n        'HOST': os.environ.get('DATABASE_HOST', 'postgres'),\n        'PORT': os.environ.get('DATABASE_PORT', '5432'),\n    }\n}",
        "detail": "services.billing-service.core.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "services.billing-service.core.settings",
        "description": "services.billing-service.core.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "services.billing-service.core.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "services.billing-service.core.settings",
        "description": "services.billing-service.core.settings",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = 'static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field",
        "detail": "services.billing-service.core.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "services.billing-service.core.settings",
        "description": "services.billing-service.core.settings",
        "peekOfCode": "TIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = 'static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "services.billing-service.core.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "services.billing-service.core.settings",
        "description": "services.billing-service.core.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = 'static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# CORS settings",
        "detail": "services.billing-service.core.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "services.billing-service.core.settings",
        "description": "services.billing-service.core.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = 'static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# CORS settings\nCORS_ALLOW_ALL_ORIGINS = True",
        "detail": "services.billing-service.core.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "services.billing-service.core.settings",
        "description": "services.billing-service.core.settings",
        "peekOfCode": "STATIC_URL = 'static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# CORS settings\nCORS_ALLOW_ALL_ORIGINS = True\n# REST Framework settings\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (",
        "detail": "services.billing-service.core.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_ROOT",
        "kind": 5,
        "importPath": "services.billing-service.core.settings",
        "description": "services.billing-service.core.settings",
        "peekOfCode": "STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# CORS settings\nCORS_ALLOW_ALL_ORIGINS = True\n# REST Framework settings\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'common_auth.authentication.ServiceAuthentication',",
        "detail": "services.billing-service.core.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "services.billing-service.core.settings",
        "description": "services.billing-service.core.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# CORS settings\nCORS_ALLOW_ALL_ORIGINS = True\n# REST Framework settings\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'common_auth.authentication.ServiceAuthentication',\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n    ),\n    'DEFAULT_PERMISSION_CLASSES': [",
        "detail": "services.billing-service.core.settings",
        "documentation": {}
    },
    {
        "label": "CORS_ALLOW_ALL_ORIGINS",
        "kind": 5,
        "importPath": "services.billing-service.core.settings",
        "description": "services.billing-service.core.settings",
        "peekOfCode": "CORS_ALLOW_ALL_ORIGINS = True\n# REST Framework settings\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'common_auth.authentication.ServiceAuthentication',\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n    ),\n    'DEFAULT_PERMISSION_CLASSES': [\n        'common_auth.permissions.IsAuthenticated',\n        'rest_framework.permissions.IsAuthenticated',",
        "detail": "services.billing-service.core.settings",
        "documentation": {}
    },
    {
        "label": "REST_FRAMEWORK",
        "kind": 5,
        "importPath": "services.billing-service.core.settings",
        "description": "services.billing-service.core.settings",
        "peekOfCode": "REST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'common_auth.authentication.ServiceAuthentication',\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n    ),\n    'DEFAULT_PERMISSION_CLASSES': [\n        'common_auth.permissions.IsAuthenticated',\n        'rest_framework.permissions.IsAuthenticated',\n    ],\n    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',",
        "detail": "services.billing-service.core.settings",
        "documentation": {}
    },
    {
        "label": "API_GATEWAY_URL",
        "kind": 5,
        "importPath": "services.billing-service.core.settings",
        "description": "services.billing-service.core.settings",
        "peekOfCode": "API_GATEWAY_URL = os.environ.get('API_GATEWAY_URL', 'http://api-gateway:4000')\nUSER_SERVICE_URL = os.environ.get('USER_SERVICE_URL', 'http://user-service:8000')\nMEDICAL_RECORD_SERVICE_URL = os.environ.get('MEDICAL_RECORD_SERVICE_URL', 'http://medical-record-service:8001')\nAPPOINTMENT_SERVICE_URL = os.environ.get('APPOINTMENT_SERVICE_URL', 'http://appointment-service:8002')\nPHARMACY_SERVICE_URL = os.environ.get('PHARMACY_SERVICE_URL', 'http://pharmacy-service:8004')\nLABORATORY_SERVICE_URL = os.environ.get('LAB_SERVICE_URL', 'http://laboratory-service:8005')\n# Common Auth settings\nREDIS_URL = os.environ.get('REDIS_URL', 'redis://redis:6379/0')\nJWT_SECRET = os.environ.get('JWT_SECRET', SECRET_KEY)\nACCESS_TOKEN_LIFETIME = timedelta(minutes=60)",
        "detail": "services.billing-service.core.settings",
        "documentation": {}
    },
    {
        "label": "USER_SERVICE_URL",
        "kind": 5,
        "importPath": "services.billing-service.core.settings",
        "description": "services.billing-service.core.settings",
        "peekOfCode": "USER_SERVICE_URL = os.environ.get('USER_SERVICE_URL', 'http://user-service:8000')\nMEDICAL_RECORD_SERVICE_URL = os.environ.get('MEDICAL_RECORD_SERVICE_URL', 'http://medical-record-service:8001')\nAPPOINTMENT_SERVICE_URL = os.environ.get('APPOINTMENT_SERVICE_URL', 'http://appointment-service:8002')\nPHARMACY_SERVICE_URL = os.environ.get('PHARMACY_SERVICE_URL', 'http://pharmacy-service:8004')\nLABORATORY_SERVICE_URL = os.environ.get('LAB_SERVICE_URL', 'http://laboratory-service:8005')\n# Common Auth settings\nREDIS_URL = os.environ.get('REDIS_URL', 'redis://redis:6379/0')\nJWT_SECRET = os.environ.get('JWT_SECRET', SECRET_KEY)\nACCESS_TOKEN_LIFETIME = timedelta(minutes=60)\nREFRESH_TOKEN_LIFETIME = timedelta(days=7)",
        "detail": "services.billing-service.core.settings",
        "documentation": {}
    },
    {
        "label": "MEDICAL_RECORD_SERVICE_URL",
        "kind": 5,
        "importPath": "services.billing-service.core.settings",
        "description": "services.billing-service.core.settings",
        "peekOfCode": "MEDICAL_RECORD_SERVICE_URL = os.environ.get('MEDICAL_RECORD_SERVICE_URL', 'http://medical-record-service:8001')\nAPPOINTMENT_SERVICE_URL = os.environ.get('APPOINTMENT_SERVICE_URL', 'http://appointment-service:8002')\nPHARMACY_SERVICE_URL = os.environ.get('PHARMACY_SERVICE_URL', 'http://pharmacy-service:8004')\nLABORATORY_SERVICE_URL = os.environ.get('LAB_SERVICE_URL', 'http://laboratory-service:8005')\n# Common Auth settings\nREDIS_URL = os.environ.get('REDIS_URL', 'redis://redis:6379/0')\nJWT_SECRET = os.environ.get('JWT_SECRET', SECRET_KEY)\nACCESS_TOKEN_LIFETIME = timedelta(minutes=60)\nREFRESH_TOKEN_LIFETIME = timedelta(days=7)\nROTATE_REFRESH_TOKENS = False",
        "detail": "services.billing-service.core.settings",
        "documentation": {}
    },
    {
        "label": "APPOINTMENT_SERVICE_URL",
        "kind": 5,
        "importPath": "services.billing-service.core.settings",
        "description": "services.billing-service.core.settings",
        "peekOfCode": "APPOINTMENT_SERVICE_URL = os.environ.get('APPOINTMENT_SERVICE_URL', 'http://appointment-service:8002')\nPHARMACY_SERVICE_URL = os.environ.get('PHARMACY_SERVICE_URL', 'http://pharmacy-service:8004')\nLABORATORY_SERVICE_URL = os.environ.get('LAB_SERVICE_URL', 'http://laboratory-service:8005')\n# Common Auth settings\nREDIS_URL = os.environ.get('REDIS_URL', 'redis://redis:6379/0')\nJWT_SECRET = os.environ.get('JWT_SECRET', SECRET_KEY)\nACCESS_TOKEN_LIFETIME = timedelta(minutes=60)\nREFRESH_TOKEN_LIFETIME = timedelta(days=7)\nROTATE_REFRESH_TOKENS = False\nSESSION_TTL = 86400  # 1 day in seconds",
        "detail": "services.billing-service.core.settings",
        "documentation": {}
    },
    {
        "label": "PHARMACY_SERVICE_URL",
        "kind": 5,
        "importPath": "services.billing-service.core.settings",
        "description": "services.billing-service.core.settings",
        "peekOfCode": "PHARMACY_SERVICE_URL = os.environ.get('PHARMACY_SERVICE_URL', 'http://pharmacy-service:8004')\nLABORATORY_SERVICE_URL = os.environ.get('LAB_SERVICE_URL', 'http://laboratory-service:8005')\n# Common Auth settings\nREDIS_URL = os.environ.get('REDIS_URL', 'redis://redis:6379/0')\nJWT_SECRET = os.environ.get('JWT_SECRET', SECRET_KEY)\nACCESS_TOKEN_LIFETIME = timedelta(minutes=60)\nREFRESH_TOKEN_LIFETIME = timedelta(days=7)\nROTATE_REFRESH_TOKENS = False\nSESSION_TTL = 86400  # 1 day in seconds\nMAX_SESSIONS_PER_USER = 5",
        "detail": "services.billing-service.core.settings",
        "documentation": {}
    },
    {
        "label": "LABORATORY_SERVICE_URL",
        "kind": 5,
        "importPath": "services.billing-service.core.settings",
        "description": "services.billing-service.core.settings",
        "peekOfCode": "LABORATORY_SERVICE_URL = os.environ.get('LAB_SERVICE_URL', 'http://laboratory-service:8005')\n# Common Auth settings\nREDIS_URL = os.environ.get('REDIS_URL', 'redis://redis:6379/0')\nJWT_SECRET = os.environ.get('JWT_SECRET', SECRET_KEY)\nACCESS_TOKEN_LIFETIME = timedelta(minutes=60)\nREFRESH_TOKEN_LIFETIME = timedelta(days=7)\nROTATE_REFRESH_TOKENS = False\nSESSION_TTL = 86400  # 1 day in seconds\nMAX_SESSIONS_PER_USER = 5\nVERIFY_JWT_SIGNATURE = True",
        "detail": "services.billing-service.core.settings",
        "documentation": {}
    },
    {
        "label": "REDIS_URL",
        "kind": 5,
        "importPath": "services.billing-service.core.settings",
        "description": "services.billing-service.core.settings",
        "peekOfCode": "REDIS_URL = os.environ.get('REDIS_URL', 'redis://redis:6379/0')\nJWT_SECRET = os.environ.get('JWT_SECRET', SECRET_KEY)\nACCESS_TOKEN_LIFETIME = timedelta(minutes=60)\nREFRESH_TOKEN_LIFETIME = timedelta(days=7)\nROTATE_REFRESH_TOKENS = False\nSESSION_TTL = 86400  # 1 day in seconds\nMAX_SESSIONS_PER_USER = 5\nVERIFY_JWT_SIGNATURE = True\n# Swagger UI JWT auth configuration\nSWAGGER_SETTINGS = {",
        "detail": "services.billing-service.core.settings",
        "documentation": {}
    },
    {
        "label": "JWT_SECRET",
        "kind": 5,
        "importPath": "services.billing-service.core.settings",
        "description": "services.billing-service.core.settings",
        "peekOfCode": "JWT_SECRET = os.environ.get('JWT_SECRET', SECRET_KEY)\nACCESS_TOKEN_LIFETIME = timedelta(minutes=60)\nREFRESH_TOKEN_LIFETIME = timedelta(days=7)\nROTATE_REFRESH_TOKENS = False\nSESSION_TTL = 86400  # 1 day in seconds\nMAX_SESSIONS_PER_USER = 5\nVERIFY_JWT_SIGNATURE = True\n# Swagger UI JWT auth configuration\nSWAGGER_SETTINGS = {\n    'SECURITY_DEFINITIONS': {",
        "detail": "services.billing-service.core.settings",
        "documentation": {}
    },
    {
        "label": "ACCESS_TOKEN_LIFETIME",
        "kind": 5,
        "importPath": "services.billing-service.core.settings",
        "description": "services.billing-service.core.settings",
        "peekOfCode": "ACCESS_TOKEN_LIFETIME = timedelta(minutes=60)\nREFRESH_TOKEN_LIFETIME = timedelta(days=7)\nROTATE_REFRESH_TOKENS = False\nSESSION_TTL = 86400  # 1 day in seconds\nMAX_SESSIONS_PER_USER = 5\nVERIFY_JWT_SIGNATURE = True\n# Swagger UI JWT auth configuration\nSWAGGER_SETTINGS = {\n    'SECURITY_DEFINITIONS': {\n        'Bearer': {",
        "detail": "services.billing-service.core.settings",
        "documentation": {}
    },
    {
        "label": "REFRESH_TOKEN_LIFETIME",
        "kind": 5,
        "importPath": "services.billing-service.core.settings",
        "description": "services.billing-service.core.settings",
        "peekOfCode": "REFRESH_TOKEN_LIFETIME = timedelta(days=7)\nROTATE_REFRESH_TOKENS = False\nSESSION_TTL = 86400  # 1 day in seconds\nMAX_SESSIONS_PER_USER = 5\nVERIFY_JWT_SIGNATURE = True\n# Swagger UI JWT auth configuration\nSWAGGER_SETTINGS = {\n    'SECURITY_DEFINITIONS': {\n        'Bearer': {\n            'type': 'apiKey',",
        "detail": "services.billing-service.core.settings",
        "documentation": {}
    },
    {
        "label": "ROTATE_REFRESH_TOKENS",
        "kind": 5,
        "importPath": "services.billing-service.core.settings",
        "description": "services.billing-service.core.settings",
        "peekOfCode": "ROTATE_REFRESH_TOKENS = False\nSESSION_TTL = 86400  # 1 day in seconds\nMAX_SESSIONS_PER_USER = 5\nVERIFY_JWT_SIGNATURE = True\n# Swagger UI JWT auth configuration\nSWAGGER_SETTINGS = {\n    'SECURITY_DEFINITIONS': {\n        'Bearer': {\n            'type': 'apiKey',\n            'in': 'header',",
        "detail": "services.billing-service.core.settings",
        "documentation": {}
    },
    {
        "label": "SESSION_TTL",
        "kind": 5,
        "importPath": "services.billing-service.core.settings",
        "description": "services.billing-service.core.settings",
        "peekOfCode": "SESSION_TTL = 86400  # 1 day in seconds\nMAX_SESSIONS_PER_USER = 5\nVERIFY_JWT_SIGNATURE = True\n# Swagger UI JWT auth configuration\nSWAGGER_SETTINGS = {\n    'SECURITY_DEFINITIONS': {\n        'Bearer': {\n            'type': 'apiKey',\n            'in': 'header',\n            'name': 'Authorization',",
        "detail": "services.billing-service.core.settings",
        "documentation": {}
    },
    {
        "label": "MAX_SESSIONS_PER_USER",
        "kind": 5,
        "importPath": "services.billing-service.core.settings",
        "description": "services.billing-service.core.settings",
        "peekOfCode": "MAX_SESSIONS_PER_USER = 5\nVERIFY_JWT_SIGNATURE = True\n# Swagger UI JWT auth configuration\nSWAGGER_SETTINGS = {\n    'SECURITY_DEFINITIONS': {\n        'Bearer': {\n            'type': 'apiKey',\n            'in': 'header',\n            'name': 'Authorization',\n            'description': 'JWT Authorization header using the Bearer scheme. Example: \"Bearer {token}\"',",
        "detail": "services.billing-service.core.settings",
        "documentation": {}
    },
    {
        "label": "VERIFY_JWT_SIGNATURE",
        "kind": 5,
        "importPath": "services.billing-service.core.settings",
        "description": "services.billing-service.core.settings",
        "peekOfCode": "VERIFY_JWT_SIGNATURE = True\n# Swagger UI JWT auth configuration\nSWAGGER_SETTINGS = {\n    'SECURITY_DEFINITIONS': {\n        'Bearer': {\n            'type': 'apiKey',\n            'in': 'header',\n            'name': 'Authorization',\n            'description': 'JWT Authorization header using the Bearer scheme. Example: \"Bearer {token}\"',\n        },",
        "detail": "services.billing-service.core.settings",
        "documentation": {}
    },
    {
        "label": "SWAGGER_SETTINGS",
        "kind": 5,
        "importPath": "services.billing-service.core.settings",
        "description": "services.billing-service.core.settings",
        "peekOfCode": "SWAGGER_SETTINGS = {\n    'SECURITY_DEFINITIONS': {\n        'Bearer': {\n            'type': 'apiKey',\n            'in': 'header',\n            'name': 'Authorization',\n            'description': 'JWT Authorization header using the Bearer scheme. Example: \"Bearer {token}\"',\n        },\n    },\n    'USE_SESSION_AUTH': False,",
        "detail": "services.billing-service.core.settings",
        "documentation": {}
    },
    {
        "label": "schema_view",
        "kind": 5,
        "importPath": "services.billing-service.core.urls",
        "description": "services.billing-service.core.urls",
        "peekOfCode": "schema_view = get_schema_view(\n    openapi.Info(\n        title=\"Billing Service API\",\n        default_version='v1',\n        description=\"API for managing billing, payments, and insurance claims\",\n        terms_of_service=\"https://www.example.com/terms/\",\n        contact=openapi.Contact(email=\"contact@example.com\"),\n        license=openapi.License(name=\"BSD License\"),\n    ),\n    public=True,",
        "detail": "services.billing-service.core.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "services.billing-service.core.urls",
        "description": "services.billing-service.core.urls",
        "peekOfCode": "urlpatterns = [\n    path('admin/', admin.site.urls),\n    path('api/', include('billing.urls')),\n    path('', schema_view.with_ui('swagger', cache_timeout=0), name='schema-swagger-ui'),\n    re_path(r'^billing-service(?P<format>\\.json|\\.yaml)$', schema_view.without_ui(cache_timeout=0), name='schema-json'),\n    path('redoc/', schema_view.with_ui('redoc', cache_timeout=0), name='schema-redoc'),\n]",
        "detail": "services.billing-service.core.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "services.billing-service.core.wsgi",
        "description": "services.billing-service.core.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "services.billing-service.core.wsgi",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "services.billing-service.manage",
        "description": "services.billing-service.manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'core.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "services.billing-service.manage",
        "documentation": {}
    },
    {
        "label": "AppointmentPermissions",
        "kind": 6,
        "importPath": "services.common-auth.common_auth.permissions.appointment",
        "description": "services.common-auth.common_auth.permissions.appointment",
        "peekOfCode": "class AppointmentPermissions:\n    \"\"\"\n    Container for all appointment-related permissions.\n    Usage:\n        @permission_classes([AppointmentPermissions.CanViewAppointments])\n        def list_appointments(request):\n            ...\n    \"\"\"\n    class CanViewAppointments(BasePermission):\n        \"\"\"",
        "detail": "services.common-auth.common_auth.permissions.appointment",
        "documentation": {}
    },
    {
        "label": "BasePermission",
        "kind": 6,
        "importPath": "services.common-auth.common_auth.permissions.base",
        "description": "services.common-auth.common_auth.permissions.base",
        "peekOfCode": "class BasePermission(permissions.BasePermission):\n    \"\"\"\n    Base class for all permissions in the healthcare system.\n    Includes common utility methods and logging.\n    \"\"\"\n    def log_access_denied(self, request, reason=None):\n        \"\"\"\n        Log access denied events with appropriate details.\n        \"\"\"\n        user_id = getattr(request.user, 'id', 'unknown')",
        "detail": "services.common-auth.common_auth.permissions.base",
        "documentation": {}
    },
    {
        "label": "AllowAny",
        "kind": 6,
        "importPath": "services.common-auth.common_auth.permissions.base",
        "description": "services.common-auth.common_auth.permissions.base",
        "peekOfCode": "class AllowAny(BasePermission):\n    \"\"\"\n    Permission to allow any access.\n    Use for public endpoints like login, register, and public information.\n    \"\"\"\n    def has_permission(self, request, view):\n        return True\n    def has_object_permission(self, request, view, obj):\n        return True\nclass IsAuthenticated(BasePermission):",
        "detail": "services.common-auth.common_auth.permissions.base",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "kind": 6,
        "importPath": "services.common-auth.common_auth.permissions.base",
        "description": "services.common-auth.common_auth.permissions.base",
        "peekOfCode": "class IsAuthenticated(BasePermission):\n    \"\"\"\n    Permission to check if the user is authenticated.\n    This is the base requirement for most protected endpoints.\n    \"\"\"\n    def has_permission(self, request, view):\n        is_authenticated = bool(request.user and hasattr(request.user, 'is_authenticated') and request.user.is_authenticated)\n        if not is_authenticated:\n            self.log_access_denied(request, \"User is not authenticated\")\n        return is_authenticated",
        "detail": "services.common-auth.common_auth.permissions.base",
        "documentation": {}
    },
    {
        "label": "ReadOnly",
        "kind": 6,
        "importPath": "services.common-auth.common_auth.permissions.base",
        "description": "services.common-auth.common_auth.permissions.base",
        "peekOfCode": "class ReadOnly(BasePermission):\n    \"\"\"\n    Permission to allow only read-only methods (GET, HEAD, OPTIONS).\n    Use for endpoints where users can view but not modify data.\n    \"\"\"\n    def has_permission(self, request, view):\n        return request.method in permissions.SAFE_METHODS\nclass HasResourceAccess(BasePermission):\n    \"\"\"\n    Permission to check if the user has access to a specific resource.",
        "detail": "services.common-auth.common_auth.permissions.base",
        "documentation": {}
    },
    {
        "label": "HasResourceAccess",
        "kind": 6,
        "importPath": "services.common-auth.common_auth.permissions.base",
        "description": "services.common-auth.common_auth.permissions.base",
        "peekOfCode": "class HasResourceAccess(BasePermission):\n    \"\"\"\n    Permission to check if the user has access to a specific resource.\n    This can be extended for different resources in the healthcare system.\n    \"\"\"\n    def __init__(self, resource_type=None, required_access=None):\n        \"\"\"\n        Initialize with resource type and required access level.\n        Args:\n            resource_type: The type of resource to check access for (e.g., 'patient', 'appointment')",
        "detail": "services.common-auth.common_auth.permissions.base",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "services.common-auth.common_auth.permissions.base",
        "description": "services.common-auth.common_auth.permissions.base",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass BasePermission(permissions.BasePermission):\n    \"\"\"\n    Base class for all permissions in the healthcare system.\n    Includes common utility methods and logging.\n    \"\"\"\n    def log_access_denied(self, request, reason=None):\n        \"\"\"\n        Log access denied events with appropriate details.\n        \"\"\"",
        "detail": "services.common-auth.common_auth.permissions.base",
        "documentation": {}
    },
    {
        "label": "BillingPermissions",
        "kind": 6,
        "importPath": "services.common-auth.common_auth.permissions.billing",
        "description": "services.common-auth.common_auth.permissions.billing",
        "peekOfCode": "class BillingPermissions:\n    \"\"\"\n    Container for all billing-related permissions.\n    Usage:\n        @permission_classes([BillingPermissions.CanViewInvoices])\n        def list_invoices(request):\n            ...\n    \"\"\"\n    class CanViewInvoices(BasePermission):\n        \"\"\"",
        "detail": "services.common-auth.common_auth.permissions.billing",
        "documentation": {}
    },
    {
        "label": "LaboratoryPermissions",
        "kind": 6,
        "importPath": "services.common-auth.common_auth.permissions.laboratory",
        "description": "services.common-auth.common_auth.permissions.laboratory",
        "peekOfCode": "class LaboratoryPermissions:\n    \"\"\"\n    Container for all laboratory-related permissions.\n    Usage:\n        @permission_classes([LaboratoryPermissions.CanViewLabTests])\n        def list_tests(request):\n            ...\n    \"\"\"\n    class CanViewLabTests(BasePermission):\n        \"\"\"",
        "detail": "services.common-auth.common_auth.permissions.laboratory",
        "documentation": {}
    },
    {
        "label": "MedicalRecordPermissions",
        "kind": 6,
        "importPath": "services.common-auth.common_auth.permissions.medical_record",
        "description": "services.common-auth.common_auth.permissions.medical_record",
        "peekOfCode": "class MedicalRecordPermissions:\n    \"\"\"\n    Container for all medical record-related permissions.\n    Usage:\n        @permission_classes([MedicalRecordPermissions.CanViewMedicalRecords])\n        def list_records(request):\n            ...\n    \"\"\"\n    class CanViewMedicalRecords(BasePermission):\n        \"\"\"",
        "detail": "services.common-auth.common_auth.permissions.medical_record",
        "documentation": {}
    },
    {
        "label": "NotificationPermissions",
        "kind": 6,
        "importPath": "services.common-auth.common_auth.permissions.notification",
        "description": "services.common-auth.common_auth.permissions.notification",
        "peekOfCode": "class NotificationPermissions:\n    \"\"\"\n    Container for all notification-related permissions.\n    Usage:\n        @permission_classes([NotificationPermissions.CanViewNotifications])\n        def list_notifications(request):\n            ...\n    \"\"\"\n    class CanViewNotifications(BasePermission):\n        \"\"\"",
        "detail": "services.common-auth.common_auth.permissions.notification",
        "documentation": {}
    },
    {
        "label": "PharmacyPermissions",
        "kind": 6,
        "importPath": "services.common-auth.common_auth.permissions.pharmacy",
        "description": "services.common-auth.common_auth.permissions.pharmacy",
        "peekOfCode": "class PharmacyPermissions:\n    \"\"\"\n    Container for all pharmacy-related permissions.\n    Usage:\n        @permission_classes([PharmacyPermissions.CanViewPrescriptions])\n        def list_prescriptions(request):\n            ...\n    \"\"\"\n    class CanViewPrescriptions(BasePermission):\n        \"\"\"",
        "detail": "services.common-auth.common_auth.permissions.pharmacy",
        "documentation": {}
    },
    {
        "label": "HasRole",
        "kind": 6,
        "importPath": "services.common-auth.common_auth.permissions.roles",
        "description": "services.common-auth.common_auth.permissions.roles",
        "peekOfCode": "class HasRole(permissions.BasePermission):\n    \"\"\"\n    Permission to check if the user has the required role(s).\n    \"\"\"\n    def __init__(self, roles):\n        self.roles = roles if isinstance(roles, (list, tuple)) else [roles]\n    def has_permission(self, request, view):\n        if not request.user or not hasattr(request.user, 'role'):\n            return False\n        has_role = request.user.role in self.roles",
        "detail": "services.common-auth.common_auth.permissions.roles",
        "documentation": {}
    },
    {
        "label": "IsAdmin",
        "kind": 6,
        "importPath": "services.common-auth.common_auth.permissions.roles",
        "description": "services.common-auth.common_auth.permissions.roles",
        "peekOfCode": "class IsAdmin(HasRole):\n    \"\"\"\n    Permission class for administrators.\n    \"\"\"\n    def __init__(self):\n        super().__init__(ROLE_ADMIN)\nclass IsDoctor(HasRole):\n    \"\"\"\n    Permission class for doctors.\n    \"\"\"",
        "detail": "services.common-auth.common_auth.permissions.roles",
        "documentation": {}
    },
    {
        "label": "IsDoctor",
        "kind": 6,
        "importPath": "services.common-auth.common_auth.permissions.roles",
        "description": "services.common-auth.common_auth.permissions.roles",
        "peekOfCode": "class IsDoctor(HasRole):\n    \"\"\"\n    Permission class for doctors.\n    \"\"\"\n    def __init__(self):\n        super().__init__(ROLE_DOCTOR)\nclass IsNurse(HasRole):\n    \"\"\"\n    Permission class for nurses.\n    \"\"\"",
        "detail": "services.common-auth.common_auth.permissions.roles",
        "documentation": {}
    },
    {
        "label": "IsNurse",
        "kind": 6,
        "importPath": "services.common-auth.common_auth.permissions.roles",
        "description": "services.common-auth.common_auth.permissions.roles",
        "peekOfCode": "class IsNurse(HasRole):\n    \"\"\"\n    Permission class for nurses.\n    \"\"\"\n    def __init__(self):\n        super().__init__(ROLE_NURSE)\nclass IsPatient(HasRole):\n    \"\"\"\n    Permission class for patients.\n    \"\"\"",
        "detail": "services.common-auth.common_auth.permissions.roles",
        "documentation": {}
    },
    {
        "label": "IsPatient",
        "kind": 6,
        "importPath": "services.common-auth.common_auth.permissions.roles",
        "description": "services.common-auth.common_auth.permissions.roles",
        "peekOfCode": "class IsPatient(HasRole):\n    \"\"\"\n    Permission class for patients.\n    \"\"\"\n    def __init__(self):\n        super().__init__(ROLE_PATIENT)\nclass IsPharmacist(HasRole):\n    \"\"\"\n    Permission class for pharmacists.\n    \"\"\"",
        "detail": "services.common-auth.common_auth.permissions.roles",
        "documentation": {}
    },
    {
        "label": "IsPharmacist",
        "kind": 6,
        "importPath": "services.common-auth.common_auth.permissions.roles",
        "description": "services.common-auth.common_auth.permissions.roles",
        "peekOfCode": "class IsPharmacist(HasRole):\n    \"\"\"\n    Permission class for pharmacists.\n    \"\"\"\n    def __init__(self):\n        super().__init__(ROLE_PHARMACIST)\nclass IsLabTechnician(HasRole):\n    \"\"\"\n    Permission class for laboratory technicians.\n    \"\"\"",
        "detail": "services.common-auth.common_auth.permissions.roles",
        "documentation": {}
    },
    {
        "label": "IsLabTechnician",
        "kind": 6,
        "importPath": "services.common-auth.common_auth.permissions.roles",
        "description": "services.common-auth.common_auth.permissions.roles",
        "peekOfCode": "class IsLabTechnician(HasRole):\n    \"\"\"\n    Permission class for laboratory technicians.\n    \"\"\"\n    def __init__(self):\n        super().__init__(ROLE_LAB_TECHNICIAN)\nclass IsInsuranceProvider(HasRole):\n    \"\"\"\n    Permission class for insurance providers.\n    \"\"\"",
        "detail": "services.common-auth.common_auth.permissions.roles",
        "documentation": {}
    },
    {
        "label": "IsInsuranceProvider",
        "kind": 6,
        "importPath": "services.common-auth.common_auth.permissions.roles",
        "description": "services.common-auth.common_auth.permissions.roles",
        "peekOfCode": "class IsInsuranceProvider(HasRole):\n    \"\"\"\n    Permission class for insurance providers.\n    \"\"\"\n    def __init__(self):\n        super().__init__(ROLE_INSURANCE_PROVIDER)\nclass IsMedicalStaff(HasRole):\n    \"\"\"\n    Permission class for medical staff (doctors and nurses).\n    \"\"\"",
        "detail": "services.common-auth.common_auth.permissions.roles",
        "documentation": {}
    },
    {
        "label": "IsMedicalStaff",
        "kind": 6,
        "importPath": "services.common-auth.common_auth.permissions.roles",
        "description": "services.common-auth.common_auth.permissions.roles",
        "peekOfCode": "class IsMedicalStaff(HasRole):\n    \"\"\"\n    Permission class for medical staff (doctors and nurses).\n    \"\"\"\n    def __init__(self):\n        super().__init__(MEDICAL_STAFF_ROLES)\nclass IsAdminOrMedicalStaff(HasRole):\n    \"\"\"\n    Permission class for administrators or medical staff.\n    \"\"\"",
        "detail": "services.common-auth.common_auth.permissions.roles",
        "documentation": {}
    },
    {
        "label": "IsAdminOrMedicalStaff",
        "kind": 6,
        "importPath": "services.common-auth.common_auth.permissions.roles",
        "description": "services.common-auth.common_auth.permissions.roles",
        "peekOfCode": "class IsAdminOrMedicalStaff(HasRole):\n    \"\"\"\n    Permission class for administrators or medical staff.\n    \"\"\"\n    def __init__(self):\n        roles = ADMIN_ROLES + MEDICAL_STAFF_ROLES\n        super().__init__(roles)",
        "detail": "services.common-auth.common_auth.permissions.roles",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "services.common-auth.common_auth.permissions.roles",
        "description": "services.common-auth.common_auth.permissions.roles",
        "peekOfCode": "logger = logging.getLogger(__name__)\n# Constants for roles\nROLE_ADMIN = 'ADMIN'\nROLE_DOCTOR = 'DOCTOR'\nROLE_NURSE = 'NURSE'\nROLE_PATIENT = 'PATIENT'\nROLE_PHARMACIST = 'PHARMACIST'\nROLE_LAB_TECHNICIAN = 'LAB_TECHNICIAN'\nROLE_INSURANCE_PROVIDER = 'INSURANCE_PROVIDER'\n# List of all valid roles",
        "detail": "services.common-auth.common_auth.permissions.roles",
        "documentation": {}
    },
    {
        "label": "ROLE_ADMIN",
        "kind": 5,
        "importPath": "services.common-auth.common_auth.permissions.roles",
        "description": "services.common-auth.common_auth.permissions.roles",
        "peekOfCode": "ROLE_ADMIN = 'ADMIN'\nROLE_DOCTOR = 'DOCTOR'\nROLE_NURSE = 'NURSE'\nROLE_PATIENT = 'PATIENT'\nROLE_PHARMACIST = 'PHARMACIST'\nROLE_LAB_TECHNICIAN = 'LAB_TECHNICIAN'\nROLE_INSURANCE_PROVIDER = 'INSURANCE_PROVIDER'\n# List of all valid roles\nALL_ROLES = [\n    ROLE_ADMIN,",
        "detail": "services.common-auth.common_auth.permissions.roles",
        "documentation": {}
    },
    {
        "label": "ROLE_DOCTOR",
        "kind": 5,
        "importPath": "services.common-auth.common_auth.permissions.roles",
        "description": "services.common-auth.common_auth.permissions.roles",
        "peekOfCode": "ROLE_DOCTOR = 'DOCTOR'\nROLE_NURSE = 'NURSE'\nROLE_PATIENT = 'PATIENT'\nROLE_PHARMACIST = 'PHARMACIST'\nROLE_LAB_TECHNICIAN = 'LAB_TECHNICIAN'\nROLE_INSURANCE_PROVIDER = 'INSURANCE_PROVIDER'\n# List of all valid roles\nALL_ROLES = [\n    ROLE_ADMIN,\n    ROLE_DOCTOR,",
        "detail": "services.common-auth.common_auth.permissions.roles",
        "documentation": {}
    },
    {
        "label": "ROLE_NURSE",
        "kind": 5,
        "importPath": "services.common-auth.common_auth.permissions.roles",
        "description": "services.common-auth.common_auth.permissions.roles",
        "peekOfCode": "ROLE_NURSE = 'NURSE'\nROLE_PATIENT = 'PATIENT'\nROLE_PHARMACIST = 'PHARMACIST'\nROLE_LAB_TECHNICIAN = 'LAB_TECHNICIAN'\nROLE_INSURANCE_PROVIDER = 'INSURANCE_PROVIDER'\n# List of all valid roles\nALL_ROLES = [\n    ROLE_ADMIN,\n    ROLE_DOCTOR,\n    ROLE_NURSE,",
        "detail": "services.common-auth.common_auth.permissions.roles",
        "documentation": {}
    },
    {
        "label": "ROLE_PATIENT",
        "kind": 5,
        "importPath": "services.common-auth.common_auth.permissions.roles",
        "description": "services.common-auth.common_auth.permissions.roles",
        "peekOfCode": "ROLE_PATIENT = 'PATIENT'\nROLE_PHARMACIST = 'PHARMACIST'\nROLE_LAB_TECHNICIAN = 'LAB_TECHNICIAN'\nROLE_INSURANCE_PROVIDER = 'INSURANCE_PROVIDER'\n# List of all valid roles\nALL_ROLES = [\n    ROLE_ADMIN,\n    ROLE_DOCTOR,\n    ROLE_NURSE,\n    ROLE_PATIENT,",
        "detail": "services.common-auth.common_auth.permissions.roles",
        "documentation": {}
    },
    {
        "label": "ROLE_PHARMACIST",
        "kind": 5,
        "importPath": "services.common-auth.common_auth.permissions.roles",
        "description": "services.common-auth.common_auth.permissions.roles",
        "peekOfCode": "ROLE_PHARMACIST = 'PHARMACIST'\nROLE_LAB_TECHNICIAN = 'LAB_TECHNICIAN'\nROLE_INSURANCE_PROVIDER = 'INSURANCE_PROVIDER'\n# List of all valid roles\nALL_ROLES = [\n    ROLE_ADMIN,\n    ROLE_DOCTOR,\n    ROLE_NURSE,\n    ROLE_PATIENT,\n    ROLE_PHARMACIST,",
        "detail": "services.common-auth.common_auth.permissions.roles",
        "documentation": {}
    },
    {
        "label": "ROLE_LAB_TECHNICIAN",
        "kind": 5,
        "importPath": "services.common-auth.common_auth.permissions.roles",
        "description": "services.common-auth.common_auth.permissions.roles",
        "peekOfCode": "ROLE_LAB_TECHNICIAN = 'LAB_TECHNICIAN'\nROLE_INSURANCE_PROVIDER = 'INSURANCE_PROVIDER'\n# List of all valid roles\nALL_ROLES = [\n    ROLE_ADMIN,\n    ROLE_DOCTOR,\n    ROLE_NURSE,\n    ROLE_PATIENT,\n    ROLE_PHARMACIST,\n    ROLE_LAB_TECHNICIAN,",
        "detail": "services.common-auth.common_auth.permissions.roles",
        "documentation": {}
    },
    {
        "label": "ROLE_INSURANCE_PROVIDER",
        "kind": 5,
        "importPath": "services.common-auth.common_auth.permissions.roles",
        "description": "services.common-auth.common_auth.permissions.roles",
        "peekOfCode": "ROLE_INSURANCE_PROVIDER = 'INSURANCE_PROVIDER'\n# List of all valid roles\nALL_ROLES = [\n    ROLE_ADMIN,\n    ROLE_DOCTOR,\n    ROLE_NURSE,\n    ROLE_PATIENT,\n    ROLE_PHARMACIST,\n    ROLE_LAB_TECHNICIAN,\n    ROLE_INSURANCE_PROVIDER",
        "detail": "services.common-auth.common_auth.permissions.roles",
        "documentation": {}
    },
    {
        "label": "ALL_ROLES",
        "kind": 5,
        "importPath": "services.common-auth.common_auth.permissions.roles",
        "description": "services.common-auth.common_auth.permissions.roles",
        "peekOfCode": "ALL_ROLES = [\n    ROLE_ADMIN,\n    ROLE_DOCTOR,\n    ROLE_NURSE,\n    ROLE_PATIENT,\n    ROLE_PHARMACIST,\n    ROLE_LAB_TECHNICIAN,\n    ROLE_INSURANCE_PROVIDER\n]\n# List of medical staff roles",
        "detail": "services.common-auth.common_auth.permissions.roles",
        "documentation": {}
    },
    {
        "label": "MEDICAL_STAFF_ROLES",
        "kind": 5,
        "importPath": "services.common-auth.common_auth.permissions.roles",
        "description": "services.common-auth.common_auth.permissions.roles",
        "peekOfCode": "MEDICAL_STAFF_ROLES = [ROLE_DOCTOR, ROLE_NURSE]\n# List of administrative roles\nADMIN_ROLES = [ROLE_ADMIN]\nclass HasRole(permissions.BasePermission):\n    \"\"\"\n    Permission to check if the user has the required role(s).\n    \"\"\"\n    def __init__(self, roles):\n        self.roles = roles if isinstance(roles, (list, tuple)) else [roles]\n    def has_permission(self, request, view):",
        "detail": "services.common-auth.common_auth.permissions.roles",
        "documentation": {}
    },
    {
        "label": "ADMIN_ROLES",
        "kind": 5,
        "importPath": "services.common-auth.common_auth.permissions.roles",
        "description": "services.common-auth.common_auth.permissions.roles",
        "peekOfCode": "ADMIN_ROLES = [ROLE_ADMIN]\nclass HasRole(permissions.BasePermission):\n    \"\"\"\n    Permission to check if the user has the required role(s).\n    \"\"\"\n    def __init__(self, roles):\n        self.roles = roles if isinstance(roles, (list, tuple)) else [roles]\n    def has_permission(self, request, view):\n        if not request.user or not hasattr(request.user, 'role'):\n            return False",
        "detail": "services.common-auth.common_auth.permissions.roles",
        "documentation": {}
    },
    {
        "label": "ServiceUser",
        "kind": 6,
        "importPath": "services.common-auth.common_auth.authentication",
        "description": "services.common-auth.common_auth.authentication",
        "peekOfCode": "class ServiceUser:\n    \"\"\"\n    Custom user class for service authentication.\n    \"\"\"\n    def __init__(self, user_id, role, email=None, first_name=None, last_name=None, **kwargs):\n        self.id = user_id\n        self.user_id = user_id  # For compatibility with both formats\n        self.role = role\n        self.email = email\n        self.first_name = first_name",
        "detail": "services.common-auth.common_auth.authentication",
        "documentation": {}
    },
    {
        "label": "ServiceAuthentication",
        "kind": 6,
        "importPath": "services.common-auth.common_auth.authentication",
        "description": "services.common-auth.common_auth.authentication",
        "peekOfCode": "class ServiceAuthentication(BaseAuthentication):\n    \"\"\"\n    Unified authentication class for all services.\n    This class handles authentication in two ways:\n    1. From headers set by API Gateway (preferred method)\n    2. Directly from JWT token (fallback method)\n    It also checks token validity against a Redis blacklist.\n    \"\"\"\n    def authenticate(self, request):\n        \"\"\"",
        "detail": "services.common-auth.common_auth.authentication",
        "documentation": {}
    },
    {
        "label": "SessionAuthentication",
        "kind": 6,
        "importPath": "services.common-auth.common_auth.authentication",
        "description": "services.common-auth.common_auth.authentication",
        "peekOfCode": "class SessionAuthentication(ServiceAuthentication):\n    \"\"\"\n    Extended authentication that also manages user sessions.\n    \"\"\"\n    def authenticate(self, request):\n        \"\"\"\n        Authenticate and update session information.\n        \"\"\"\n        auth_result = super().authenticate(request)\n        if not auth_result:",
        "detail": "services.common-auth.common_auth.authentication",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "services.common-auth.common_auth.authentication",
        "description": "services.common-auth.common_auth.authentication",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass ServiceUser:\n    \"\"\"\n    Custom user class for service authentication.\n    \"\"\"\n    def __init__(self, user_id, role, email=None, first_name=None, last_name=None, **kwargs):\n        self.id = user_id\n        self.user_id = user_id  # For compatibility with both formats\n        self.role = role\n        self.email = email",
        "detail": "services.common-auth.common_auth.authentication",
        "documentation": {}
    },
    {
        "label": "health_check",
        "kind": 2,
        "importPath": "services.common-auth.common_auth.health_check",
        "description": "services.common-auth.common_auth.health_check",
        "peekOfCode": "def health_check(request):\n    \"\"\"\n    Simple health check endpoint for Django services.\n    This endpoint checks database connection and returns service status.\n    Returns:\n        JsonResponse: Health check result with status UP or DOWN\n    \"\"\"\n    # Default to UP status\n    status = \"UP\"\n    # Check database connection",
        "detail": "services.common-auth.common_auth.health_check",
        "documentation": {}
    },
    {
        "label": "register_health_check",
        "kind": 2,
        "importPath": "services.common-auth.common_auth.health_check",
        "description": "services.common-auth.common_auth.health_check",
        "peekOfCode": "def register_health_check(urlpatterns):\n    \"\"\"\n    Register health check endpoint in URL patterns.\n    Args:\n        urlpatterns: URL patterns list\n    \"\"\"\n    from django.urls import path\n    urlpatterns.append(path('health/', health_check, name='health_check'))\n    return urlpatterns",
        "detail": "services.common-auth.common_auth.health_check",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "services.common-auth.common_auth.health_check",
        "description": "services.common-auth.common_auth.health_check",
        "peekOfCode": "logger = logging.getLogger(__name__)\n@require_GET\ndef health_check(request):\n    \"\"\"\n    Simple health check endpoint for Django services.\n    This endpoint checks database connection and returns service status.\n    Returns:\n        JsonResponse: Health check result with status UP or DOWN\n    \"\"\"\n    # Default to UP status",
        "detail": "services.common-auth.common_auth.health_check",
        "documentation": {}
    },
    {
        "label": "SessionMiddleware",
        "kind": 6,
        "importPath": "services.common-auth.common_auth.middleware",
        "description": "services.common-auth.common_auth.middleware",
        "peekOfCode": "class SessionMiddleware(MiddlewareMixin):\n    \"\"\"\n    Middleware for managing user sessions.\n    This middleware:\n    1. Reads session ID from cookie\n    2. Validates and updates the session\n    3. Adds session data to request\n    4. Sets session cookie in response\n    \"\"\"\n    def __init__(self, get_response=None):",
        "detail": "services.common-auth.common_auth.middleware",
        "documentation": {}
    },
    {
        "label": "TokenRefreshMiddleware",
        "kind": 6,
        "importPath": "services.common-auth.common_auth.middleware",
        "description": "services.common-auth.common_auth.middleware",
        "peekOfCode": "class TokenRefreshMiddleware(MiddlewareMixin):\n    \"\"\"\n    Middleware for refreshing JWT tokens.\n    This middleware:\n    1. Checks if access token is about to expire\n    2. Uses refresh token to get a new access token\n    3. Sets new tokens in response headers\n    \"\"\"\n    def __init__(self, get_response=None):\n        super().__init__(get_response)",
        "detail": "services.common-auth.common_auth.middleware",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "services.common-auth.common_auth.middleware",
        "description": "services.common-auth.common_auth.middleware",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass SessionMiddleware(MiddlewareMixin):\n    \"\"\"\n    Middleware for managing user sessions.\n    This middleware:\n    1. Reads session ID from cookie\n    2. Validates and updates the session\n    3. Adds session data to request\n    4. Sets session cookie in response\n    \"\"\"",
        "detail": "services.common-auth.common_auth.middleware",
        "documentation": {}
    },
    {
        "label": "HasResourceAccess",
        "kind": 6,
        "importPath": "services.common-auth.common_auth.permissions",
        "description": "services.common-auth.common_auth.permissions",
        "peekOfCode": "class HasResourceAccess(permissions.BasePermission):\n    \"\"\"\n    Permission to check if the user has access to a specific resource.\n    DEPRECATED: Please use the specific resource permissions classes from their respective modules:\n    - AppointmentPermissions from common_auth.permissions.appointment\n    - MedicalRecordPermissions from common_auth.permissions.medical_record\n    - PharmacyPermissions from common_auth.permissions.pharmacy\n    - LaboratoryPermissions from common_auth.permissions.laboratory\n    \"\"\"\n    def __init__(self, resource_type, owner_field=None):",
        "detail": "services.common-auth.common_auth.permissions",
        "documentation": {}
    },
    {
        "label": "IsAdminUser",
        "kind": 6,
        "importPath": "services.common-auth.common_auth.permissions",
        "description": "services.common-auth.common_auth.permissions",
        "peekOfCode": "class IsAdminUser(IsAdmin):\n    \"\"\"\n    Permission to check if the user is an admin.\n    DEPRECATED: Please use IsAdmin from common_auth.permissions.roles instead.\n    \"\"\"\n    pass\n# Export specific resource permissions for easier access\nfrom common_auth.permissions.appointment import AppointmentPermissions\nfrom common_auth.permissions.medical_record import MedicalRecordPermissions\nfrom common_auth.permissions.pharmacy import PharmacyPermissions",
        "detail": "services.common-auth.common_auth.permissions",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "services.common-auth.common_auth.permissions",
        "description": "services.common-auth.common_auth.permissions",
        "peekOfCode": "logger = logging.getLogger(__name__)\n# Legacy HasResourceAccess class with same behavior\nclass HasResourceAccess(permissions.BasePermission):\n    \"\"\"\n    Permission to check if the user has access to a specific resource.\n    DEPRECATED: Please use the specific resource permissions classes from their respective modules:\n    - AppointmentPermissions from common_auth.permissions.appointment\n    - MedicalRecordPermissions from common_auth.permissions.medical_record\n    - PharmacyPermissions from common_auth.permissions.pharmacy\n    - LaboratoryPermissions from common_auth.permissions.laboratory",
        "detail": "services.common-auth.common_auth.permissions",
        "documentation": {}
    },
    {
        "label": "RedisNotificationClient",
        "kind": 6,
        "importPath": "services.common-auth.common_auth.redis_notifications",
        "description": "services.common-auth.common_auth.redis_notifications",
        "peekOfCode": "class RedisNotificationClient:\n    \"\"\"\n    Client để gửi và nhận thông báo qua Redis Streams\n    \"\"\"\n    def __init__(self, stream_name=\"notifications\", redis_url=None):\n        self.stream_name = stream_name\n        self._redis_client = None\n        self.redis_url = redis_url\n    @property\n    def redis_client(self):",
        "detail": "services.common-auth.common_auth.redis_notifications",
        "documentation": {}
    },
    {
        "label": "get_notification_client",
        "kind": 2,
        "importPath": "services.common-auth.common_auth.redis_notifications",
        "description": "services.common-auth.common_auth.redis_notifications",
        "peekOfCode": "def get_notification_client():\n    return RedisNotificationClient()\ndef send_notification(service, event_type, data, recipients=None):\n    client = get_notification_client()\n    return client.publish_notification(service, event_type, data, recipients)",
        "detail": "services.common-auth.common_auth.redis_notifications",
        "documentation": {}
    },
    {
        "label": "send_notification",
        "kind": 2,
        "importPath": "services.common-auth.common_auth.redis_notifications",
        "description": "services.common-auth.common_auth.redis_notifications",
        "peekOfCode": "def send_notification(service, event_type, data, recipients=None):\n    client = get_notification_client()\n    return client.publish_notification(service, event_type, data, recipients)",
        "detail": "services.common-auth.common_auth.redis_notifications",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "services.common-auth.common_auth.redis_notifications",
        "description": "services.common-auth.common_auth.redis_notifications",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass RedisNotificationClient:\n    \"\"\"\n    Client để gửi và nhận thông báo qua Redis Streams\n    \"\"\"\n    def __init__(self, stream_name=\"notifications\", redis_url=None):\n        self.stream_name = stream_name\n        self._redis_client = None\n        self.redis_url = redis_url\n    @property",
        "detail": "services.common-auth.common_auth.redis_notifications",
        "documentation": {}
    },
    {
        "label": "ServiceClient",
        "kind": 6,
        "importPath": "services.common-auth.common_auth.service_client",
        "description": "services.common-auth.common_auth.service_client",
        "peekOfCode": "class ServiceClient:\n    \"\"\"\n    Base client for inter-service communication.\n    This client provides a standardized way for services to communicate with each other,\n    with built-in support for:\n    - Authentication token handling\n    - Retry mechanism\n    - Health checks\n    - Pagination\n    - Error handling",
        "detail": "services.common-auth.common_auth.service_client",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "services.common-auth.common_auth.service_client",
        "description": "services.common-auth.common_auth.service_client",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass ServiceClient:\n    \"\"\"\n    Base client for inter-service communication.\n    This client provides a standardized way for services to communicate with each other,\n    with built-in support for:\n    - Authentication token handling\n    - Retry mechanism\n    - Health checks\n    - Pagination",
        "detail": "services.common-auth.common_auth.service_client",
        "documentation": {}
    },
    {
        "label": "SessionManager",
        "kind": 6,
        "importPath": "services.common-auth.common_auth.session_management",
        "description": "services.common-auth.common_auth.session_management",
        "peekOfCode": "class SessionManager:\n    \"\"\"\n    Manages user sessions, including creation, validation, and termination.\n    \"\"\"\n    def __init__(self, redis_url=None):\n        \"\"\"\n        Initialize the SessionManager.\n        Args:\n            redis_url: Redis URL for session storage. If None, uses settings.REDIS_URL.\n        \"\"\"",
        "detail": "services.common-auth.common_auth.session_management",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "services.common-auth.common_auth.session_management",
        "description": "services.common-auth.common_auth.session_management",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass SessionManager:\n    \"\"\"\n    Manages user sessions, including creation, validation, and termination.\n    \"\"\"\n    def __init__(self, redis_url=None):\n        \"\"\"\n        Initialize the SessionManager.\n        Args:\n            redis_url: Redis URL for session storage. If None, uses settings.REDIS_URL.",
        "detail": "services.common-auth.common_auth.session_management",
        "documentation": {}
    },
    {
        "label": "TokenManager",
        "kind": 6,
        "importPath": "services.common-auth.common_auth.token_management",
        "description": "services.common-auth.common_auth.token_management",
        "peekOfCode": "class TokenManager:\n    \"\"\"\n    Manages JWT tokens, including creation, validation, and blacklisting.\n    \"\"\"\n    def __init__(self, redis_url=None):\n        \"\"\"\n        Initialize the TokenManager.\n        Args:\n            redis_url: Redis URL for token blacklist. If None, uses settings.REDIS_URL.\n        \"\"\"",
        "detail": "services.common-auth.common_auth.token_management",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "services.common-auth.common_auth.token_management",
        "description": "services.common-auth.common_auth.token_management",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass TokenManager:\n    \"\"\"\n    Manages JWT tokens, including creation, validation, and blacklisting.\n    \"\"\"\n    def __init__(self, redis_url=None):\n        \"\"\"\n        Initialize the TokenManager.\n        Args:\n            redis_url: Redis URL for token blacklist. If None, uses settings.REDIS_URL.",
        "detail": "services.common-auth.common_auth.token_management",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "services.common-auth.common_auth.urls",
        "description": "services.common-auth.common_auth.urls",
        "peekOfCode": "urlpatterns = [\n    path('token/refresh/', TokenRefreshView.as_view(), name='token-refresh'),\n    path('logout/', LogoutView.as_view(), name='logout'),\n    path('sessions/', SessionView.as_view(), name='sessions'),\n    path('admin/sessions/', AdminSessionView.as_view(), name='admin-sessions'),\n]",
        "detail": "services.common-auth.common_auth.urls",
        "documentation": {}
    },
    {
        "label": "TokenRefreshView",
        "kind": 6,
        "importPath": "services.common-auth.common_auth.views",
        "description": "services.common-auth.common_auth.views",
        "peekOfCode": "class TokenRefreshView(APIView):\n    \"\"\"\n    View for refreshing access tokens using refresh tokens.\n    \"\"\"\n    def post(self, request):\n        \"\"\"\n        Refresh an access token using a refresh token.\n        Request body:\n            refresh_token: The refresh token.\n        Returns:",
        "detail": "services.common-auth.common_auth.views",
        "documentation": {}
    },
    {
        "label": "LogoutView",
        "kind": 6,
        "importPath": "services.common-auth.common_auth.views",
        "description": "services.common-auth.common_auth.views",
        "peekOfCode": "class LogoutView(APIView):\n    \"\"\"\n    View for logging out users.\n    \"\"\"\n    permission_classes = [IsAuthenticated]\n    def post(self, request):\n        \"\"\"\n        Log out a user by blacklisting their tokens and terminating their session.\n        Request body:\n            refresh_token: The refresh token to blacklist.",
        "detail": "services.common-auth.common_auth.views",
        "documentation": {}
    },
    {
        "label": "SessionView",
        "kind": 6,
        "importPath": "services.common-auth.common_auth.views",
        "description": "services.common-auth.common_auth.views",
        "peekOfCode": "class SessionView(APIView):\n    \"\"\"\n    View for managing user sessions.\n    \"\"\"\n    permission_classes = [IsAuthenticated]\n    def get(self, request):\n        \"\"\"\n        Get all active sessions for the current user.\n        Returns:\n            Response with list of sessions.",
        "detail": "services.common-auth.common_auth.views",
        "documentation": {}
    },
    {
        "label": "AdminSessionView",
        "kind": 6,
        "importPath": "services.common-auth.common_auth.views",
        "description": "services.common-auth.common_auth.views",
        "peekOfCode": "class AdminSessionView(APIView):\n    \"\"\"\n    Admin view for managing user sessions.\n    \"\"\"\n    permission_classes = [IsAuthenticated, HasRole('ADMIN')]\n    def get(self, request):\n        \"\"\"\n        Get all active sessions for a specific user.\n        Query parameters:\n            user_id: ID of the user to get sessions for.",
        "detail": "services.common-auth.common_auth.views",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "services.common-auth.common_auth.views",
        "description": "services.common-auth.common_auth.views",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass TokenRefreshView(APIView):\n    \"\"\"\n    View for refreshing access tokens using refresh tokens.\n    \"\"\"\n    def post(self, request):\n        \"\"\"\n        Refresh an access token using a refresh token.\n        Request body:\n            refresh_token: The refresh token.",
        "detail": "services.common-auth.common_auth.views",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "services.laboratory-service.core.asgi",
        "description": "services.laboratory-service.core.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "services.laboratory-service.core.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "services.laboratory-service.core.settings",
        "description": "services.laboratory-service.core.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure-key')\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = os.environ.get('DEBUG', 'False') == 'True'\nALLOWED_HOSTS = ['*']\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',",
        "detail": "services.laboratory-service.core.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "services.laboratory-service.core.settings",
        "description": "services.laboratory-service.core.settings",
        "peekOfCode": "SECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure-key')\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = os.environ.get('DEBUG', 'False') == 'True'\nALLOWED_HOSTS = ['*']\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',",
        "detail": "services.laboratory-service.core.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "services.laboratory-service.core.settings",
        "description": "services.laboratory-service.core.settings",
        "peekOfCode": "DEBUG = os.environ.get('DEBUG', 'False') == 'True'\nALLOWED_HOSTS = ['*']\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',",
        "detail": "services.laboratory-service.core.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "services.laboratory-service.core.settings",
        "description": "services.laboratory-service.core.settings",
        "peekOfCode": "ALLOWED_HOSTS = ['*']\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    # Third-party apps",
        "detail": "services.laboratory-service.core.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "services.laboratory-service.core.settings",
        "description": "services.laboratory-service.core.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    # Third-party apps\n    'rest_framework',\n    'rest_framework_simplejwt',",
        "detail": "services.laboratory-service.core.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "services.laboratory-service.core.settings",
        "description": "services.laboratory-service.core.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'corsheaders.middleware.CorsMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]",
        "detail": "services.laboratory-service.core.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "services.laboratory-service.core.settings",
        "description": "services.laboratory-service.core.settings",
        "peekOfCode": "ROOT_URLCONF = 'core.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',",
        "detail": "services.laboratory-service.core.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "services.laboratory-service.core.settings",
        "description": "services.laboratory-service.core.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "services.laboratory-service.core.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "services.laboratory-service.core.settings",
        "description": "services.laboratory-service.core.settings",
        "peekOfCode": "WSGI_APPLICATION = 'core.wsgi.application'\n# Database\n# https://docs.djangoproject.com/en/4.2/ref/settings/#databases\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql',\n        'NAME': os.environ.get('DATABASE_NAME', 'healthcare_laboratory'),\n        'USER': os.environ.get('DATABASE_USER', 'postgres'),\n        'PASSWORD': os.environ.get('DATABASE_PASSWORD', 'postgres'),\n        'HOST': os.environ.get('DATABASE_HOST', 'postgres'),",
        "detail": "services.laboratory-service.core.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "services.laboratory-service.core.settings",
        "description": "services.laboratory-service.core.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql',\n        'NAME': os.environ.get('DATABASE_NAME', 'healthcare_laboratory'),\n        'USER': os.environ.get('DATABASE_USER', 'postgres'),\n        'PASSWORD': os.environ.get('DATABASE_PASSWORD', 'postgres'),\n        'HOST': os.environ.get('DATABASE_HOST', 'postgres'),\n        'PORT': os.environ.get('DATABASE_PORT', '5432'),\n    }\n}",
        "detail": "services.laboratory-service.core.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "services.laboratory-service.core.settings",
        "description": "services.laboratory-service.core.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "services.laboratory-service.core.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "services.laboratory-service.core.settings",
        "description": "services.laboratory-service.core.settings",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = 'static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\n# Media files\nMEDIA_URL = '/media/'",
        "detail": "services.laboratory-service.core.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "services.laboratory-service.core.settings",
        "description": "services.laboratory-service.core.settings",
        "peekOfCode": "TIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = 'static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\n# Media files\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')",
        "detail": "services.laboratory-service.core.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "services.laboratory-service.core.settings",
        "description": "services.laboratory-service.core.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = 'static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\n# Media files\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\n# Default primary key field type",
        "detail": "services.laboratory-service.core.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "services.laboratory-service.core.settings",
        "description": "services.laboratory-service.core.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = 'static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\n# Media files\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field",
        "detail": "services.laboratory-service.core.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "services.laboratory-service.core.settings",
        "description": "services.laboratory-service.core.settings",
        "peekOfCode": "STATIC_URL = 'static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\n# Media files\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# REST Framework settings\nREST_FRAMEWORK = {",
        "detail": "services.laboratory-service.core.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_ROOT",
        "kind": 5,
        "importPath": "services.laboratory-service.core.settings",
        "description": "services.laboratory-service.core.settings",
        "peekOfCode": "STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\n# Media files\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# REST Framework settings\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (",
        "detail": "services.laboratory-service.core.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_URL",
        "kind": 5,
        "importPath": "services.laboratory-service.core.settings",
        "description": "services.laboratory-service.core.settings",
        "peekOfCode": "MEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# REST Framework settings\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'common_auth.authentication.ServiceAuthentication',\n        'rest_framework_simplejwt.authentication.JWTAuthentication',",
        "detail": "services.laboratory-service.core.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_ROOT",
        "kind": 5,
        "importPath": "services.laboratory-service.core.settings",
        "description": "services.laboratory-service.core.settings",
        "peekOfCode": "MEDIA_ROOT = os.path.join(BASE_DIR, 'media')\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# REST Framework settings\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'common_auth.authentication.ServiceAuthentication',\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n    ),",
        "detail": "services.laboratory-service.core.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "services.laboratory-service.core.settings",
        "description": "services.laboratory-service.core.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# REST Framework settings\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'common_auth.authentication.ServiceAuthentication',\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n    ),\n    'DEFAULT_PERMISSION_CLASSES': [\n        'common_auth.permissions.IsAuthenticated',\n        'rest_framework.permissions.IsAuthenticated',",
        "detail": "services.laboratory-service.core.settings",
        "documentation": {}
    },
    {
        "label": "REST_FRAMEWORK",
        "kind": 5,
        "importPath": "services.laboratory-service.core.settings",
        "description": "services.laboratory-service.core.settings",
        "peekOfCode": "REST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'common_auth.authentication.ServiceAuthentication',\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n    ),\n    'DEFAULT_PERMISSION_CLASSES': [\n        'common_auth.permissions.IsAuthenticated',\n        'rest_framework.permissions.IsAuthenticated',\n    ],\n    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',",
        "detail": "services.laboratory-service.core.settings",
        "documentation": {}
    },
    {
        "label": "CORS_ALLOW_ALL_ORIGINS",
        "kind": 5,
        "importPath": "services.laboratory-service.core.settings",
        "description": "services.laboratory-service.core.settings",
        "peekOfCode": "CORS_ALLOW_ALL_ORIGINS = True\nCORS_ALLOW_CREDENTIALS = True\n# Common Auth settings\nREDIS_URL = os.environ.get('REDIS_URL', 'redis://redis:6379/0')\nJWT_SECRET = os.environ.get('JWT_SECRET', SECRET_KEY)\nACCESS_TOKEN_LIFETIME = timedelta(minutes=60)\nREFRESH_TOKEN_LIFETIME = timedelta(days=7)\nROTATE_REFRESH_TOKENS = False\nSESSION_TTL = 86400  # 1 day in seconds\nMAX_SESSIONS_PER_USER = 5",
        "detail": "services.laboratory-service.core.settings",
        "documentation": {}
    },
    {
        "label": "CORS_ALLOW_CREDENTIALS",
        "kind": 5,
        "importPath": "services.laboratory-service.core.settings",
        "description": "services.laboratory-service.core.settings",
        "peekOfCode": "CORS_ALLOW_CREDENTIALS = True\n# Common Auth settings\nREDIS_URL = os.environ.get('REDIS_URL', 'redis://redis:6379/0')\nJWT_SECRET = os.environ.get('JWT_SECRET', SECRET_KEY)\nACCESS_TOKEN_LIFETIME = timedelta(minutes=60)\nREFRESH_TOKEN_LIFETIME = timedelta(days=7)\nROTATE_REFRESH_TOKENS = False\nSESSION_TTL = 86400  # 1 day in seconds\nMAX_SESSIONS_PER_USER = 5\nVERIFY_JWT_SIGNATURE = True",
        "detail": "services.laboratory-service.core.settings",
        "documentation": {}
    },
    {
        "label": "REDIS_URL",
        "kind": 5,
        "importPath": "services.laboratory-service.core.settings",
        "description": "services.laboratory-service.core.settings",
        "peekOfCode": "REDIS_URL = os.environ.get('REDIS_URL', 'redis://redis:6379/0')\nJWT_SECRET = os.environ.get('JWT_SECRET', SECRET_KEY)\nACCESS_TOKEN_LIFETIME = timedelta(minutes=60)\nREFRESH_TOKEN_LIFETIME = timedelta(days=7)\nROTATE_REFRESH_TOKENS = False\nSESSION_TTL = 86400  # 1 day in seconds\nMAX_SESSIONS_PER_USER = 5\nVERIFY_JWT_SIGNATURE = True\n# Swagger UI JWT auth configuration\nSWAGGER_SETTINGS = {",
        "detail": "services.laboratory-service.core.settings",
        "documentation": {}
    },
    {
        "label": "JWT_SECRET",
        "kind": 5,
        "importPath": "services.laboratory-service.core.settings",
        "description": "services.laboratory-service.core.settings",
        "peekOfCode": "JWT_SECRET = os.environ.get('JWT_SECRET', SECRET_KEY)\nACCESS_TOKEN_LIFETIME = timedelta(minutes=60)\nREFRESH_TOKEN_LIFETIME = timedelta(days=7)\nROTATE_REFRESH_TOKENS = False\nSESSION_TTL = 86400  # 1 day in seconds\nMAX_SESSIONS_PER_USER = 5\nVERIFY_JWT_SIGNATURE = True\n# Swagger UI JWT auth configuration\nSWAGGER_SETTINGS = {\n    'SECURITY_DEFINITIONS': {",
        "detail": "services.laboratory-service.core.settings",
        "documentation": {}
    },
    {
        "label": "ACCESS_TOKEN_LIFETIME",
        "kind": 5,
        "importPath": "services.laboratory-service.core.settings",
        "description": "services.laboratory-service.core.settings",
        "peekOfCode": "ACCESS_TOKEN_LIFETIME = timedelta(minutes=60)\nREFRESH_TOKEN_LIFETIME = timedelta(days=7)\nROTATE_REFRESH_TOKENS = False\nSESSION_TTL = 86400  # 1 day in seconds\nMAX_SESSIONS_PER_USER = 5\nVERIFY_JWT_SIGNATURE = True\n# Swagger UI JWT auth configuration\nSWAGGER_SETTINGS = {\n    'SECURITY_DEFINITIONS': {\n        'Bearer': {",
        "detail": "services.laboratory-service.core.settings",
        "documentation": {}
    },
    {
        "label": "REFRESH_TOKEN_LIFETIME",
        "kind": 5,
        "importPath": "services.laboratory-service.core.settings",
        "description": "services.laboratory-service.core.settings",
        "peekOfCode": "REFRESH_TOKEN_LIFETIME = timedelta(days=7)\nROTATE_REFRESH_TOKENS = False\nSESSION_TTL = 86400  # 1 day in seconds\nMAX_SESSIONS_PER_USER = 5\nVERIFY_JWT_SIGNATURE = True\n# Swagger UI JWT auth configuration\nSWAGGER_SETTINGS = {\n    'SECURITY_DEFINITIONS': {\n        'Bearer': {\n            'type': 'apiKey',",
        "detail": "services.laboratory-service.core.settings",
        "documentation": {}
    },
    {
        "label": "ROTATE_REFRESH_TOKENS",
        "kind": 5,
        "importPath": "services.laboratory-service.core.settings",
        "description": "services.laboratory-service.core.settings",
        "peekOfCode": "ROTATE_REFRESH_TOKENS = False\nSESSION_TTL = 86400  # 1 day in seconds\nMAX_SESSIONS_PER_USER = 5\nVERIFY_JWT_SIGNATURE = True\n# Swagger UI JWT auth configuration\nSWAGGER_SETTINGS = {\n    'SECURITY_DEFINITIONS': {\n        'Bearer': {\n            'type': 'apiKey',\n            'in': 'header',",
        "detail": "services.laboratory-service.core.settings",
        "documentation": {}
    },
    {
        "label": "SESSION_TTL",
        "kind": 5,
        "importPath": "services.laboratory-service.core.settings",
        "description": "services.laboratory-service.core.settings",
        "peekOfCode": "SESSION_TTL = 86400  # 1 day in seconds\nMAX_SESSIONS_PER_USER = 5\nVERIFY_JWT_SIGNATURE = True\n# Swagger UI JWT auth configuration\nSWAGGER_SETTINGS = {\n    'SECURITY_DEFINITIONS': {\n        'Bearer': {\n            'type': 'apiKey',\n            'in': 'header',\n            'name': 'Authorization',",
        "detail": "services.laboratory-service.core.settings",
        "documentation": {}
    },
    {
        "label": "MAX_SESSIONS_PER_USER",
        "kind": 5,
        "importPath": "services.laboratory-service.core.settings",
        "description": "services.laboratory-service.core.settings",
        "peekOfCode": "MAX_SESSIONS_PER_USER = 5\nVERIFY_JWT_SIGNATURE = True\n# Swagger UI JWT auth configuration\nSWAGGER_SETTINGS = {\n    'SECURITY_DEFINITIONS': {\n        'Bearer': {\n            'type': 'apiKey',\n            'in': 'header',\n            'name': 'Authorization',\n            'description': 'JWT Authorization header using the Bearer scheme. Example: \"Bearer {token}\"',",
        "detail": "services.laboratory-service.core.settings",
        "documentation": {}
    },
    {
        "label": "VERIFY_JWT_SIGNATURE",
        "kind": 5,
        "importPath": "services.laboratory-service.core.settings",
        "description": "services.laboratory-service.core.settings",
        "peekOfCode": "VERIFY_JWT_SIGNATURE = True\n# Swagger UI JWT auth configuration\nSWAGGER_SETTINGS = {\n    'SECURITY_DEFINITIONS': {\n        'Bearer': {\n            'type': 'apiKey',\n            'in': 'header',\n            'name': 'Authorization',\n            'description': 'JWT Authorization header using the Bearer scheme. Example: \"Bearer {token}\"',\n        },",
        "detail": "services.laboratory-service.core.settings",
        "documentation": {}
    },
    {
        "label": "SWAGGER_SETTINGS",
        "kind": 5,
        "importPath": "services.laboratory-service.core.settings",
        "description": "services.laboratory-service.core.settings",
        "peekOfCode": "SWAGGER_SETTINGS = {\n    'SECURITY_DEFINITIONS': {\n        'Bearer': {\n            'type': 'apiKey',\n            'in': 'header',\n            'name': 'Authorization',\n            'description': 'JWT Authorization header using the Bearer scheme. Example: \"Bearer {token}\"',\n        },\n    },\n    'USE_SESSION_AUTH': False,",
        "detail": "services.laboratory-service.core.settings",
        "documentation": {}
    },
    {
        "label": "schema_view",
        "kind": 5,
        "importPath": "services.laboratory-service.core.urls",
        "description": "services.laboratory-service.core.urls",
        "peekOfCode": "schema_view = get_schema_view(\n    openapi.Info(\n        title=\"Laboratory Service API\",\n        default_version='v1',\n        description=\"API for managing laboratory tests and results\",\n        terms_of_service=\"https://www.example.com/terms/\",\n        contact=openapi.Contact(email=\"contact@example.com\"),\n        license=openapi.License(name=\"BSD License\"),\n    ),\n    public=True,",
        "detail": "services.laboratory-service.core.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "services.laboratory-service.core.urls",
        "description": "services.laboratory-service.core.urls",
        "peekOfCode": "urlpatterns = [\n    path('admin/', admin.site.urls),\n    path('api/', include('laboratory.urls')),\n    path('api/laboratory/', include('laboratory.urls')),  # Thêm đường dẫn phù hợp với API Gateway\n    path('', schema_view.with_ui('swagger', cache_timeout=0), name='schema-swagger-ui'),\n    re_path(r'^laboratory-service(?P<format>\\.json|\\.yaml)$', schema_view.without_ui(cache_timeout=0), name='schema-json'),\n    path('redoc/', schema_view.with_ui('redoc', cache_timeout=0), name='schema-redoc'),\n]",
        "detail": "services.laboratory-service.core.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "services.laboratory-service.core.wsgi",
        "description": "services.laboratory-service.core.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "services.laboratory-service.core.wsgi",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "services.laboratory-service.laboratory.migrations.0001_initial",
        "description": "services.laboratory-service.laboratory.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='LabTest',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('patient_id', models.IntegerField()),",
        "detail": "services.laboratory-service.laboratory.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "TestTypeAdmin",
        "kind": 6,
        "importPath": "services.laboratory-service.laboratory.admin",
        "description": "services.laboratory-service.laboratory.admin",
        "peekOfCode": "class TestTypeAdmin(admin.ModelAdmin):\n    list_display = ('name', 'unit', 'price', 'created_at')\n    search_fields = ('name', 'description')\n    list_filter = ('unit',)\n@admin.register(LabTest)\nclass LabTestAdmin(admin.ModelAdmin):\n    list_display = ('id', 'patient_id', 'doctor_id', 'test_type', 'status', 'ordered_date', 'scheduled_date')\n    list_filter = ('status', 'test_type')\n    search_fields = ('patient_id', 'doctor_id')\n    date_hierarchy = 'ordered_date'",
        "detail": "services.laboratory-service.laboratory.admin",
        "documentation": {}
    },
    {
        "label": "LabTestAdmin",
        "kind": 6,
        "importPath": "services.laboratory-service.laboratory.admin",
        "description": "services.laboratory-service.laboratory.admin",
        "peekOfCode": "class LabTestAdmin(admin.ModelAdmin):\n    list_display = ('id', 'patient_id', 'doctor_id', 'test_type', 'status', 'ordered_date', 'scheduled_date')\n    list_filter = ('status', 'test_type')\n    search_fields = ('patient_id', 'doctor_id')\n    date_hierarchy = 'ordered_date'\n@admin.register(TestResult)\nclass TestResultAdmin(admin.ModelAdmin):\n    list_display = ('id', 'lab_test', 'technician_id', 'is_abnormal', 'created_at')\n    list_filter = ('is_abnormal',)\n    search_fields = ('lab_test__patient_id', 'technician_id')",
        "detail": "services.laboratory-service.laboratory.admin",
        "documentation": {}
    },
    {
        "label": "TestResultAdmin",
        "kind": 6,
        "importPath": "services.laboratory-service.laboratory.admin",
        "description": "services.laboratory-service.laboratory.admin",
        "peekOfCode": "class TestResultAdmin(admin.ModelAdmin):\n    list_display = ('id', 'lab_test', 'technician_id', 'is_abnormal', 'created_at')\n    list_filter = ('is_abnormal',)\n    search_fields = ('lab_test__patient_id', 'technician_id')\n@admin.register(SampleCollection)\nclass SampleCollectionAdmin(admin.ModelAdmin):\n    list_display = ('id', 'lab_test', 'collector_id', 'sample_type', 'collection_date', 'sample_id')\n    list_filter = ('sample_type',)\n    search_fields = ('sample_id', 'lab_test__patient_id')\n@admin.register(Notification)",
        "detail": "services.laboratory-service.laboratory.admin",
        "documentation": {}
    },
    {
        "label": "SampleCollectionAdmin",
        "kind": 6,
        "importPath": "services.laboratory-service.laboratory.admin",
        "description": "services.laboratory-service.laboratory.admin",
        "peekOfCode": "class SampleCollectionAdmin(admin.ModelAdmin):\n    list_display = ('id', 'lab_test', 'collector_id', 'sample_type', 'collection_date', 'sample_id')\n    list_filter = ('sample_type',)\n    search_fields = ('sample_id', 'lab_test__patient_id')\n@admin.register(Notification)\nclass NotificationAdmin(admin.ModelAdmin):\n    list_display = ('id', 'recipient_id', 'recipient_type', 'notification_type', 'is_read', 'created_at')\n    list_filter = ('recipient_type', 'notification_type', 'is_read')\n    search_fields = ('recipient_id', 'message')\n    date_hierarchy = 'created_at'",
        "detail": "services.laboratory-service.laboratory.admin",
        "documentation": {}
    },
    {
        "label": "NotificationAdmin",
        "kind": 6,
        "importPath": "services.laboratory-service.laboratory.admin",
        "description": "services.laboratory-service.laboratory.admin",
        "peekOfCode": "class NotificationAdmin(admin.ModelAdmin):\n    list_display = ('id', 'recipient_id', 'recipient_type', 'notification_type', 'is_read', 'created_at')\n    list_filter = ('recipient_type', 'notification_type', 'is_read')\n    search_fields = ('recipient_id', 'message')\n    date_hierarchy = 'created_at'",
        "detail": "services.laboratory-service.laboratory.admin",
        "documentation": {}
    },
    {
        "label": "LaboratoryConfig",
        "kind": 6,
        "importPath": "services.laboratory-service.laboratory.apps",
        "description": "services.laboratory-service.laboratory.apps",
        "peekOfCode": "class LaboratoryConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'laboratory'",
        "detail": "services.laboratory-service.laboratory.apps",
        "documentation": {}
    },
    {
        "label": "CustomJWTAuthentication",
        "kind": 5,
        "importPath": "services.laboratory-service.laboratory.authentication",
        "description": "services.laboratory-service.laboratory.authentication",
        "peekOfCode": "CustomJWTAuthentication = ServiceAuthentication",
        "detail": "services.laboratory-service.laboratory.authentication",
        "documentation": {}
    },
    {
        "label": "create_invoice_from_lab_test",
        "kind": 2,
        "importPath": "services.laboratory-service.laboratory.integrations",
        "description": "services.laboratory-service.laboratory.integrations",
        "peekOfCode": "def create_invoice_from_lab_test(lab_test, token=None):\n    \"\"\"\n    Create an invoice in the Billing Service for a completed lab test.\n    Args:\n        lab_test: The LabTest object\n        token (str, optional): JWT token for authentication\n    Returns:\n        dict or None: Invoice data or None if creation failed\n    \"\"\"\n    data = {",
        "detail": "services.laboratory-service.laboratory.integrations",
        "documentation": {}
    },
    {
        "label": "send_notification",
        "kind": 2,
        "importPath": "services.laboratory-service.laboratory.integrations",
        "description": "services.laboratory-service.laboratory.integrations",
        "peekOfCode": "def send_notification(user_id, notification_type, message, additional_data=None, token=None):\n    \"\"\"\n    Send a notification to a user.\n    Args:\n        user_id (int): ID of the user to notify\n        notification_type (str): Type of notification\n        message (str): Notification message\n        additional_data (dict, optional): Additional data for the notification\n        token (str, optional): JWT token for authentication\n    Returns:",
        "detail": "services.laboratory-service.laboratory.integrations",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "services.laboratory-service.laboratory.integrations",
        "description": "services.laboratory-service.laboratory.integrations",
        "peekOfCode": "logger = logging.getLogger(__name__)\n# Initialize service clients\nbilling_client = ServiceClient('BILLING_SERVICE')\nnotification_client = ServiceClient('NOTIFICATION_SERVICE')\n# This function is replaced by ServiceClient\ndef create_invoice_from_lab_test(lab_test, token=None):\n    \"\"\"\n    Create an invoice in the Billing Service for a completed lab test.\n    Args:\n        lab_test: The LabTest object",
        "detail": "services.laboratory-service.laboratory.integrations",
        "documentation": {}
    },
    {
        "label": "billing_client",
        "kind": 5,
        "importPath": "services.laboratory-service.laboratory.integrations",
        "description": "services.laboratory-service.laboratory.integrations",
        "peekOfCode": "billing_client = ServiceClient('BILLING_SERVICE')\nnotification_client = ServiceClient('NOTIFICATION_SERVICE')\n# This function is replaced by ServiceClient\ndef create_invoice_from_lab_test(lab_test, token=None):\n    \"\"\"\n    Create an invoice in the Billing Service for a completed lab test.\n    Args:\n        lab_test: The LabTest object\n        token (str, optional): JWT token for authentication\n    Returns:",
        "detail": "services.laboratory-service.laboratory.integrations",
        "documentation": {}
    },
    {
        "label": "notification_client",
        "kind": 5,
        "importPath": "services.laboratory-service.laboratory.integrations",
        "description": "services.laboratory-service.laboratory.integrations",
        "peekOfCode": "notification_client = ServiceClient('NOTIFICATION_SERVICE')\n# This function is replaced by ServiceClient\ndef create_invoice_from_lab_test(lab_test, token=None):\n    \"\"\"\n    Create an invoice in the Billing Service for a completed lab test.\n    Args:\n        lab_test: The LabTest object\n        token (str, optional): JWT token for authentication\n    Returns:\n        dict or None: Invoice data or None if creation failed",
        "detail": "services.laboratory-service.laboratory.integrations",
        "documentation": {}
    },
    {
        "label": "TestType",
        "kind": 6,
        "importPath": "services.laboratory-service.laboratory.models",
        "description": "services.laboratory-service.laboratory.models",
        "peekOfCode": "class TestType(models.Model):\n    \"\"\"\n    Model representing different types of laboratory tests.\n    \"\"\"\n    name = models.CharField(max_length=100)\n    description = models.TextField()\n    preparation_instructions = models.TextField(blank=True, null=True)\n    normal_range = models.CharField(max_length=255, blank=True, null=True)\n    unit = models.CharField(max_length=50, blank=True, null=True)\n    price = models.DecimalField(max_digits=10, decimal_places=2)",
        "detail": "services.laboratory-service.laboratory.models",
        "documentation": {}
    },
    {
        "label": "LabTest",
        "kind": 6,
        "importPath": "services.laboratory-service.laboratory.models",
        "description": "services.laboratory-service.laboratory.models",
        "peekOfCode": "class LabTest(models.Model):\n    \"\"\"\n    Model representing a laboratory test ordered for a patient.\n    \"\"\"\n    class Status(models.TextChoices):\n        ORDERED = 'ORDERED', _('Ordered')\n        SAMPLE_COLLECTED = 'SAMPLE_COLLECTED', _('Sample Collected')\n        IN_PROGRESS = 'IN_PROGRESS', _('In Progress')\n        COMPLETED = 'COMPLETED', _('Completed')\n        CANCELLED = 'CANCELLED', _('Cancelled')",
        "detail": "services.laboratory-service.laboratory.models",
        "documentation": {}
    },
    {
        "label": "TestResult",
        "kind": 6,
        "importPath": "services.laboratory-service.laboratory.models",
        "description": "services.laboratory-service.laboratory.models",
        "peekOfCode": "class TestResult(models.Model):\n    \"\"\"\n    Model representing the results of a laboratory test.\n    \"\"\"\n    lab_test = models.OneToOneField(LabTest, on_delete=models.CASCADE, related_name='result')\n    technician_id = models.IntegerField()\n    result_value = models.TextField()\n    is_abnormal = models.BooleanField(default=False)\n    comments = models.TextField(blank=True, null=True)\n    attachment = models.FileField(upload_to='test_results/', null=True, blank=True)",
        "detail": "services.laboratory-service.laboratory.models",
        "documentation": {}
    },
    {
        "label": "SampleCollection",
        "kind": 6,
        "importPath": "services.laboratory-service.laboratory.models",
        "description": "services.laboratory-service.laboratory.models",
        "peekOfCode": "class SampleCollection(models.Model):\n    \"\"\"\n    Model representing the collection of samples for laboratory tests.\n    \"\"\"\n    class SampleType(models.TextChoices):\n        BLOOD = 'BLOOD', _('Blood')\n        URINE = 'URINE', _('Urine')\n        STOOL = 'STOOL', _('Stool')\n        SWAB = 'SWAB', _('Swab')\n        TISSUE = 'TISSUE', _('Tissue')",
        "detail": "services.laboratory-service.laboratory.models",
        "documentation": {}
    },
    {
        "label": "Notification",
        "kind": 6,
        "importPath": "services.laboratory-service.laboratory.models",
        "description": "services.laboratory-service.laboratory.models",
        "peekOfCode": "class Notification(models.Model):\n    \"\"\"\n    Model representing notifications for laboratory tests.\n    \"\"\"\n    class NotificationType(models.TextChoices):\n        TEST_ORDERED = 'TEST_ORDERED', _('Test Ordered')\n        SAMPLE_COLLECTED = 'SAMPLE_COLLECTED', _('Sample Collected')\n        RESULT_READY = 'RESULT_READY', _('Result Ready')\n        TEST_CANCELLED = 'TEST_CANCELLED', _('Test Cancelled')\n    lab_test = models.ForeignKey(LabTest, on_delete=models.CASCADE, related_name='notifications')",
        "detail": "services.laboratory-service.laboratory.models",
        "documentation": {}
    },
    {
        "label": "CanViewLabTests",
        "kind": 5,
        "importPath": "services.laboratory-service.laboratory.permissions",
        "description": "services.laboratory-service.laboratory.permissions",
        "peekOfCode": "CanViewLabTests = LaboratoryPermissions.CanViewLabTests\nCanOrderLabTest = LaboratoryPermissions.CanOrderLabTest\nCanUpdateLabTest = LaboratoryPermissions.CanUpdateLabTest\nCanCancelLabTest = LaboratoryPermissions.CanCancelLabTest\nCanEnterLabResults = LaboratoryPermissions.CanEnterLabResults",
        "detail": "services.laboratory-service.laboratory.permissions",
        "documentation": {}
    },
    {
        "label": "CanOrderLabTest",
        "kind": 5,
        "importPath": "services.laboratory-service.laboratory.permissions",
        "description": "services.laboratory-service.laboratory.permissions",
        "peekOfCode": "CanOrderLabTest = LaboratoryPermissions.CanOrderLabTest\nCanUpdateLabTest = LaboratoryPermissions.CanUpdateLabTest\nCanCancelLabTest = LaboratoryPermissions.CanCancelLabTest\nCanEnterLabResults = LaboratoryPermissions.CanEnterLabResults",
        "detail": "services.laboratory-service.laboratory.permissions",
        "documentation": {}
    },
    {
        "label": "CanUpdateLabTest",
        "kind": 5,
        "importPath": "services.laboratory-service.laboratory.permissions",
        "description": "services.laboratory-service.laboratory.permissions",
        "peekOfCode": "CanUpdateLabTest = LaboratoryPermissions.CanUpdateLabTest\nCanCancelLabTest = LaboratoryPermissions.CanCancelLabTest\nCanEnterLabResults = LaboratoryPermissions.CanEnterLabResults",
        "detail": "services.laboratory-service.laboratory.permissions",
        "documentation": {}
    },
    {
        "label": "CanCancelLabTest",
        "kind": 5,
        "importPath": "services.laboratory-service.laboratory.permissions",
        "description": "services.laboratory-service.laboratory.permissions",
        "peekOfCode": "CanCancelLabTest = LaboratoryPermissions.CanCancelLabTest\nCanEnterLabResults = LaboratoryPermissions.CanEnterLabResults",
        "detail": "services.laboratory-service.laboratory.permissions",
        "documentation": {}
    },
    {
        "label": "CanEnterLabResults",
        "kind": 5,
        "importPath": "services.laboratory-service.laboratory.permissions",
        "description": "services.laboratory-service.laboratory.permissions",
        "peekOfCode": "CanEnterLabResults = LaboratoryPermissions.CanEnterLabResults",
        "detail": "services.laboratory-service.laboratory.permissions",
        "documentation": {}
    },
    {
        "label": "TestTypeSerializer",
        "kind": 6,
        "importPath": "services.laboratory-service.laboratory.serializers",
        "description": "services.laboratory-service.laboratory.serializers",
        "peekOfCode": "class TestTypeSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = TestType\n        fields = '__all__'\nclass SampleCollectionSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = SampleCollection\n        fields = '__all__'\nclass TestResultSerializer(serializers.ModelSerializer):\n    class Meta:",
        "detail": "services.laboratory-service.laboratory.serializers",
        "documentation": {}
    },
    {
        "label": "SampleCollectionSerializer",
        "kind": 6,
        "importPath": "services.laboratory-service.laboratory.serializers",
        "description": "services.laboratory-service.laboratory.serializers",
        "peekOfCode": "class SampleCollectionSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = SampleCollection\n        fields = '__all__'\nclass TestResultSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = TestResult\n        fields = '__all__'\nclass TestResultCreateSerializer(serializers.ModelSerializer):\n    class Meta:",
        "detail": "services.laboratory-service.laboratory.serializers",
        "documentation": {}
    },
    {
        "label": "TestResultSerializer",
        "kind": 6,
        "importPath": "services.laboratory-service.laboratory.serializers",
        "description": "services.laboratory-service.laboratory.serializers",
        "peekOfCode": "class TestResultSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = TestResult\n        fields = '__all__'\nclass TestResultCreateSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = TestResult\n        fields = ['lab_test', 'technician_id', 'result_value', 'is_abnormal', 'comments', 'attachment']\n    def create(self, validated_data):\n        # Update the lab test status to COMPLETED when result is created",
        "detail": "services.laboratory-service.laboratory.serializers",
        "documentation": {}
    },
    {
        "label": "TestResultCreateSerializer",
        "kind": 6,
        "importPath": "services.laboratory-service.laboratory.serializers",
        "description": "services.laboratory-service.laboratory.serializers",
        "peekOfCode": "class TestResultCreateSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = TestResult\n        fields = ['lab_test', 'technician_id', 'result_value', 'is_abnormal', 'comments', 'attachment']\n    def create(self, validated_data):\n        # Update the lab test status to COMPLETED when result is created\n        lab_test = validated_data.get('lab_test')\n        lab_test.status = LabTest.Status.COMPLETED\n        lab_test.save()\n        return super().create(validated_data)",
        "detail": "services.laboratory-service.laboratory.serializers",
        "documentation": {}
    },
    {
        "label": "SampleCollectionCreateSerializer",
        "kind": 6,
        "importPath": "services.laboratory-service.laboratory.serializers",
        "description": "services.laboratory-service.laboratory.serializers",
        "peekOfCode": "class SampleCollectionCreateSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = SampleCollection\n        fields = ['lab_test', 'collector_id', 'sample_type', 'sample_id', 'notes']\n    def create(self, validated_data):\n        # Update the lab test status to SAMPLE_COLLECTED when sample is collected\n        lab_test = validated_data.get('lab_test')\n        lab_test.status = LabTest.Status.SAMPLE_COLLECTED\n        lab_test.save()\n        return super().create(validated_data)",
        "detail": "services.laboratory-service.laboratory.serializers",
        "documentation": {}
    },
    {
        "label": "LabTestSerializer",
        "kind": 6,
        "importPath": "services.laboratory-service.laboratory.serializers",
        "description": "services.laboratory-service.laboratory.serializers",
        "peekOfCode": "class LabTestSerializer(serializers.ModelSerializer):\n    test_type_details = TestTypeSerializer(source='test_type', read_only=True)\n    sample_details = SampleCollectionSerializer(source='sample', read_only=True)\n    result_details = TestResultSerializer(source='result', read_only=True)\n    status_display = serializers.CharField(source='get_status_display', read_only=True)\n    class Meta:\n        model = LabTest\n        fields = '__all__'\nclass LabTestCreateSerializer(serializers.ModelSerializer):\n    class Meta:",
        "detail": "services.laboratory-service.laboratory.serializers",
        "documentation": {}
    },
    {
        "label": "LabTestCreateSerializer",
        "kind": 6,
        "importPath": "services.laboratory-service.laboratory.serializers",
        "description": "services.laboratory-service.laboratory.serializers",
        "peekOfCode": "class LabTestCreateSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = LabTest\n        fields = ['id', 'patient_id', 'doctor_id', 'test_type', 'scheduled_date', 'notes']\nclass NotificationSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Notification\n        fields = '__all__'",
        "detail": "services.laboratory-service.laboratory.serializers",
        "documentation": {}
    },
    {
        "label": "NotificationSerializer",
        "kind": 6,
        "importPath": "services.laboratory-service.laboratory.serializers",
        "description": "services.laboratory-service.laboratory.serializers",
        "peekOfCode": "class NotificationSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Notification\n        fields = '__all__'",
        "detail": "services.laboratory-service.laboratory.serializers",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "services.laboratory-service.laboratory.urls",
        "description": "services.laboratory-service.laboratory.urls",
        "peekOfCode": "router = DefaultRouter()\nrouter.register(r'test-types', TestTypeViewSet)\nrouter.register(r'lab-tests', LabTestViewSet)\nrouter.register(r'test-results', TestResultViewSet)\nrouter.register(r'sample-collections', SampleCollectionViewSet)\nrouter.register(r'notifications', NotificationViewSet)\nurlpatterns = [\n    path('', include(router.urls)),\n]\n# Register health check endpoint",
        "detail": "services.laboratory-service.laboratory.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "services.laboratory-service.laboratory.urls",
        "description": "services.laboratory-service.laboratory.urls",
        "peekOfCode": "urlpatterns = [\n    path('', include(router.urls)),\n]\n# Register health check endpoint\nurlpatterns = register_health_check(urlpatterns)",
        "detail": "services.laboratory-service.laboratory.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "services.laboratory-service.laboratory.urls",
        "description": "services.laboratory-service.laboratory.urls",
        "peekOfCode": "urlpatterns = register_health_check(urlpatterns)",
        "detail": "services.laboratory-service.laboratory.urls",
        "documentation": {}
    },
    {
        "label": "TestTypeViewSet",
        "kind": 6,
        "importPath": "services.laboratory-service.laboratory.views",
        "description": "services.laboratory-service.laboratory.views",
        "peekOfCode": "class TestTypeViewSet(viewsets.ModelViewSet):\n    \"\"\"\n    API endpoint for managing test types.\n    \"\"\"\n    queryset = TestType.objects.all()\n    serializer_class = TestTypeSerializer\n    authentication_classes = [CustomJWTAuthentication]\n    permission_classes = [IsAdmin | IsLabTechnician | IsDoctor]\n    filter_backends = [DjangoFilterBackend, filters.SearchFilter, filters.OrderingFilter]\n    filterset_fields = ['name', 'unit']",
        "detail": "services.laboratory-service.laboratory.views",
        "documentation": {}
    },
    {
        "label": "LabTestViewSet",
        "kind": 6,
        "importPath": "services.laboratory-service.laboratory.views",
        "description": "services.laboratory-service.laboratory.views",
        "peekOfCode": "class LabTestViewSet(viewsets.ModelViewSet):\n    \"\"\"\n    API endpoint for managing laboratory tests.\n    \"\"\"\n    queryset = LabTest.objects.all()\n    serializer_class = LabTestSerializer\n    authentication_classes = [CustomJWTAuthentication]\n    permission_classes = [IsAdmin | IsDoctor | IsLabTechnician | IsPatient]\n    filter_backends = [DjangoFilterBackend, filters.OrderingFilter]\n    filterset_fields = ['patient_id', 'doctor_id', 'test_type', 'status']",
        "detail": "services.laboratory-service.laboratory.views",
        "documentation": {}
    },
    {
        "label": "TestResultViewSet",
        "kind": 6,
        "importPath": "services.laboratory-service.laboratory.views",
        "description": "services.laboratory-service.laboratory.views",
        "peekOfCode": "class TestResultViewSet(viewsets.ModelViewSet):\n    \"\"\"\n    API endpoint for managing test results.\n    \"\"\"\n    queryset = TestResult.objects.all()\n    serializer_class = TestResultSerializer\n    authentication_classes = [CustomJWTAuthentication]\n    permission_classes = [IsAdmin | IsLabTechnician | IsDoctor | IsPatient]\n    filter_backends = [DjangoFilterBackend]\n    filterset_fields = ['lab_test', 'technician_id', 'is_abnormal']",
        "detail": "services.laboratory-service.laboratory.views",
        "documentation": {}
    },
    {
        "label": "SampleCollectionViewSet",
        "kind": 6,
        "importPath": "services.laboratory-service.laboratory.views",
        "description": "services.laboratory-service.laboratory.views",
        "peekOfCode": "class SampleCollectionViewSet(viewsets.ModelViewSet):\n    \"\"\"\n    API endpoint for managing sample collections.\n    \"\"\"\n    queryset = SampleCollection.objects.all()\n    serializer_class = SampleCollectionSerializer\n    authentication_classes = [CustomJWTAuthentication]\n    permission_classes = [IsAdmin | IsLabTechnician | IsNurse]\n    filter_backends = [DjangoFilterBackend]\n    filterset_fields = ['lab_test', 'collector_id', 'sample_type']",
        "detail": "services.laboratory-service.laboratory.views",
        "documentation": {}
    },
    {
        "label": "NotificationViewSet",
        "kind": 6,
        "importPath": "services.laboratory-service.laboratory.views",
        "description": "services.laboratory-service.laboratory.views",
        "peekOfCode": "class NotificationViewSet(viewsets.ModelViewSet):\n    \"\"\"\n    API endpoint for managing notifications.\n    \"\"\"\n    queryset = Notification.objects.all()\n    serializer_class = NotificationSerializer\n    authentication_classes = [CustomJWTAuthentication]\n    permission_classes = [IsAdmin | IsDoctor | IsLabTechnician | IsPatient | IsNurse]\n    filter_backends = [DjangoFilterBackend, filters.OrderingFilter]\n    filterset_fields = ['recipient_id', 'recipient_type', 'notification_type', 'is_read']",
        "detail": "services.laboratory-service.laboratory.views",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "services.laboratory-service.laboratory.views",
        "description": "services.laboratory-service.laboratory.views",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass TestTypeViewSet(viewsets.ModelViewSet):\n    \"\"\"\n    API endpoint for managing test types.\n    \"\"\"\n    queryset = TestType.objects.all()\n    serializer_class = TestTypeSerializer\n    authentication_classes = [CustomJWTAuthentication]\n    permission_classes = [IsAdmin | IsLabTechnician | IsDoctor]\n    filter_backends = [DjangoFilterBackend, filters.SearchFilter, filters.OrderingFilter]",
        "detail": "services.laboratory-service.laboratory.views",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "services.laboratory-service.manage",
        "description": "services.laboratory-service.manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'core.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed?\"\n        ) from exc\n    execute_from_command_line(sys.argv)",
        "detail": "services.laboratory-service.manage",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "services.medical-record-service.core.asgi",
        "description": "services.medical-record-service.core.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "services.medical-record-service.core.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "services.medical-record-service.core.settings",
        "description": "services.medical-record-service.core.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure-key')\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = os.environ.get('DEBUG', 'False') == 'True'\nALLOWED_HOSTS = ['*']\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',",
        "detail": "services.medical-record-service.core.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "services.medical-record-service.core.settings",
        "description": "services.medical-record-service.core.settings",
        "peekOfCode": "SECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure-key')\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = os.environ.get('DEBUG', 'False') == 'True'\nALLOWED_HOSTS = ['*']\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',",
        "detail": "services.medical-record-service.core.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "services.medical-record-service.core.settings",
        "description": "services.medical-record-service.core.settings",
        "peekOfCode": "DEBUG = os.environ.get('DEBUG', 'False') == 'True'\nALLOWED_HOSTS = ['*']\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',",
        "detail": "services.medical-record-service.core.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "services.medical-record-service.core.settings",
        "description": "services.medical-record-service.core.settings",
        "peekOfCode": "ALLOWED_HOSTS = ['*']\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    # Third-party apps",
        "detail": "services.medical-record-service.core.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "services.medical-record-service.core.settings",
        "description": "services.medical-record-service.core.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    # Third-party apps\n    'rest_framework',\n    'rest_framework_simplejwt',",
        "detail": "services.medical-record-service.core.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "services.medical-record-service.core.settings",
        "description": "services.medical-record-service.core.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'corsheaders.middleware.CorsMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n    'records.middleware.ServiceAPIKeyMiddleware',",
        "detail": "services.medical-record-service.core.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "services.medical-record-service.core.settings",
        "description": "services.medical-record-service.core.settings",
        "peekOfCode": "ROOT_URLCONF = 'core.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',",
        "detail": "services.medical-record-service.core.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "services.medical-record-service.core.settings",
        "description": "services.medical-record-service.core.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "services.medical-record-service.core.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "services.medical-record-service.core.settings",
        "description": "services.medical-record-service.core.settings",
        "peekOfCode": "WSGI_APPLICATION = 'core.wsgi.application'\n# Database\n# https://docs.djangoproject.com/en/4.2/ref/settings/#databases\nDATABASES = {\n    'default': dj_database_url.config(\n        default=os.environ.get('DATABASE_URL', 'postgres://postgres:postgres@postgres:5432/healthcare_medical'),\n        conn_max_age=600,\n    )\n}\n# Password validation",
        "detail": "services.medical-record-service.core.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "services.medical-record-service.core.settings",
        "description": "services.medical-record-service.core.settings",
        "peekOfCode": "DATABASES = {\n    'default': dj_database_url.config(\n        default=os.environ.get('DATABASE_URL', 'postgres://postgres:postgres@postgres:5432/healthcare_medical'),\n        conn_max_age=600,\n    )\n}\n# Password validation\n# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    {",
        "detail": "services.medical-record-service.core.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "services.medical-record-service.core.settings",
        "description": "services.medical-record-service.core.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "services.medical-record-service.core.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "services.medical-record-service.core.settings",
        "description": "services.medical-record-service.core.settings",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = 'static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field",
        "detail": "services.medical-record-service.core.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "services.medical-record-service.core.settings",
        "description": "services.medical-record-service.core.settings",
        "peekOfCode": "TIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = 'static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "services.medical-record-service.core.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "services.medical-record-service.core.settings",
        "description": "services.medical-record-service.core.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = 'static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# REST Framework settings",
        "detail": "services.medical-record-service.core.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "services.medical-record-service.core.settings",
        "description": "services.medical-record-service.core.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = 'static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# REST Framework settings\nREST_FRAMEWORK = {",
        "detail": "services.medical-record-service.core.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "services.medical-record-service.core.settings",
        "description": "services.medical-record-service.core.settings",
        "peekOfCode": "STATIC_URL = 'static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# REST Framework settings\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'common_auth.authentication.ServiceAuthentication',\n        'rest_framework_simplejwt.authentication.JWTAuthentication',",
        "detail": "services.medical-record-service.core.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_ROOT",
        "kind": 5,
        "importPath": "services.medical-record-service.core.settings",
        "description": "services.medical-record-service.core.settings",
        "peekOfCode": "STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# REST Framework settings\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'common_auth.authentication.ServiceAuthentication',\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n    ),",
        "detail": "services.medical-record-service.core.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "services.medical-record-service.core.settings",
        "description": "services.medical-record-service.core.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# REST Framework settings\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'common_auth.authentication.ServiceAuthentication',\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n    ),\n    'DEFAULT_PERMISSION_CLASSES': [\n        'common_auth.permissions.IsAuthenticated',\n        'rest_framework.permissions.IsAuthenticated',",
        "detail": "services.medical-record-service.core.settings",
        "documentation": {}
    },
    {
        "label": "REST_FRAMEWORK",
        "kind": 5,
        "importPath": "services.medical-record-service.core.settings",
        "description": "services.medical-record-service.core.settings",
        "peekOfCode": "REST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'common_auth.authentication.ServiceAuthentication',\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n    ),\n    'DEFAULT_PERMISSION_CLASSES': [\n        'common_auth.permissions.IsAuthenticated',\n        'rest_framework.permissions.IsAuthenticated',\n    ],\n}",
        "detail": "services.medical-record-service.core.settings",
        "documentation": {}
    },
    {
        "label": "CORS_ALLOW_ALL_ORIGINS",
        "kind": 5,
        "importPath": "services.medical-record-service.core.settings",
        "description": "services.medical-record-service.core.settings",
        "peekOfCode": "CORS_ALLOW_ALL_ORIGINS = True\n# Redis settings\nREDIS_URL = os.environ.get('REDIS_URL', 'redis://redis:6379/0')\n# Celery settings\nCELERY_BROKER_URL = REDIS_URL\nCELERY_RESULT_BACKEND = REDIS_URL\nCELERY_ACCEPT_CONTENT = ['json']\nCELERY_TASK_SERIALIZER = 'json'\nCELERY_RESULT_SERIALIZER = 'json'\nCELERY_TIMEZONE = TIME_ZONE",
        "detail": "services.medical-record-service.core.settings",
        "documentation": {}
    },
    {
        "label": "REDIS_URL",
        "kind": 5,
        "importPath": "services.medical-record-service.core.settings",
        "description": "services.medical-record-service.core.settings",
        "peekOfCode": "REDIS_URL = os.environ.get('REDIS_URL', 'redis://redis:6379/0')\n# Celery settings\nCELERY_BROKER_URL = REDIS_URL\nCELERY_RESULT_BACKEND = REDIS_URL\nCELERY_ACCEPT_CONTENT = ['json']\nCELERY_TASK_SERIALIZER = 'json'\nCELERY_RESULT_SERIALIZER = 'json'\nCELERY_TIMEZONE = TIME_ZONE\n# API Gateway URL\nAPI_GATEWAY_URL = os.environ.get('API_GATEWAY_URL', 'http://api-gateway:4000')",
        "detail": "services.medical-record-service.core.settings",
        "documentation": {}
    },
    {
        "label": "CELERY_BROKER_URL",
        "kind": 5,
        "importPath": "services.medical-record-service.core.settings",
        "description": "services.medical-record-service.core.settings",
        "peekOfCode": "CELERY_BROKER_URL = REDIS_URL\nCELERY_RESULT_BACKEND = REDIS_URL\nCELERY_ACCEPT_CONTENT = ['json']\nCELERY_TASK_SERIALIZER = 'json'\nCELERY_RESULT_SERIALIZER = 'json'\nCELERY_TIMEZONE = TIME_ZONE\n# API Gateway URL\nAPI_GATEWAY_URL = os.environ.get('API_GATEWAY_URL', 'http://api-gateway:4000')\n# Service API Keys\nSERVICE_API_KEYS = {",
        "detail": "services.medical-record-service.core.settings",
        "documentation": {}
    },
    {
        "label": "CELERY_RESULT_BACKEND",
        "kind": 5,
        "importPath": "services.medical-record-service.core.settings",
        "description": "services.medical-record-service.core.settings",
        "peekOfCode": "CELERY_RESULT_BACKEND = REDIS_URL\nCELERY_ACCEPT_CONTENT = ['json']\nCELERY_TASK_SERIALIZER = 'json'\nCELERY_RESULT_SERIALIZER = 'json'\nCELERY_TIMEZONE = TIME_ZONE\n# API Gateway URL\nAPI_GATEWAY_URL = os.environ.get('API_GATEWAY_URL', 'http://api-gateway:4000')\n# Service API Keys\nSERVICE_API_KEYS = {\n    'pharmacy-service': os.environ.get('PHARMACY_SERVICE_API_KEY', 'pharmacy-service-api-key'),",
        "detail": "services.medical-record-service.core.settings",
        "documentation": {}
    },
    {
        "label": "CELERY_ACCEPT_CONTENT",
        "kind": 5,
        "importPath": "services.medical-record-service.core.settings",
        "description": "services.medical-record-service.core.settings",
        "peekOfCode": "CELERY_ACCEPT_CONTENT = ['json']\nCELERY_TASK_SERIALIZER = 'json'\nCELERY_RESULT_SERIALIZER = 'json'\nCELERY_TIMEZONE = TIME_ZONE\n# API Gateway URL\nAPI_GATEWAY_URL = os.environ.get('API_GATEWAY_URL', 'http://api-gateway:4000')\n# Service API Keys\nSERVICE_API_KEYS = {\n    'pharmacy-service': os.environ.get('PHARMACY_SERVICE_API_KEY', 'pharmacy-service-api-key'),\n    'appointment-service': os.environ.get('APPOINTMENT_SERVICE_API_KEY', 'appointment-service-api-key'),",
        "detail": "services.medical-record-service.core.settings",
        "documentation": {}
    },
    {
        "label": "CELERY_TASK_SERIALIZER",
        "kind": 5,
        "importPath": "services.medical-record-service.core.settings",
        "description": "services.medical-record-service.core.settings",
        "peekOfCode": "CELERY_TASK_SERIALIZER = 'json'\nCELERY_RESULT_SERIALIZER = 'json'\nCELERY_TIMEZONE = TIME_ZONE\n# API Gateway URL\nAPI_GATEWAY_URL = os.environ.get('API_GATEWAY_URL', 'http://api-gateway:4000')\n# Service API Keys\nSERVICE_API_KEYS = {\n    'pharmacy-service': os.environ.get('PHARMACY_SERVICE_API_KEY', 'pharmacy-service-api-key'),\n    'appointment-service': os.environ.get('APPOINTMENT_SERVICE_API_KEY', 'appointment-service-api-key'),\n    'user-service': os.environ.get('USER_SERVICE_API_KEY', 'user-service-api-key'),",
        "detail": "services.medical-record-service.core.settings",
        "documentation": {}
    },
    {
        "label": "CELERY_RESULT_SERIALIZER",
        "kind": 5,
        "importPath": "services.medical-record-service.core.settings",
        "description": "services.medical-record-service.core.settings",
        "peekOfCode": "CELERY_RESULT_SERIALIZER = 'json'\nCELERY_TIMEZONE = TIME_ZONE\n# API Gateway URL\nAPI_GATEWAY_URL = os.environ.get('API_GATEWAY_URL', 'http://api-gateway:4000')\n# Service API Keys\nSERVICE_API_KEYS = {\n    'pharmacy-service': os.environ.get('PHARMACY_SERVICE_API_KEY', 'pharmacy-service-api-key'),\n    'appointment-service': os.environ.get('APPOINTMENT_SERVICE_API_KEY', 'appointment-service-api-key'),\n    'user-service': os.environ.get('USER_SERVICE_API_KEY', 'user-service-api-key'),\n}",
        "detail": "services.medical-record-service.core.settings",
        "documentation": {}
    },
    {
        "label": "CELERY_TIMEZONE",
        "kind": 5,
        "importPath": "services.medical-record-service.core.settings",
        "description": "services.medical-record-service.core.settings",
        "peekOfCode": "CELERY_TIMEZONE = TIME_ZONE\n# API Gateway URL\nAPI_GATEWAY_URL = os.environ.get('API_GATEWAY_URL', 'http://api-gateway:4000')\n# Service API Keys\nSERVICE_API_KEYS = {\n    'pharmacy-service': os.environ.get('PHARMACY_SERVICE_API_KEY', 'pharmacy-service-api-key'),\n    'appointment-service': os.environ.get('APPOINTMENT_SERVICE_API_KEY', 'appointment-service-api-key'),\n    'user-service': os.environ.get('USER_SERVICE_API_KEY', 'user-service-api-key'),\n}\n# Common Auth settings",
        "detail": "services.medical-record-service.core.settings",
        "documentation": {}
    },
    {
        "label": "API_GATEWAY_URL",
        "kind": 5,
        "importPath": "services.medical-record-service.core.settings",
        "description": "services.medical-record-service.core.settings",
        "peekOfCode": "API_GATEWAY_URL = os.environ.get('API_GATEWAY_URL', 'http://api-gateway:4000')\n# Service API Keys\nSERVICE_API_KEYS = {\n    'pharmacy-service': os.environ.get('PHARMACY_SERVICE_API_KEY', 'pharmacy-service-api-key'),\n    'appointment-service': os.environ.get('APPOINTMENT_SERVICE_API_KEY', 'appointment-service-api-key'),\n    'user-service': os.environ.get('USER_SERVICE_API_KEY', 'user-service-api-key'),\n}\n# Common Auth settings\nJWT_SECRET = os.environ.get('JWT_SECRET', SECRET_KEY)\nACCESS_TOKEN_LIFETIME = timedelta(minutes=60)",
        "detail": "services.medical-record-service.core.settings",
        "documentation": {}
    },
    {
        "label": "SERVICE_API_KEYS",
        "kind": 5,
        "importPath": "services.medical-record-service.core.settings",
        "description": "services.medical-record-service.core.settings",
        "peekOfCode": "SERVICE_API_KEYS = {\n    'pharmacy-service': os.environ.get('PHARMACY_SERVICE_API_KEY', 'pharmacy-service-api-key'),\n    'appointment-service': os.environ.get('APPOINTMENT_SERVICE_API_KEY', 'appointment-service-api-key'),\n    'user-service': os.environ.get('USER_SERVICE_API_KEY', 'user-service-api-key'),\n}\n# Common Auth settings\nJWT_SECRET = os.environ.get('JWT_SECRET', SECRET_KEY)\nACCESS_TOKEN_LIFETIME = timedelta(minutes=60)\nREFRESH_TOKEN_LIFETIME = timedelta(days=7)\nROTATE_REFRESH_TOKENS = False",
        "detail": "services.medical-record-service.core.settings",
        "documentation": {}
    },
    {
        "label": "JWT_SECRET",
        "kind": 5,
        "importPath": "services.medical-record-service.core.settings",
        "description": "services.medical-record-service.core.settings",
        "peekOfCode": "JWT_SECRET = os.environ.get('JWT_SECRET', SECRET_KEY)\nACCESS_TOKEN_LIFETIME = timedelta(minutes=60)\nREFRESH_TOKEN_LIFETIME = timedelta(days=7)\nROTATE_REFRESH_TOKENS = False\nSESSION_TTL = 86400  # 1 day in seconds\nMAX_SESSIONS_PER_USER = 5\nVERIFY_JWT_SIGNATURE = True\n# Swagger UI JWT auth configuration\nSWAGGER_SETTINGS = {\n    'SECURITY_DEFINITIONS': {",
        "detail": "services.medical-record-service.core.settings",
        "documentation": {}
    },
    {
        "label": "ACCESS_TOKEN_LIFETIME",
        "kind": 5,
        "importPath": "services.medical-record-service.core.settings",
        "description": "services.medical-record-service.core.settings",
        "peekOfCode": "ACCESS_TOKEN_LIFETIME = timedelta(minutes=60)\nREFRESH_TOKEN_LIFETIME = timedelta(days=7)\nROTATE_REFRESH_TOKENS = False\nSESSION_TTL = 86400  # 1 day in seconds\nMAX_SESSIONS_PER_USER = 5\nVERIFY_JWT_SIGNATURE = True\n# Swagger UI JWT auth configuration\nSWAGGER_SETTINGS = {\n    'SECURITY_DEFINITIONS': {\n        'Bearer': {",
        "detail": "services.medical-record-service.core.settings",
        "documentation": {}
    },
    {
        "label": "REFRESH_TOKEN_LIFETIME",
        "kind": 5,
        "importPath": "services.medical-record-service.core.settings",
        "description": "services.medical-record-service.core.settings",
        "peekOfCode": "REFRESH_TOKEN_LIFETIME = timedelta(days=7)\nROTATE_REFRESH_TOKENS = False\nSESSION_TTL = 86400  # 1 day in seconds\nMAX_SESSIONS_PER_USER = 5\nVERIFY_JWT_SIGNATURE = True\n# Swagger UI JWT auth configuration\nSWAGGER_SETTINGS = {\n    'SECURITY_DEFINITIONS': {\n        'Bearer': {\n            'type': 'apiKey',",
        "detail": "services.medical-record-service.core.settings",
        "documentation": {}
    },
    {
        "label": "ROTATE_REFRESH_TOKENS",
        "kind": 5,
        "importPath": "services.medical-record-service.core.settings",
        "description": "services.medical-record-service.core.settings",
        "peekOfCode": "ROTATE_REFRESH_TOKENS = False\nSESSION_TTL = 86400  # 1 day in seconds\nMAX_SESSIONS_PER_USER = 5\nVERIFY_JWT_SIGNATURE = True\n# Swagger UI JWT auth configuration\nSWAGGER_SETTINGS = {\n    'SECURITY_DEFINITIONS': {\n        'Bearer': {\n            'type': 'apiKey',\n            'in': 'header',",
        "detail": "services.medical-record-service.core.settings",
        "documentation": {}
    },
    {
        "label": "SESSION_TTL",
        "kind": 5,
        "importPath": "services.medical-record-service.core.settings",
        "description": "services.medical-record-service.core.settings",
        "peekOfCode": "SESSION_TTL = 86400  # 1 day in seconds\nMAX_SESSIONS_PER_USER = 5\nVERIFY_JWT_SIGNATURE = True\n# Swagger UI JWT auth configuration\nSWAGGER_SETTINGS = {\n    'SECURITY_DEFINITIONS': {\n        'Bearer': {\n            'type': 'apiKey',\n            'in': 'header',\n            'name': 'Authorization',",
        "detail": "services.medical-record-service.core.settings",
        "documentation": {}
    },
    {
        "label": "MAX_SESSIONS_PER_USER",
        "kind": 5,
        "importPath": "services.medical-record-service.core.settings",
        "description": "services.medical-record-service.core.settings",
        "peekOfCode": "MAX_SESSIONS_PER_USER = 5\nVERIFY_JWT_SIGNATURE = True\n# Swagger UI JWT auth configuration\nSWAGGER_SETTINGS = {\n    'SECURITY_DEFINITIONS': {\n        'Bearer': {\n            'type': 'apiKey',\n            'in': 'header',\n            'name': 'Authorization',\n            'description': 'JWT Authorization header using the Bearer scheme. Example: \"Bearer {token}\"',",
        "detail": "services.medical-record-service.core.settings",
        "documentation": {}
    },
    {
        "label": "VERIFY_JWT_SIGNATURE",
        "kind": 5,
        "importPath": "services.medical-record-service.core.settings",
        "description": "services.medical-record-service.core.settings",
        "peekOfCode": "VERIFY_JWT_SIGNATURE = True\n# Swagger UI JWT auth configuration\nSWAGGER_SETTINGS = {\n    'SECURITY_DEFINITIONS': {\n        'Bearer': {\n            'type': 'apiKey',\n            'in': 'header',\n            'name': 'Authorization',\n            'description': 'JWT Authorization header using the Bearer scheme. Example: \"Bearer {token}\"',\n        },",
        "detail": "services.medical-record-service.core.settings",
        "documentation": {}
    },
    {
        "label": "SWAGGER_SETTINGS",
        "kind": 5,
        "importPath": "services.medical-record-service.core.settings",
        "description": "services.medical-record-service.core.settings",
        "peekOfCode": "SWAGGER_SETTINGS = {\n    'SECURITY_DEFINITIONS': {\n        'Bearer': {\n            'type': 'apiKey',\n            'in': 'header',\n            'name': 'Authorization',\n            'description': 'JWT Authorization header using the Bearer scheme. Example: \"Bearer {token}\"',\n        },\n    },\n    'USE_SESSION_AUTH': False,",
        "detail": "services.medical-record-service.core.settings",
        "documentation": {}
    },
    {
        "label": "schema_view",
        "kind": 5,
        "importPath": "services.medical-record-service.core.urls",
        "description": "services.medical-record-service.core.urls",
        "peekOfCode": "schema_view = get_schema_view(\n    openapi.Info(\n        title=\"Medical Record Service API\",\n        default_version='v1',\n        description=\"API for managing medical records in the healthcare system\",\n        terms_of_service=\"https://www.example.com/terms/\",\n        contact=openapi.Contact(email=\"contact@example.com\"),\n        license=openapi.License(name=\"BSD License\"),\n    ),\n    public=True,",
        "detail": "services.medical-record-service.core.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "services.medical-record-service.core.urls",
        "description": "services.medical-record-service.core.urls",
        "peekOfCode": "urlpatterns = [\n    path('admin/', admin.site.urls),\n    path('api/', include('records.urls')),\n    # Swagger documentation\n    path('', schema_view.with_ui('swagger', cache_timeout=0), name='schema-swagger-ui'),\n    re_path(r'^medical-record-service(?P<format>\\.json|\\.yaml)$', schema_view.without_ui(cache_timeout=0), name='schema-json'),\n    path('redoc/', schema_view.with_ui('redoc', cache_timeout=0), name='schema-redoc'),\n]",
        "detail": "services.medical-record-service.core.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "services.medical-record-service.core.wsgi",
        "description": "services.medical-record-service.core.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "services.medical-record-service.core.wsgi",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "services.medical-record-service.records.migrations.0001_initial",
        "description": "services.medical-record-service.records.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Diagnosis',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('doctor_id', models.IntegerField(help_text='ID của bác sĩ trong user-service')),",
        "detail": "services.medical-record-service.records.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "services.medical-record-service.records.migrations.0002_encounter_appointment_id_encounter_chief_complaint_and_more",
        "description": "services.medical-record-service.records.migrations.0002_encounter_appointment_id_encounter_chief_complaint_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('records', '0001_initial'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='encounter',\n            name='appointment_id',\n            field=models.IntegerField(blank=True, help_text='ID của cuộc hẹn trong appointment-service', null=True),\n        ),",
        "detail": "services.medical-record-service.records.migrations.0002_encounter_appointment_id_encounter_chief_complaint_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "services.medical-record-service.records.migrations.0003_diagnosis_prescription_ids",
        "description": "services.medical-record-service.records.migrations.0003_diagnosis_prescription_ids",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('records', '0002_encounter_appointment_id_encounter_chief_complaint_and_more'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='diagnosis',\n            name='prescription_ids',\n            field=models.JSONField(blank=True, default=list, help_text='Danh sách ID của các đơn thuốc liên quan từ pharmacy-service'),\n        ),",
        "detail": "services.medical-record-service.records.migrations.0003_diagnosis_prescription_ids",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "services.medical-record-service.records.migrations.0004_labtest_lab_service_id",
        "description": "services.medical-record-service.records.migrations.0004_labtest_lab_service_id",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('records', '0003_diagnosis_prescription_ids'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='labtest',\n            name='lab_service_id',\n            field=models.IntegerField(blank=True, help_text='ID của xét nghiệm trong laboratory-service', null=True),\n        ),",
        "detail": "services.medical-record-service.records.migrations.0004_labtest_lab_service_id",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "services.medical-record-service.records.migrations.0005_alter_labtest_status",
        "description": "services.medical-record-service.records.migrations.0005_alter_labtest_status",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('records', '0004_labtest_lab_service_id'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='labtest',\n            name='status',\n            field=models.CharField(choices=[('ORDERED', 'Ordered'), ('SAMPLE_COLLECTED', 'Specimen Collected'), ('IN_PROGRESS', 'In Progress'), ('COMPLETED', 'Completed'), ('CANCELLED', 'Cancelled')], default='ORDERED', max_length=20),\n        ),",
        "detail": "services.medical-record-service.records.migrations.0005_alter_labtest_status",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "services.medical-record-service.records.migrations.0006_encounter_billing_status_encounter_invoice_id_and_more",
        "description": "services.medical-record-service.records.migrations.0006_encounter_billing_status_encounter_invoice_id_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('records', '0005_alter_labtest_status'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='encounter',\n            name='billing_status',\n            field=models.CharField(choices=[('NOT_BILLED', 'Not Billed'), ('BILLED', 'Billed'), ('PAID', 'Paid'), ('PARTIALLY_PAID', 'Partially Paid'), ('WAIVED', 'Waived')], default='NOT_BILLED', max_length=20),\n        ),",
        "detail": "services.medical-record-service.records.migrations.0006_encounter_billing_status_encounter_invoice_id_and_more",
        "documentation": {}
    },
    {
        "label": "MedicalRecordAdmin",
        "kind": 6,
        "importPath": "services.medical-record-service.records.admin",
        "description": "services.medical-record-service.records.admin",
        "peekOfCode": "class MedicalRecordAdmin(admin.ModelAdmin):\n    list_display = ('id', 'patient_id', 'created_at', 'updated_at')\n    search_fields = ('patient_id',)\n    list_filter = ('created_at',)\n@admin.register(Diagnosis)\nclass DiagnosisAdmin(admin.ModelAdmin):\n    list_display = ('id', 'get_medical_record', 'doctor_id', 'diagnosis_code', 'diagnosis_date')\n    search_fields = ('diagnosis_code', 'diagnosis_description')\n    list_filter = ('diagnosis_date',)\n    def get_medical_record(self, obj):",
        "detail": "services.medical-record-service.records.admin",
        "documentation": {}
    },
    {
        "label": "DiagnosisAdmin",
        "kind": 6,
        "importPath": "services.medical-record-service.records.admin",
        "description": "services.medical-record-service.records.admin",
        "peekOfCode": "class DiagnosisAdmin(admin.ModelAdmin):\n    list_display = ('id', 'get_medical_record', 'doctor_id', 'diagnosis_code', 'diagnosis_date')\n    search_fields = ('diagnosis_code', 'diagnosis_description')\n    list_filter = ('diagnosis_date',)\n    def get_medical_record(self, obj):\n        return obj.encounter.medical_record\n    get_medical_record.short_description = 'Medical Record'\n@admin.register(Treatment)\nclass TreatmentAdmin(admin.ModelAdmin):\n    list_display = ('id', 'diagnosis', 'treatment_type', 'start_date', 'end_date')",
        "detail": "services.medical-record-service.records.admin",
        "documentation": {}
    },
    {
        "label": "TreatmentAdmin",
        "kind": 6,
        "importPath": "services.medical-record-service.records.admin",
        "description": "services.medical-record-service.records.admin",
        "peekOfCode": "class TreatmentAdmin(admin.ModelAdmin):\n    list_display = ('id', 'diagnosis', 'treatment_type', 'start_date', 'end_date')\n    search_fields = ('treatment_type', 'treatment_description')\n    list_filter = ('start_date', 'end_date')\n@admin.register(Allergy)\nclass AllergyAdmin(admin.ModelAdmin):\n    list_display = ('id', 'medical_record', 'allergy_type', 'allergy_name', 'severity')\n    search_fields = ('allergy_type', 'allergy_name')\n    list_filter = ('severity',)\n@admin.register(Immunization)",
        "detail": "services.medical-record-service.records.admin",
        "documentation": {}
    },
    {
        "label": "AllergyAdmin",
        "kind": 6,
        "importPath": "services.medical-record-service.records.admin",
        "description": "services.medical-record-service.records.admin",
        "peekOfCode": "class AllergyAdmin(admin.ModelAdmin):\n    list_display = ('id', 'medical_record', 'allergy_type', 'allergy_name', 'severity')\n    search_fields = ('allergy_type', 'allergy_name')\n    list_filter = ('severity',)\n@admin.register(Immunization)\nclass ImmunizationAdmin(admin.ModelAdmin):\n    list_display = ('id', 'get_medical_record', 'vaccine_name', 'administration_date', 'dose')\n    search_fields = ('vaccine_name',)\n    list_filter = ('administration_date',)\n    def get_medical_record(self, obj):",
        "detail": "services.medical-record-service.records.admin",
        "documentation": {}
    },
    {
        "label": "ImmunizationAdmin",
        "kind": 6,
        "importPath": "services.medical-record-service.records.admin",
        "description": "services.medical-record-service.records.admin",
        "peekOfCode": "class ImmunizationAdmin(admin.ModelAdmin):\n    list_display = ('id', 'get_medical_record', 'vaccine_name', 'administration_date', 'dose')\n    search_fields = ('vaccine_name',)\n    list_filter = ('administration_date',)\n    def get_medical_record(self, obj):\n        return obj.encounter.medical_record\n    get_medical_record.short_description = 'Medical Record'\n@admin.register(MedicalHistory)\nclass MedicalHistoryAdmin(admin.ModelAdmin):\n    list_display = ('id', 'medical_record', 'condition_name', 'diagnosis_date', 'is_chronic')",
        "detail": "services.medical-record-service.records.admin",
        "documentation": {}
    },
    {
        "label": "MedicalHistoryAdmin",
        "kind": 6,
        "importPath": "services.medical-record-service.records.admin",
        "description": "services.medical-record-service.records.admin",
        "peekOfCode": "class MedicalHistoryAdmin(admin.ModelAdmin):\n    list_display = ('id', 'medical_record', 'condition_name', 'diagnosis_date', 'is_chronic')\n    search_fields = ('condition_name',)\n    list_filter = ('diagnosis_date', 'is_chronic')\n@admin.register(Medication)\nclass MedicationAdmin(admin.ModelAdmin):\n    list_display = ('id', 'get_medical_record', 'medication_name', 'dosage', 'start_date', 'end_date')\n    search_fields = ('medication_name',)\n    list_filter = ('start_date', 'end_date')\n    def get_medical_record(self, obj):",
        "detail": "services.medical-record-service.records.admin",
        "documentation": {}
    },
    {
        "label": "MedicationAdmin",
        "kind": 6,
        "importPath": "services.medical-record-service.records.admin",
        "description": "services.medical-record-service.records.admin",
        "peekOfCode": "class MedicationAdmin(admin.ModelAdmin):\n    list_display = ('id', 'get_medical_record', 'medication_name', 'dosage', 'start_date', 'end_date')\n    search_fields = ('medication_name',)\n    list_filter = ('start_date', 'end_date')\n    def get_medical_record(self, obj):\n        return obj.encounter.medical_record\n    get_medical_record.short_description = 'Medical Record'\n@admin.register(VitalSign)\nclass VitalSignAdmin(admin.ModelAdmin):\n    list_display = ('id', 'get_medical_record', 'vital_type', 'value', 'unit', 'recorded_at')",
        "detail": "services.medical-record-service.records.admin",
        "documentation": {}
    },
    {
        "label": "VitalSignAdmin",
        "kind": 6,
        "importPath": "services.medical-record-service.records.admin",
        "description": "services.medical-record-service.records.admin",
        "peekOfCode": "class VitalSignAdmin(admin.ModelAdmin):\n    list_display = ('id', 'get_medical_record', 'vital_type', 'value', 'unit', 'recorded_at')\n    search_fields = ('vital_type',)\n    list_filter = ('recorded_at',)\n    def get_medical_record(self, obj):\n        return obj.encounter.medical_record\n    get_medical_record.short_description = 'Medical Record'\n@admin.register(LabTest)\nclass LabTestAdmin(admin.ModelAdmin):\n    list_display = ('id', 'get_medical_record', 'test_name', 'ordered_by', 'ordered_at')",
        "detail": "services.medical-record-service.records.admin",
        "documentation": {}
    },
    {
        "label": "LabTestAdmin",
        "kind": 6,
        "importPath": "services.medical-record-service.records.admin",
        "description": "services.medical-record-service.records.admin",
        "peekOfCode": "class LabTestAdmin(admin.ModelAdmin):\n    list_display = ('id', 'get_medical_record', 'test_name', 'ordered_by', 'ordered_at')\n    search_fields = ('test_name',)\n    list_filter = ('ordered_at',)\n    def get_medical_record(self, obj):\n        return obj.encounter.medical_record\n    get_medical_record.short_description = 'Medical Record'\n@admin.register(LabResult)\nclass LabResultAdmin(admin.ModelAdmin):\n    list_display = ('id', 'lab_test', 'result_value', 'is_abnormal', 'performed_at')",
        "detail": "services.medical-record-service.records.admin",
        "documentation": {}
    },
    {
        "label": "LabResultAdmin",
        "kind": 6,
        "importPath": "services.medical-record-service.records.admin",
        "description": "services.medical-record-service.records.admin",
        "peekOfCode": "class LabResultAdmin(admin.ModelAdmin):\n    list_display = ('id', 'lab_test', 'result_value', 'is_abnormal', 'performed_at')\n    search_fields = ('result_value',)\n    list_filter = ('performed_at', 'is_abnormal')",
        "detail": "services.medical-record-service.records.admin",
        "documentation": {}
    },
    {
        "label": "RecordsConfig",
        "kind": 6,
        "importPath": "services.medical-record-service.records.apps",
        "description": "services.medical-record-service.records.apps",
        "peekOfCode": "class RecordsConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'records'",
        "detail": "services.medical-record-service.records.apps",
        "documentation": {}
    },
    {
        "label": "CustomJWTAuthentication",
        "kind": 5,
        "importPath": "services.medical-record-service.records.authentication",
        "description": "services.medical-record-service.records.authentication",
        "peekOfCode": "CustomJWTAuthentication = ServiceAuthentication",
        "detail": "services.medical-record-service.records.authentication",
        "documentation": {}
    },
    {
        "label": "create_invoice_from_medical_record",
        "kind": 2,
        "importPath": "services.medical-record-service.records.integrations",
        "description": "services.medical-record-service.records.integrations",
        "peekOfCode": "def create_invoice_from_medical_record(medical_record, encounter=None, token=None):\n    \"\"\"\n    Create an invoice in the Billing Service for a medical record.\n    Args:\n        medical_record: The MedicalRecord object\n        encounter: The Encounter object (optional)\n        token (str, optional): JWT token for authentication\n    Returns:\n        dict or None: Invoice data or None if creation failed\n    \"\"\"",
        "detail": "services.medical-record-service.records.integrations",
        "documentation": {}
    },
    {
        "label": "send_notification",
        "kind": 2,
        "importPath": "services.medical-record-service.records.integrations",
        "description": "services.medical-record-service.records.integrations",
        "peekOfCode": "def send_notification(user_id, notification_type, message, additional_data=None, token=None):\n    \"\"\"\n    Send a notification to a user.\n    Args:\n        user_id (int): ID of the user to notify\n        notification_type (str): Type of notification\n        message (str): Notification message\n        additional_data (dict, optional): Additional data for the notification\n        token (str, optional): JWT token for authentication\n    Returns:",
        "detail": "services.medical-record-service.records.integrations",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "services.medical-record-service.records.integrations",
        "description": "services.medical-record-service.records.integrations",
        "peekOfCode": "logger = logging.getLogger(__name__)\n# Initialize service clients\nbilling_client = ServiceClient('BILLING_SERVICE')\nnotification_client = ServiceClient('NOTIFICATION_SERVICE')\n# This function is replaced by ServiceClient\ndef create_invoice_from_medical_record(medical_record, encounter=None, token=None):\n    \"\"\"\n    Create an invoice in the Billing Service for a medical record.\n    Args:\n        medical_record: The MedicalRecord object",
        "detail": "services.medical-record-service.records.integrations",
        "documentation": {}
    },
    {
        "label": "billing_client",
        "kind": 5,
        "importPath": "services.medical-record-service.records.integrations",
        "description": "services.medical-record-service.records.integrations",
        "peekOfCode": "billing_client = ServiceClient('BILLING_SERVICE')\nnotification_client = ServiceClient('NOTIFICATION_SERVICE')\n# This function is replaced by ServiceClient\ndef create_invoice_from_medical_record(medical_record, encounter=None, token=None):\n    \"\"\"\n    Create an invoice in the Billing Service for a medical record.\n    Args:\n        medical_record: The MedicalRecord object\n        encounter: The Encounter object (optional)\n        token (str, optional): JWT token for authentication",
        "detail": "services.medical-record-service.records.integrations",
        "documentation": {}
    },
    {
        "label": "notification_client",
        "kind": 5,
        "importPath": "services.medical-record-service.records.integrations",
        "description": "services.medical-record-service.records.integrations",
        "peekOfCode": "notification_client = ServiceClient('NOTIFICATION_SERVICE')\n# This function is replaced by ServiceClient\ndef create_invoice_from_medical_record(medical_record, encounter=None, token=None):\n    \"\"\"\n    Create an invoice in the Billing Service for a medical record.\n    Args:\n        medical_record: The MedicalRecord object\n        encounter: The Encounter object (optional)\n        token (str, optional): JWT token for authentication\n    Returns:",
        "detail": "services.medical-record-service.records.integrations",
        "documentation": {}
    },
    {
        "label": "ServiceAPIKeyMiddleware",
        "kind": 6,
        "importPath": "services.medical-record-service.records.middleware",
        "description": "services.medical-record-service.records.middleware",
        "peekOfCode": "class ServiceAPIKeyMiddleware:\n    \"\"\"\n    Middleware để xác thực API key cho service-to-service communication.\n    \"\"\"\n    def __init__(self, get_response):\n        self.get_response = get_response\n    def __call__(self, request):\n        # Kiểm tra xem có header X-Service-API-Key không\n        api_key = request.META.get('HTTP_X_SERVICE_API_KEY')\n        service_name = request.META.get('HTTP_X_SERVICE_NAME')",
        "detail": "services.medical-record-service.records.middleware",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "services.medical-record-service.records.middleware",
        "description": "services.medical-record-service.records.middleware",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass ServiceAPIKeyMiddleware:\n    \"\"\"\n    Middleware để xác thực API key cho service-to-service communication.\n    \"\"\"\n    def __init__(self, get_response):\n        self.get_response = get_response\n    def __call__(self, request):\n        # Kiểm tra xem có header X-Service-API-Key không\n        api_key = request.META.get('HTTP_X_SERVICE_API_KEY')",
        "detail": "services.medical-record-service.records.middleware",
        "documentation": {}
    },
    {
        "label": "MedicalRecord",
        "kind": 6,
        "importPath": "services.medical-record-service.records.models",
        "description": "services.medical-record-service.records.models",
        "peekOfCode": "class MedicalRecord(models.Model):\n    \"\"\"Hồ sơ y tế tổng thể của bệnh nhân\"\"\"\n    patient_id = models.IntegerField(help_text=\"ID của bệnh nhân trong user-service\", unique=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    def __str__(self):\n        return f\"Medical Record for Patient {self.patient_id}\"\n    class Meta:\n        verbose_name = \"Medical Record\"\n        verbose_name_plural = \"Medical Records\"",
        "detail": "services.medical-record-service.records.models",
        "documentation": {}
    },
    {
        "label": "Encounter",
        "kind": 6,
        "importPath": "services.medical-record-service.records.models",
        "description": "services.medical-record-service.records.models",
        "peekOfCode": "class Encounter(models.Model):\n    \"\"\"Phiên khám bệnh - mỗi lần bệnh nhân đến khám\"\"\"\n    medical_record = models.ForeignKey(MedicalRecord, on_delete=models.CASCADE, related_name='encounters')\n    encounter_date = models.DateTimeField(default=timezone.now)\n    doctor_id = models.IntegerField(help_text=\"ID của bác sĩ phụ trách phiên khám\", null=True, blank=True)\n    appointment_id = models.IntegerField(help_text=\"ID của cuộc hẹn trong appointment-service\", null=True, blank=True)\n    chief_complaint = models.TextField(help_text=\"Lý do khám chính\", blank=True, null=True)\n    encounter_type = models.CharField(max_length=20, choices=[\n        ('OUTPATIENT', 'Outpatient'),\n        ('INPATIENT', 'Inpatient'),",
        "detail": "services.medical-record-service.records.models",
        "documentation": {}
    },
    {
        "label": "Diagnosis",
        "kind": 6,
        "importPath": "services.medical-record-service.records.models",
        "description": "services.medical-record-service.records.models",
        "peekOfCode": "class Diagnosis(models.Model):\n    \"\"\"Chẩn đoán bệnh thuộc phiên khám\"\"\"\n    encounter = models.ForeignKey(Encounter, on_delete=models.CASCADE, related_name='diagnoses')\n    doctor_id = models.IntegerField(help_text=\"ID của bác sĩ trong user-service\")\n    diagnosis_code = models.CharField(max_length=20, help_text=\"Mã chẩn đoán (ICD-10)\")\n    diagnosis_description = models.TextField()\n    diagnosis_date = models.DateField()\n    notes = models.TextField(blank=True, null=True)\n    prescription_ids = models.JSONField(default=list, blank=True, help_text=\"Danh sách ID của các đơn thuốc liên quan từ pharmacy-service\")\n    created_at = models.DateTimeField(auto_now_add=True)",
        "detail": "services.medical-record-service.records.models",
        "documentation": {}
    },
    {
        "label": "Treatment",
        "kind": 6,
        "importPath": "services.medical-record-service.records.models",
        "description": "services.medical-record-service.records.models",
        "peekOfCode": "class Treatment(models.Model):\n    \"\"\"Phương pháp điều trị cho chẩn đoán\"\"\"\n    TREATMENT_TYPE_CHOICES = [\n        ('MEDICATION', 'Medication'),\n        ('SURGERY', 'Surgery'),\n        ('THERAPY', 'Therapy'),\n        ('PROCEDURE', 'Procedure'),\n        ('OTHER', 'Other'),\n    ]\n    diagnosis = models.ForeignKey(Diagnosis, on_delete=models.CASCADE, related_name='treatments')",
        "detail": "services.medical-record-service.records.models",
        "documentation": {}
    },
    {
        "label": "Allergy",
        "kind": 6,
        "importPath": "services.medical-record-service.records.models",
        "description": "services.medical-record-service.records.models",
        "peekOfCode": "class Allergy(models.Model):\n    \"\"\"Thông tin dị ứng – dữ liệu chung thuộc MedicalRecord\"\"\"\n    SEVERITY_CHOICES = [\n        ('MILD', 'Mild'),\n        ('MODERATE', 'Moderate'),\n        ('SEVERE', 'Severe'),\n        ('LIFE_THREATENING', 'Life-threatening'),\n    ]\n    medical_record = models.ForeignKey(MedicalRecord, on_delete=models.CASCADE, related_name='allergies')\n    allergy_type = models.CharField(max_length=50, help_text=\"Loại dị ứng (thuốc, thực phẩm, môi trường, v.v.)\")",
        "detail": "services.medical-record-service.records.models",
        "documentation": {}
    },
    {
        "label": "Immunization",
        "kind": 6,
        "importPath": "services.medical-record-service.records.models",
        "description": "services.medical-record-service.records.models",
        "peekOfCode": "class Immunization(models.Model):\n    \"\"\"Thông tin tiêm chủng thuộc phiên khám\"\"\"\n    encounter = models.ForeignKey(Encounter, on_delete=models.CASCADE, related_name='immunizations')\n    vaccine_name = models.CharField(max_length=100)\n    administration_date = models.DateField()\n    dose = models.CharField(max_length=20, help_text=\"Liều lượng hoặc số thứ tự của mũi tiêm\")\n    administered_by = models.IntegerField(help_text=\"ID của nhân viên y tế trong user-service\", null=True, blank=True)\n    notes = models.TextField(blank=True, null=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)",
        "detail": "services.medical-record-service.records.models",
        "documentation": {}
    },
    {
        "label": "MedicalHistory",
        "kind": 6,
        "importPath": "services.medical-record-service.records.models",
        "description": "services.medical-record-service.records.models",
        "peekOfCode": "class MedicalHistory(models.Model):\n    \"\"\"Lịch sử bệnh án – dữ liệu chung thuộc MedicalRecord\"\"\"\n    medical_record = models.ForeignKey(MedicalRecord, on_delete=models.CASCADE, related_name='medical_histories')\n    condition_name = models.CharField(max_length=100)\n    diagnosis_date = models.DateField()\n    resolution_date = models.DateField(null=True, blank=True)\n    is_chronic = models.BooleanField(default=False)\n    notes = models.TextField(blank=True, null=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)",
        "detail": "services.medical-record-service.records.models",
        "documentation": {}
    },
    {
        "label": "Medication",
        "kind": 6,
        "importPath": "services.medical-record-service.records.models",
        "description": "services.medical-record-service.records.models",
        "peekOfCode": "class Medication(models.Model):\n    \"\"\"Thông tin thuốc được kê trong phiên khám\"\"\"\n    FREQUENCY_CHOICES = [\n        ('ONCE', 'Once daily'),\n        ('TWICE', 'Twice daily'),\n        ('THREE', 'Three times daily'),\n        ('FOUR', 'Four times daily'),\n        ('AS_NEEDED', 'As needed'),\n        ('OTHER', 'Other'),\n    ]",
        "detail": "services.medical-record-service.records.models",
        "documentation": {}
    },
    {
        "label": "VitalSign",
        "kind": 6,
        "importPath": "services.medical-record-service.records.models",
        "description": "services.medical-record-service.records.models",
        "peekOfCode": "class VitalSign(models.Model):\n    \"\"\"Dấu hiệu sinh tồn thu thập trong phiên khám\"\"\"\n    VITAL_TYPE_CHOICES = [\n        ('TEMPERATURE', 'Temperature'),\n        ('BLOOD_PRESSURE', 'Blood Pressure'),\n        ('HEART_RATE', 'Heart Rate'),\n        ('RESPIRATORY_RATE', 'Respiratory Rate'),\n        ('OXYGEN_SATURATION', 'Oxygen Saturation'),\n        ('HEIGHT', 'Height'),\n        ('WEIGHT', 'Weight'),",
        "detail": "services.medical-record-service.records.models",
        "documentation": {}
    },
    {
        "label": "LabTest",
        "kind": 6,
        "importPath": "services.medical-record-service.records.models",
        "description": "services.medical-record-service.records.models",
        "peekOfCode": "class LabTest(models.Model):\n    \"\"\"Xét nghiệm y tế trong phiên khám\"\"\"\n    STATUS_CHOICES = [\n        ('ORDERED', 'Ordered'),\n        ('SAMPLE_COLLECTED', 'Specimen Collected'),\n        ('IN_PROGRESS', 'In Progress'),\n        ('COMPLETED', 'Completed'),\n        ('CANCELLED', 'Cancelled'),\n    ]\n    encounter = models.ForeignKey(Encounter, on_delete=models.CASCADE, related_name='lab_tests')",
        "detail": "services.medical-record-service.records.models",
        "documentation": {}
    },
    {
        "label": "LabResult",
        "kind": 6,
        "importPath": "services.medical-record-service.records.models",
        "description": "services.medical-record-service.records.models",
        "peekOfCode": "class LabResult(models.Model):\n    \"\"\"Kết quả xét nghiệm của LabTest\"\"\"\n    lab_test = models.ForeignKey(LabTest, on_delete=models.CASCADE, related_name='results')\n    result_value = models.CharField(max_length=100)\n    unit = models.CharField(max_length=20, blank=True, null=True)\n    reference_range = models.CharField(max_length=100, blank=True, null=True)\n    is_abnormal = models.BooleanField(default=False)\n    performed_by = models.IntegerField(help_text=\"ID của kỹ thuật viên trong user-service\", null=True, blank=True)\n    performed_at = models.DateTimeField()\n    notes = models.TextField(blank=True, null=True)",
        "detail": "services.medical-record-service.records.models",
        "documentation": {}
    },
    {
        "label": "IsServiceRequest",
        "kind": 6,
        "importPath": "services.medical-record-service.records.permissions",
        "description": "services.medical-record-service.records.permissions",
        "peekOfCode": "class IsServiceRequest(permissions.BasePermission):\n    \"\"\"\n    Cho phép truy cập nếu request đến từ một service khác đã được xác thực.\n    \"\"\"\n    def has_permission(self, request, view):\n        return getattr(request, 'is_service_request', False)",
        "detail": "services.medical-record-service.records.permissions",
        "documentation": {}
    },
    {
        "label": "CanViewMedicalRecords",
        "kind": 5,
        "importPath": "services.medical-record-service.records.permissions",
        "description": "services.medical-record-service.records.permissions",
        "peekOfCode": "CanViewMedicalRecords = MedicalRecordPermissions.CanViewMedicalRecords\nCanCreateMedicalRecord = MedicalRecordPermissions.CanCreateMedicalRecord\nCanUpdateMedicalRecord = MedicalRecordPermissions.CanUpdateMedicalRecord\nCanDeleteMedicalRecord = MedicalRecordPermissions.CanDeleteMedicalRecord\nCanShareMedicalRecord = MedicalRecordPermissions.CanShareMedicalRecord\nclass IsServiceRequest(permissions.BasePermission):\n    \"\"\"\n    Cho phép truy cập nếu request đến từ một service khác đã được xác thực.\n    \"\"\"\n    def has_permission(self, request, view):",
        "detail": "services.medical-record-service.records.permissions",
        "documentation": {}
    },
    {
        "label": "CanCreateMedicalRecord",
        "kind": 5,
        "importPath": "services.medical-record-service.records.permissions",
        "description": "services.medical-record-service.records.permissions",
        "peekOfCode": "CanCreateMedicalRecord = MedicalRecordPermissions.CanCreateMedicalRecord\nCanUpdateMedicalRecord = MedicalRecordPermissions.CanUpdateMedicalRecord\nCanDeleteMedicalRecord = MedicalRecordPermissions.CanDeleteMedicalRecord\nCanShareMedicalRecord = MedicalRecordPermissions.CanShareMedicalRecord\nclass IsServiceRequest(permissions.BasePermission):\n    \"\"\"\n    Cho phép truy cập nếu request đến từ một service khác đã được xác thực.\n    \"\"\"\n    def has_permission(self, request, view):\n        return getattr(request, 'is_service_request', False)",
        "detail": "services.medical-record-service.records.permissions",
        "documentation": {}
    },
    {
        "label": "CanUpdateMedicalRecord",
        "kind": 5,
        "importPath": "services.medical-record-service.records.permissions",
        "description": "services.medical-record-service.records.permissions",
        "peekOfCode": "CanUpdateMedicalRecord = MedicalRecordPermissions.CanUpdateMedicalRecord\nCanDeleteMedicalRecord = MedicalRecordPermissions.CanDeleteMedicalRecord\nCanShareMedicalRecord = MedicalRecordPermissions.CanShareMedicalRecord\nclass IsServiceRequest(permissions.BasePermission):\n    \"\"\"\n    Cho phép truy cập nếu request đến từ một service khác đã được xác thực.\n    \"\"\"\n    def has_permission(self, request, view):\n        return getattr(request, 'is_service_request', False)",
        "detail": "services.medical-record-service.records.permissions",
        "documentation": {}
    },
    {
        "label": "CanDeleteMedicalRecord",
        "kind": 5,
        "importPath": "services.medical-record-service.records.permissions",
        "description": "services.medical-record-service.records.permissions",
        "peekOfCode": "CanDeleteMedicalRecord = MedicalRecordPermissions.CanDeleteMedicalRecord\nCanShareMedicalRecord = MedicalRecordPermissions.CanShareMedicalRecord\nclass IsServiceRequest(permissions.BasePermission):\n    \"\"\"\n    Cho phép truy cập nếu request đến từ một service khác đã được xác thực.\n    \"\"\"\n    def has_permission(self, request, view):\n        return getattr(request, 'is_service_request', False)",
        "detail": "services.medical-record-service.records.permissions",
        "documentation": {}
    },
    {
        "label": "CanShareMedicalRecord",
        "kind": 5,
        "importPath": "services.medical-record-service.records.permissions",
        "description": "services.medical-record-service.records.permissions",
        "peekOfCode": "CanShareMedicalRecord = MedicalRecordPermissions.CanShareMedicalRecord\nclass IsServiceRequest(permissions.BasePermission):\n    \"\"\"\n    Cho phép truy cập nếu request đến từ một service khác đã được xác thực.\n    \"\"\"\n    def has_permission(self, request, view):\n        return getattr(request, 'is_service_request', False)",
        "detail": "services.medical-record-service.records.permissions",
        "documentation": {}
    },
    {
        "label": "TreatmentSerializer",
        "kind": 6,
        "importPath": "services.medical-record-service.records.serializers",
        "description": "services.medical-record-service.records.serializers",
        "peekOfCode": "class TreatmentSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Treatment\n        fields = '__all__'\n        read_only_fields = ('id', 'created_at', 'updated_at')\nclass DiagnosisSerializer(serializers.ModelSerializer):\n    treatments = TreatmentSerializer(many=True, read_only=True)\n    doctor_id = serializers.IntegerField(required=False)  # Not mandatory in requests\n    class Meta:\n        model = Diagnosis",
        "detail": "services.medical-record-service.records.serializers",
        "documentation": {}
    },
    {
        "label": "DiagnosisSerializer",
        "kind": 6,
        "importPath": "services.medical-record-service.records.serializers",
        "description": "services.medical-record-service.records.serializers",
        "peekOfCode": "class DiagnosisSerializer(serializers.ModelSerializer):\n    treatments = TreatmentSerializer(many=True, read_only=True)\n    doctor_id = serializers.IntegerField(required=False)  # Not mandatory in requests\n    class Meta:\n        model = Diagnosis\n        fields = '__all__'\n        read_only_fields = ('id', 'created_at', 'updated_at')\nclass AllergySerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Allergy",
        "detail": "services.medical-record-service.records.serializers",
        "documentation": {}
    },
    {
        "label": "AllergySerializer",
        "kind": 6,
        "importPath": "services.medical-record-service.records.serializers",
        "description": "services.medical-record-service.records.serializers",
        "peekOfCode": "class AllergySerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Allergy\n        fields = '__all__'\n        read_only_fields = ('id', 'created_at', 'updated_at')\nclass ImmunizationSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Immunization\n        fields = '__all__'\n        read_only_fields = ('id', 'created_at', 'updated_at')",
        "detail": "services.medical-record-service.records.serializers",
        "documentation": {}
    },
    {
        "label": "ImmunizationSerializer",
        "kind": 6,
        "importPath": "services.medical-record-service.records.serializers",
        "description": "services.medical-record-service.records.serializers",
        "peekOfCode": "class ImmunizationSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Immunization\n        fields = '__all__'\n        read_only_fields = ('id', 'created_at', 'updated_at')\nclass MedicalHistorySerializer(serializers.ModelSerializer):\n    class Meta:\n        model = MedicalHistory\n        fields = '__all__'\n        read_only_fields = ('id', 'created_at', 'updated_at')",
        "detail": "services.medical-record-service.records.serializers",
        "documentation": {}
    },
    {
        "label": "MedicalHistorySerializer",
        "kind": 6,
        "importPath": "services.medical-record-service.records.serializers",
        "description": "services.medical-record-service.records.serializers",
        "peekOfCode": "class MedicalHistorySerializer(serializers.ModelSerializer):\n    class Meta:\n        model = MedicalHistory\n        fields = '__all__'\n        read_only_fields = ('id', 'created_at', 'updated_at')\nclass MedicationSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Medication\n        fields = '__all__'\n        read_only_fields = ('id', 'created_at', 'updated_at')",
        "detail": "services.medical-record-service.records.serializers",
        "documentation": {}
    },
    {
        "label": "MedicationSerializer",
        "kind": 6,
        "importPath": "services.medical-record-service.records.serializers",
        "description": "services.medical-record-service.records.serializers",
        "peekOfCode": "class MedicationSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Medication\n        fields = '__all__'\n        read_only_fields = ('id', 'created_at', 'updated_at')\nclass VitalSignSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = VitalSign\n        fields = '__all__'\n        read_only_fields = ('id', 'created_at', 'updated_at')",
        "detail": "services.medical-record-service.records.serializers",
        "documentation": {}
    },
    {
        "label": "VitalSignSerializer",
        "kind": 6,
        "importPath": "services.medical-record-service.records.serializers",
        "description": "services.medical-record-service.records.serializers",
        "peekOfCode": "class VitalSignSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = VitalSign\n        fields = '__all__'\n        read_only_fields = ('id', 'created_at', 'updated_at')\nclass LabResultSerializer(serializers.ModelSerializer):\n    performed_by = serializers.IntegerField(required=False)  # Not mandatory in requests\n    performed_at = serializers.DateTimeField(required=False)  # Not mandatory in requests\n    class Meta:\n        model = LabResult",
        "detail": "services.medical-record-service.records.serializers",
        "documentation": {}
    },
    {
        "label": "LabResultSerializer",
        "kind": 6,
        "importPath": "services.medical-record-service.records.serializers",
        "description": "services.medical-record-service.records.serializers",
        "peekOfCode": "class LabResultSerializer(serializers.ModelSerializer):\n    performed_by = serializers.IntegerField(required=False)  # Not mandatory in requests\n    performed_at = serializers.DateTimeField(required=False)  # Not mandatory in requests\n    class Meta:\n        model = LabResult\n        fields = '__all__'\n        read_only_fields = ('id', 'created_at', 'updated_at')\nclass LabTestSerializer(serializers.ModelSerializer):\n    results = LabResultSerializer(many=True, read_only=True)\n    ordered_by = serializers.IntegerField(required=False)  # Not mandatory in requests",
        "detail": "services.medical-record-service.records.serializers",
        "documentation": {}
    },
    {
        "label": "LabTestSerializer",
        "kind": 6,
        "importPath": "services.medical-record-service.records.serializers",
        "description": "services.medical-record-service.records.serializers",
        "peekOfCode": "class LabTestSerializer(serializers.ModelSerializer):\n    results = LabResultSerializer(many=True, read_only=True)\n    ordered_by = serializers.IntegerField(required=False)  # Not mandatory in requests\n    ordered_at = serializers.DateTimeField(required=False)  # Not mandatory in requests\n    class Meta:\n        model = LabTest\n        fields = '__all__'\n        read_only_fields = ('id', 'created_at', 'updated_at')\nclass EncounterSerializer(serializers.ModelSerializer):\n    diagnoses = DiagnosisSerializer(many=True, read_only=True)",
        "detail": "services.medical-record-service.records.serializers",
        "documentation": {}
    },
    {
        "label": "EncounterSerializer",
        "kind": 6,
        "importPath": "services.medical-record-service.records.serializers",
        "description": "services.medical-record-service.records.serializers",
        "peekOfCode": "class EncounterSerializer(serializers.ModelSerializer):\n    diagnoses = DiagnosisSerializer(many=True, read_only=True)\n    immunizations = ImmunizationSerializer(many=True, read_only=True)\n    medications = MedicationSerializer(many=True, read_only=True)\n    vital_signs = VitalSignSerializer(many=True, read_only=True)\n    lab_tests = LabTestSerializer(many=True, read_only=True)\n    class Meta:\n        model = Encounter\n        fields = '__all__'\n        read_only_fields = ('id', 'created_at', 'updated_at')",
        "detail": "services.medical-record-service.records.serializers",
        "documentation": {}
    },
    {
        "label": "MedicalRecordSerializer",
        "kind": 6,
        "importPath": "services.medical-record-service.records.serializers",
        "description": "services.medical-record-service.records.serializers",
        "peekOfCode": "class MedicalRecordSerializer(serializers.ModelSerializer):\n    encounters = EncounterSerializer(many=True, read_only=True)\n    allergies = AllergySerializer(many=True, read_only=True)\n    medical_histories = MedicalHistorySerializer(many=True, read_only=True)\n    class Meta:\n        model = MedicalRecord\n        fields = '__all__'\n        read_only_fields = ('id', 'created_at', 'updated_at')\nclass MedicalRecordSummarySerializer(serializers.ModelSerializer):\n    diagnosis_count = serializers.SerializerMethodField()",
        "detail": "services.medical-record-service.records.serializers",
        "documentation": {}
    },
    {
        "label": "MedicalRecordSummarySerializer",
        "kind": 6,
        "importPath": "services.medical-record-service.records.serializers",
        "description": "services.medical-record-service.records.serializers",
        "peekOfCode": "class MedicalRecordSummarySerializer(serializers.ModelSerializer):\n    diagnosis_count = serializers.SerializerMethodField()\n    allergy_count = serializers.SerializerMethodField()\n    medication_count = serializers.SerializerMethodField()\n    class Meta:\n        model = MedicalRecord\n        fields = (\n            'id', 'patient_id', 'created_at', 'updated_at',\n            'diagnosis_count', 'allergy_count', 'medication_count'\n        )",
        "detail": "services.medical-record-service.records.serializers",
        "documentation": {}
    },
    {
        "label": "AppointmentService",
        "kind": 6,
        "importPath": "services.medical-record-service.records.services",
        "description": "services.medical-record-service.records.services",
        "peekOfCode": "class AppointmentService:\n    \"\"\"\n    Service để giao tiếp với Appointment Service thông qua API Gateway.\n    \"\"\"\n    @staticmethod\n    def get_appointment_info(appointment_id, auth_token=None):\n        \"\"\"\n        Lấy thông tin cuộc hẹn từ Appointment Service thông qua API Gateway.\n        Args:\n            appointment_id (int): ID của cuộc hẹn",
        "detail": "services.medical-record-service.records.services",
        "documentation": {}
    },
    {
        "label": "UserService",
        "kind": 6,
        "importPath": "services.medical-record-service.records.services",
        "description": "services.medical-record-service.records.services",
        "peekOfCode": "class UserService:\n    \"\"\"\n    Service để giao tiếp với User Service thông qua API Gateway.\n    \"\"\"\n    @staticmethod\n    def get_user_info(user_id):\n        \"\"\"\n        Lấy thông tin người dùng từ User Service thông qua API Gateway.\n        Args:\n            user_id (int): ID của người dùng",
        "detail": "services.medical-record-service.records.services",
        "documentation": {}
    },
    {
        "label": "LaboratoryService",
        "kind": 6,
        "importPath": "services.medical-record-service.records.services",
        "description": "services.medical-record-service.records.services",
        "peekOfCode": "class LaboratoryService:\n    \"\"\"\n    Service để giao tiếp với Laboratory Service thông qua API Gateway.\n    \"\"\"\n    @staticmethod\n    def get_test_type_by_code(test_code, auth_token=None):\n        \"\"\"\n        Lấy thông tin loại xét nghiệm dựa trên mã xét nghiệm.\n        Args:\n            test_code (str): Mã xét nghiệm",
        "detail": "services.medical-record-service.records.services",
        "documentation": {}
    },
    {
        "label": "BillingService",
        "kind": 6,
        "importPath": "services.medical-record-service.records.services",
        "description": "services.medical-record-service.records.services",
        "peekOfCode": "class BillingService:\n    \"\"\"\n    Service để giao tiếp với Billing Service thông qua API Gateway.\n    \"\"\"\n    @staticmethod\n    def create_invoice_from_encounter(encounter_data, auth_token=None):\n        \"\"\"\n        Tạo hóa đơn từ cuộc gặp trong Billing Service thông qua API Gateway.\n        Args:\n            encounter_data (dict): Dữ liệu cuộc gặp và thông tin hóa đơn",
        "detail": "services.medical-record-service.records.services",
        "documentation": {}
    },
    {
        "label": "PharmacyService",
        "kind": 6,
        "importPath": "services.medical-record-service.records.services",
        "description": "services.medical-record-service.records.services",
        "peekOfCode": "class PharmacyService:\n    \"\"\"\n    Service để giao tiếp với Pharmacy Service thông qua API Gateway.\n    \"\"\"\n    @staticmethod\n    def create_prescription_from_diagnosis(diagnosis_data, auth_token=None):\n        \"\"\"\n        Tạo đơn thuốc mới từ chẩn đoán trong Pharmacy Service thông qua API Gateway.\n        Args:\n            diagnosis_data (dict): Dữ liệu chẩn đoán và thông tin đơn thuốc",
        "detail": "services.medical-record-service.records.services",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "services.medical-record-service.records.services",
        "description": "services.medical-record-service.records.services",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass AppointmentService:\n    \"\"\"\n    Service để giao tiếp với Appointment Service thông qua API Gateway.\n    \"\"\"\n    @staticmethod\n    def get_appointment_info(appointment_id, auth_token=None):\n        \"\"\"\n        Lấy thông tin cuộc hẹn từ Appointment Service thông qua API Gateway.\n        Args:",
        "detail": "services.medical-record-service.records.services",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "services.medical-record-service.records.urls",
        "description": "services.medical-record-service.records.urls",
        "peekOfCode": "router = DefaultRouter()\nrouter.register(r'medical-records', MedicalRecordViewSet, basename='medical-record')\nrouter.register(r'diagnoses', DiagnosisViewSet, basename='diagnosis')\nurlpatterns = [\n    # ViewSet endpoints\n    path('', include(router.urls)),\n    # Encounter endpoints\n    path('encounters/', EncounterListCreateAPIView.as_view(), name='encounter-list'),\n    path('encounters/<int:pk>/', EncounterDetailAPIView.as_view(), name='encounter-detail'),\n    path('encounters/from-appointment/<int:appointment_id>/', create_encounter_from_appointment, name='create-encounter-from-appointment-alt'),",
        "detail": "services.medical-record-service.records.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "services.medical-record-service.records.urls",
        "description": "services.medical-record-service.records.urls",
        "peekOfCode": "urlpatterns = [\n    # ViewSet endpoints\n    path('', include(router.urls)),\n    # Encounter endpoints\n    path('encounters/', EncounterListCreateAPIView.as_view(), name='encounter-list'),\n    path('encounters/<int:pk>/', EncounterDetailAPIView.as_view(), name='encounter-detail'),\n    path('encounters/from-appointment/<int:appointment_id>/', create_encounter_from_appointment, name='create-encounter-from-appointment-alt'),\n    path('encounters/<int:encounter_id>/update-status/', update_encounter_status, name='update-encounter-status'),\n    # Treatment endpoints\n    path('treatments/', TreatmentListCreateAPIView.as_view(), name='treatment-list'),",
        "detail": "services.medical-record-service.records.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "services.medical-record-service.records.urls",
        "description": "services.medical-record-service.records.urls",
        "peekOfCode": "urlpatterns = register_health_check(urlpatterns)",
        "detail": "services.medical-record-service.records.urls",
        "documentation": {}
    },
    {
        "label": "StandardResultsSetPagination",
        "kind": 6,
        "importPath": "services.medical-record-service.records.views",
        "description": "services.medical-record-service.records.views",
        "peekOfCode": "class StandardResultsSetPagination(PageNumberPagination):\n    page_size = 10\n    page_size_query_param = 'page_size'\n    max_page_size = 100\n@api_view(['POST'])\n@authentication_classes([CustomJWTAuthentication])\n@permission_classes([IsDoctor])\ndef create_encounter_from_appointment(request, appointment_id):\n    \"\"\"\n    API endpoint để tạo Encounter từ Appointment.",
        "detail": "services.medical-record-service.records.views",
        "documentation": {}
    },
    {
        "label": "MedicalRecordViewSet",
        "kind": 6,
        "importPath": "services.medical-record-service.records.views",
        "description": "services.medical-record-service.records.views",
        "peekOfCode": "class MedicalRecordViewSet(viewsets.ModelViewSet):\n    \"\"\"\n    API endpoint để quản lý hồ sơ y tế.\n    list: Lấy danh sách hồ sơ y tế\n    retrieve: Lấy chi tiết hồ sơ y tế\n    create: Tạo mới hồ sơ y tế\n    update: Cập nhật hồ sơ y tế\n    partial_update: Cập nhật một phần hồ sơ y tế\n    destroy: Xóa hồ sơ y tế\n    \"\"\"",
        "detail": "services.medical-record-service.records.views",
        "documentation": {}
    },
    {
        "label": "DiagnosisViewSet",
        "kind": 6,
        "importPath": "services.medical-record-service.records.views",
        "description": "services.medical-record-service.records.views",
        "peekOfCode": "class DiagnosisViewSet(viewsets.ModelViewSet):\n    \"\"\"\n    API endpoint để quản lý chẩn đoán.\n    list: Lấy danh sách chẩn đoán\n    retrieve: Lấy chi tiết chẩn đoán\n    create: Tạo mới chẩn đoán\n    update: Cập nhật chẩn đoán\n    partial_update: Cập nhật một phần chẩn đoán\n    destroy: Xóa chẩn đoán\n    \"\"\"",
        "detail": "services.medical-record-service.records.views",
        "documentation": {}
    },
    {
        "label": "TreatmentListCreateAPIView",
        "kind": 6,
        "importPath": "services.medical-record-service.records.views",
        "description": "services.medical-record-service.records.views",
        "peekOfCode": "class TreatmentListCreateAPIView(APIView):\n    \"\"\"\n    API endpoint để lấy danh sách và tạo mới điều trị.\n    \"\"\"\n    permission_classes = [CanViewMedicalRecords]\n    authentication_classes = [CustomJWTAuthentication]\n    pagination_class = StandardResultsSetPagination\n    def get(self, request):\n        user_role = request.auth.get('role', None) if request.auth else None\n        user_id = request.user.id",
        "detail": "services.medical-record-service.records.views",
        "documentation": {}
    },
    {
        "label": "TreatmentDetailAPIView",
        "kind": 6,
        "importPath": "services.medical-record-service.records.views",
        "description": "services.medical-record-service.records.views",
        "peekOfCode": "class TreatmentDetailAPIView(APIView):\n    \"\"\"\n    API endpoint để xem, cập nhật và xóa điều trị.\n    \"\"\"\n    permission_classes = [CanViewMedicalRecords]\n    authentication_classes = [CustomJWTAuthentication]\n    def get_object(self, pk):\n        try:\n            treatment = Treatment.objects.get(pk=pk)\n            user_role = self.request.auth.get('role', None) if self.request.auth else None",
        "detail": "services.medical-record-service.records.views",
        "documentation": {}
    },
    {
        "label": "AllergyListCreateAPIView",
        "kind": 6,
        "importPath": "services.medical-record-service.records.views",
        "description": "services.medical-record-service.records.views",
        "peekOfCode": "class AllergyListCreateAPIView(APIView):\n    \"\"\"\n    API endpoint để lấy danh sách và tạo mới dị ứng.\n    \"\"\"\n    permission_classes = [CanViewMedicalRecords]\n    authentication_classes = [CustomJWTAuthentication]\n    pagination_class = StandardResultsSetPagination\n    def get(self, request):\n        user_role = request.auth.get('role', None) if request.auth else None\n        user_id = request.user.id",
        "detail": "services.medical-record-service.records.views",
        "documentation": {}
    },
    {
        "label": "AllergyDetailAPIView",
        "kind": 6,
        "importPath": "services.medical-record-service.records.views",
        "description": "services.medical-record-service.records.views",
        "peekOfCode": "class AllergyDetailAPIView(APIView):\n    \"\"\"\n    API endpoint để xem, cập nhật và xóa dị ứng.\n    \"\"\"\n    permission_classes = [CanViewMedicalRecords]\n    authentication_classes = [CustomJWTAuthentication]\n    def get_object(self, pk):\n        try:\n            allergy = Allergy.objects.get(pk=pk)\n            user_role = self.request.auth.get('role', None) if self.request.auth else None",
        "detail": "services.medical-record-service.records.views",
        "documentation": {}
    },
    {
        "label": "ImmunizationListCreateAPIView",
        "kind": 6,
        "importPath": "services.medical-record-service.records.views",
        "description": "services.medical-record-service.records.views",
        "peekOfCode": "class ImmunizationListCreateAPIView(APIView):\n    \"\"\"\n    API endpoint để lấy danh sách và tạo mới tiêm chủng.\n    \"\"\"\n    permission_classes = [CanViewMedicalRecords]\n    authentication_classes = [CustomJWTAuthentication]\n    pagination_class = StandardResultsSetPagination\n    def get(self, request):\n        user_role = request.auth.get('role', None) if request.auth else None\n        user_id = request.user.id",
        "detail": "services.medical-record-service.records.views",
        "documentation": {}
    },
    {
        "label": "ImmunizationDetailAPIView",
        "kind": 6,
        "importPath": "services.medical-record-service.records.views",
        "description": "services.medical-record-service.records.views",
        "peekOfCode": "class ImmunizationDetailAPIView(APIView):\n    \"\"\"\n    API endpoint để xem, cập nhật và xóa tiêm chủng.\n    \"\"\"\n    permission_classes = [CanViewMedicalRecords]\n    authentication_classes = [CustomJWTAuthentication]\n    def get_object(self, pk):\n        try:\n            immunization = Immunization.objects.get(pk=pk)\n            user_role = self.request.auth.get('role', None) if self.request.auth else None",
        "detail": "services.medical-record-service.records.views",
        "documentation": {}
    },
    {
        "label": "MedicalHistoryListCreateAPIView",
        "kind": 6,
        "importPath": "services.medical-record-service.records.views",
        "description": "services.medical-record-service.records.views",
        "peekOfCode": "class MedicalHistoryListCreateAPIView(APIView):\n    \"\"\"\n    API endpoint để lấy danh sách và tạo mới lịch sử bệnh án.\n    \"\"\"\n    permission_classes = [CanViewMedicalRecords]\n    authentication_classes = [CustomJWTAuthentication]\n    pagination_class = StandardResultsSetPagination\n    def get(self, request):\n        user_role = request.auth.get('role', None) if request.auth else None\n        user_id = request.user.id",
        "detail": "services.medical-record-service.records.views",
        "documentation": {}
    },
    {
        "label": "MedicalHistoryDetailAPIView",
        "kind": 6,
        "importPath": "services.medical-record-service.records.views",
        "description": "services.medical-record-service.records.views",
        "peekOfCode": "class MedicalHistoryDetailAPIView(APIView):\n    \"\"\"\n    API endpoint để xem, cập nhật và xóa lịch sử bệnh án.\n    \"\"\"\n    permission_classes = [CanViewMedicalRecords]\n    authentication_classes = [CustomJWTAuthentication]\n    def get_object(self, pk):\n        try:\n            medical_history = MedicalHistory.objects.get(pk=pk)\n            user_role = self.request.auth.get('role', None) if self.request.auth else None",
        "detail": "services.medical-record-service.records.views",
        "documentation": {}
    },
    {
        "label": "MedicationListCreateAPIView",
        "kind": 6,
        "importPath": "services.medical-record-service.records.views",
        "description": "services.medical-record-service.records.views",
        "peekOfCode": "class MedicationListCreateAPIView(APIView):\n    \"\"\"\n    API endpoint để lấy danh sách và tạo mới thuốc.\n    \"\"\"\n    permission_classes = [CanViewMedicalRecords]\n    authentication_classes = [CustomJWTAuthentication]\n    pagination_class = StandardResultsSetPagination\n    def get(self, request):\n        user_role = request.auth.get('role', None) if request.auth else None\n        user_id = request.user.id",
        "detail": "services.medical-record-service.records.views",
        "documentation": {}
    },
    {
        "label": "MedicationDetailAPIView",
        "kind": 6,
        "importPath": "services.medical-record-service.records.views",
        "description": "services.medical-record-service.records.views",
        "peekOfCode": "class MedicationDetailAPIView(APIView):\n    \"\"\"\n    API endpoint để xem, cập nhật và xóa thuốc.\n    \"\"\"\n    permission_classes = [CanViewMedicalRecords]\n    authentication_classes = [CustomJWTAuthentication]\n    def get_object(self, pk):\n        try:\n            medication = Medication.objects.get(pk=pk)\n            user_role = self.request.auth.get('role', None) if self.request.auth else None",
        "detail": "services.medical-record-service.records.views",
        "documentation": {}
    },
    {
        "label": "VitalSignListCreateAPIView",
        "kind": 6,
        "importPath": "services.medical-record-service.records.views",
        "description": "services.medical-record-service.records.views",
        "peekOfCode": "class VitalSignListCreateAPIView(APIView):\n    \"\"\"\n    API endpoint để lấy danh sách và tạo mới dấu hiệu sinh tồn.\n    \"\"\"\n    permission_classes = [CanViewMedicalRecords]\n    authentication_classes = [CustomJWTAuthentication]\n    pagination_class = StandardResultsSetPagination\n    def get(self, request):\n        user_role = request.auth.get('role', None) if request.auth else None\n        user_id = request.user.id",
        "detail": "services.medical-record-service.records.views",
        "documentation": {}
    },
    {
        "label": "VitalSignDetailAPIView",
        "kind": 6,
        "importPath": "services.medical-record-service.records.views",
        "description": "services.medical-record-service.records.views",
        "peekOfCode": "class VitalSignDetailAPIView(APIView):\n    \"\"\"\n    API endpoint để xem, cập nhật và xóa dấu hiệu sinh tồn.\n    \"\"\"\n    permission_classes = [CanViewMedicalRecords]\n    authentication_classes = [CustomJWTAuthentication]\n    def get_object(self, pk):\n        try:\n            vital_sign = VitalSign.objects.get(pk=pk)\n            user_role = self.request.auth.get('role', None) if self.request.auth else None",
        "detail": "services.medical-record-service.records.views",
        "documentation": {}
    },
    {
        "label": "LabTestListCreateAPIView",
        "kind": 6,
        "importPath": "services.medical-record-service.records.views",
        "description": "services.medical-record-service.records.views",
        "peekOfCode": "class LabTestListCreateAPIView(APIView):\n    \"\"\"\n    API endpoint để lấy danh sách và tạo mới xét nghiệm.\n    \"\"\"\n    permission_classes = [CanViewMedicalRecords]\n    authentication_classes = [CustomJWTAuthentication]\n    pagination_class = StandardResultsSetPagination\n    def get(self, request):\n        user_role = request.auth.get('role', None) if request.auth else None\n        user_id = request.user.id",
        "detail": "services.medical-record-service.records.views",
        "documentation": {}
    },
    {
        "label": "LabTestDetailAPIView",
        "kind": 6,
        "importPath": "services.medical-record-service.records.views",
        "description": "services.medical-record-service.records.views",
        "peekOfCode": "class LabTestDetailAPIView(APIView):\n    \"\"\"\n    API endpoint để xem, cập nhật và xóa xét nghiệm.\n    \"\"\"\n    permission_classes = [CanViewMedicalRecords]\n    authentication_classes = [CustomJWTAuthentication]\n    def get_object(self, pk):\n        try:\n            lab_test = LabTest.objects.get(pk=pk)\n            user_role = self.request.auth.get('role', None) if self.request.auth else None",
        "detail": "services.medical-record-service.records.views",
        "documentation": {}
    },
    {
        "label": "LabResultListCreateAPIView",
        "kind": 6,
        "importPath": "services.medical-record-service.records.views",
        "description": "services.medical-record-service.records.views",
        "peekOfCode": "class LabResultListCreateAPIView(APIView):\n    \"\"\"\n    API endpoint để lấy danh sách và tạo mới kết quả xét nghiệm.\n    \"\"\"\n    permission_classes = [CanViewMedicalRecords]\n    authentication_classes = [CustomJWTAuthentication]\n    pagination_class = StandardResultsSetPagination\n    def get(self, request):\n        user_role = request.auth.get('role', None) if request.auth else None\n        user_id = request.user.id",
        "detail": "services.medical-record-service.records.views",
        "documentation": {}
    },
    {
        "label": "LabResultDetailAPIView",
        "kind": 6,
        "importPath": "services.medical-record-service.records.views",
        "description": "services.medical-record-service.records.views",
        "peekOfCode": "class LabResultDetailAPIView(APIView):\n    \"\"\"\n    API endpoint để xem, cập nhật và xóa kết quả xét nghiệm.\n    \"\"\"\n    permission_classes = [CanViewMedicalRecords]\n    authentication_classes = [CustomJWTAuthentication]\n    def get_object(self, pk):\n        try:\n            lab_result = LabResult.objects.get(pk=pk)\n            user_role = self.request.auth.get('role', None) if self.request.auth else None",
        "detail": "services.medical-record-service.records.views",
        "documentation": {}
    },
    {
        "label": "EncounterListCreateAPIView",
        "kind": 6,
        "importPath": "services.medical-record-service.records.views",
        "description": "services.medical-record-service.records.views",
        "peekOfCode": "class EncounterListCreateAPIView(APIView):\n    \"\"\"\n    API endpoint để lấy danh sách và tạo mới phiên khám của bệnh nhân.\n    \"\"\"\n    permission_classes = [CanViewMedicalRecords]\n    pagination_class = StandardResultsSetPagination\n    authentication_classes = [CustomJWTAuthentication]\n    def get(self, request):\n        user_role = request.auth.get('role', None) if request.auth else None\n        user_id = request.user.id",
        "detail": "services.medical-record-service.records.views",
        "documentation": {}
    },
    {
        "label": "EncounterDetailAPIView",
        "kind": 6,
        "importPath": "services.medical-record-service.records.views",
        "description": "services.medical-record-service.records.views",
        "peekOfCode": "class EncounterDetailAPIView(APIView):\n    \"\"\"\n    API endpoint để xem, cập nhật và xóa một phiên khám.\n    \"\"\"\n    permission_classes = [CanViewMedicalRecords]\n    authentication_classes = [CustomJWTAuthentication]\n    def get_object(self, pk):\n        try:\n            return Encounter.objects.get(pk=pk)\n        except Encounter.DoesNotExist:",
        "detail": "services.medical-record-service.records.views",
        "documentation": {}
    },
    {
        "label": "update_encounter_status",
        "kind": 2,
        "importPath": "services.medical-record-service.records.views",
        "description": "services.medical-record-service.records.views",
        "peekOfCode": "def update_encounter_status(request, encounter_id):\n    \"\"\"\n    API endpoint để cập nhật trạng thái cuộc gặp.\n    \"\"\"\n    # Lấy cuộc gặp\n    try:\n        encounter = Encounter.objects.get(id=encounter_id)\n    except Encounter.DoesNotExist:\n        return Response({\"detail\": \"Encounter not found.\"}, status=status.HTTP_404_NOT_FOUND)\n    # Kiểm tra quyền truy cập",
        "detail": "services.medical-record-service.records.views",
        "documentation": {}
    },
    {
        "label": "create_encounter_from_appointment",
        "kind": 2,
        "importPath": "services.medical-record-service.records.views",
        "description": "services.medical-record-service.records.views",
        "peekOfCode": "def create_encounter_from_appointment(request, appointment_id):\n    \"\"\"\n    API endpoint để tạo Encounter từ Appointment.\n    \"\"\"\n    # Lấy token xác thực từ request\n    auth_header = request.META.get('HTTP_AUTHORIZATION')\n    auth_token = None\n    if auth_header and auth_header.startswith('Bearer '):\n        auth_token = auth_header.split(' ')[1]\n    # Lấy thông tin appointment từ appointment-service",
        "detail": "services.medical-record-service.records.views",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "services.medical-record-service.records.views",
        "description": "services.medical-record-service.records.views",
        "peekOfCode": "logger = logging.getLogger(__name__)\n@api_view(['PATCH'])\n@authentication_classes([CustomJWTAuthentication])\n@permission_classes([IsDoctor | IsAdmin])\ndef update_encounter_status(request, encounter_id):\n    \"\"\"\n    API endpoint để cập nhật trạng thái cuộc gặp.\n    \"\"\"\n    # Lấy cuộc gặp\n    try:",
        "detail": "services.medical-record-service.records.views",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "services.medical-record-service.manage",
        "description": "services.medical-record-service.manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'core.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "services.medical-record-service.manage",
        "documentation": {}
    },
    {
        "label": "django_asgi_app",
        "kind": 5,
        "importPath": "services.notification-service.core.asgi",
        "description": "services.notification-service.core.asgi",
        "peekOfCode": "django_asgi_app = get_asgi_application()\n# Import after initializing Django\nfrom notification.routing import websocket_urlpatterns\napplication = ProtocolTypeRouter({\n    # Django's ASGI application to handle traditional HTTP requests\n    'http': django_asgi_app,\n    # WebSocket handler\n    'websocket': AllowedHostsOriginValidator(\n        AuthMiddlewareStack(\n            URLRouter(",
        "detail": "services.notification-service.core.asgi",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "services.notification-service.core.asgi",
        "description": "services.notification-service.core.asgi",
        "peekOfCode": "application = ProtocolTypeRouter({\n    # Django's ASGI application to handle traditional HTTP requests\n    'http': django_asgi_app,\n    # WebSocket handler\n    'websocket': AllowedHostsOriginValidator(\n        AuthMiddlewareStack(\n            URLRouter(\n                websocket_urlpatterns\n            )\n        )",
        "detail": "services.notification-service.core.asgi",
        "documentation": {}
    },
    {
        "label": "debug_task",
        "kind": 2,
        "importPath": "services.notification-service.core.celery",
        "description": "services.notification-service.core.celery",
        "peekOfCode": "def debug_task(self):\n    print(f'Request: {self.request!r}')",
        "detail": "services.notification-service.core.celery",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "services.notification-service.core.celery",
        "description": "services.notification-service.core.celery",
        "peekOfCode": "app = Celery('notification')\n# Using a string here means the worker doesn't have to serialize\n# the configuration object to child processes.\napp.config_from_object('django.conf:settings', namespace='CELERY')\n# Load task modules from all registered Django apps.\napp.autodiscover_tasks()\n@app.task(bind=True, ignore_result=True)\ndef debug_task(self):\n    print(f'Request: {self.request!r}')",
        "detail": "services.notification-service.core.celery",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "services.notification-service.core.settings",
        "description": "services.notification-service.core.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure-key')\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = os.environ.get('DEBUG', 'False') == 'True'\nALLOWED_HOSTS = ['*']\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',",
        "detail": "services.notification-service.core.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "services.notification-service.core.settings",
        "description": "services.notification-service.core.settings",
        "peekOfCode": "SECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure-key')\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = os.environ.get('DEBUG', 'False') == 'True'\nALLOWED_HOSTS = ['*']\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',",
        "detail": "services.notification-service.core.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "services.notification-service.core.settings",
        "description": "services.notification-service.core.settings",
        "peekOfCode": "DEBUG = os.environ.get('DEBUG', 'False') == 'True'\nALLOWED_HOSTS = ['*']\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',",
        "detail": "services.notification-service.core.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "services.notification-service.core.settings",
        "description": "services.notification-service.core.settings",
        "peekOfCode": "ALLOWED_HOSTS = ['*']\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    # Third-party apps",
        "detail": "services.notification-service.core.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "services.notification-service.core.settings",
        "description": "services.notification-service.core.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    # Third-party apps\n    'rest_framework',\n    'rest_framework_simplejwt',",
        "detail": "services.notification-service.core.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "services.notification-service.core.settings",
        "description": "services.notification-service.core.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'corsheaders.middleware.CorsMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]",
        "detail": "services.notification-service.core.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "services.notification-service.core.settings",
        "description": "services.notification-service.core.settings",
        "peekOfCode": "ROOT_URLCONF = 'core.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',",
        "detail": "services.notification-service.core.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "services.notification-service.core.settings",
        "description": "services.notification-service.core.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "services.notification-service.core.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "services.notification-service.core.settings",
        "description": "services.notification-service.core.settings",
        "peekOfCode": "WSGI_APPLICATION = 'core.wsgi.application'\nASGI_APPLICATION = 'core.asgi.application'\nCHANNEL_LAYERS = {\n    'default': {\n        'BACKEND': 'channels_redis.core.RedisChannelLayer',\n        'CONFIG': {\n            'hosts': [os.environ.get('REDIS_URL', 'redis://redis:6379/0')],\n        },\n    },\n}",
        "detail": "services.notification-service.core.settings",
        "documentation": {}
    },
    {
        "label": "ASGI_APPLICATION",
        "kind": 5,
        "importPath": "services.notification-service.core.settings",
        "description": "services.notification-service.core.settings",
        "peekOfCode": "ASGI_APPLICATION = 'core.asgi.application'\nCHANNEL_LAYERS = {\n    'default': {\n        'BACKEND': 'channels_redis.core.RedisChannelLayer',\n        'CONFIG': {\n            'hosts': [os.environ.get('REDIS_URL', 'redis://redis:6379/0')],\n        },\n    },\n}\nASGI_APPLICATION = 'core.asgi.application'",
        "detail": "services.notification-service.core.settings",
        "documentation": {}
    },
    {
        "label": "CHANNEL_LAYERS",
        "kind": 5,
        "importPath": "services.notification-service.core.settings",
        "description": "services.notification-service.core.settings",
        "peekOfCode": "CHANNEL_LAYERS = {\n    'default': {\n        'BACKEND': 'channels_redis.core.RedisChannelLayer',\n        'CONFIG': {\n            'hosts': [os.environ.get('REDIS_URL', 'redis://redis:6379/0')],\n        },\n    },\n}\nASGI_APPLICATION = 'core.asgi.application'\n# Channel layers",
        "detail": "services.notification-service.core.settings",
        "documentation": {}
    },
    {
        "label": "ASGI_APPLICATION",
        "kind": 5,
        "importPath": "services.notification-service.core.settings",
        "description": "services.notification-service.core.settings",
        "peekOfCode": "ASGI_APPLICATION = 'core.asgi.application'\n# Channel layers\nCHANNEL_LAYERS = {\n    'default': {\n        'BACKEND': 'channels_redis.core.RedisChannelLayer',\n        'CONFIG': {\n            'hosts': [os.environ.get('REDIS_URL', 'redis://redis:6379/0')],\n        },\n    },\n}",
        "detail": "services.notification-service.core.settings",
        "documentation": {}
    },
    {
        "label": "CHANNEL_LAYERS",
        "kind": 5,
        "importPath": "services.notification-service.core.settings",
        "description": "services.notification-service.core.settings",
        "peekOfCode": "CHANNEL_LAYERS = {\n    'default': {\n        'BACKEND': 'channels_redis.core.RedisChannelLayer',\n        'CONFIG': {\n            'hosts': [os.environ.get('REDIS_URL', 'redis://redis:6379/0')],\n        },\n    },\n}\n# Database\nDATABASES = {",
        "detail": "services.notification-service.core.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "services.notification-service.core.settings",
        "description": "services.notification-service.core.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql',\n        'NAME': os.environ.get('DATABASE_NAME', 'healthcare_notification'),\n        'USER': os.environ.get('DATABASE_USER', 'postgres'),\n        'PASSWORD': os.environ.get('DATABASE_PASSWORD', 'postgres'),\n        'HOST': os.environ.get('DATABASE_HOST', 'postgres'),\n        'PORT': os.environ.get('DATABASE_PORT', '5432'),\n    }\n}",
        "detail": "services.notification-service.core.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "services.notification-service.core.settings",
        "description": "services.notification-service.core.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "services.notification-service.core.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "services.notification-service.core.settings",
        "description": "services.notification-service.core.settings",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\nSTATIC_URL = 'static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\n# Default primary key field type\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# URL settings",
        "detail": "services.notification-service.core.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "services.notification-service.core.settings",
        "description": "services.notification-service.core.settings",
        "peekOfCode": "TIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\nSTATIC_URL = 'static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\n# Default primary key field type\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# URL settings\nAPPEND_SLASH = True",
        "detail": "services.notification-service.core.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "services.notification-service.core.settings",
        "description": "services.notification-service.core.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\nSTATIC_URL = 'static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\n# Default primary key field type\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# URL settings\nAPPEND_SLASH = True\n# REST Framework settings",
        "detail": "services.notification-service.core.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "services.notification-service.core.settings",
        "description": "services.notification-service.core.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\nSTATIC_URL = 'static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\n# Default primary key field type\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# URL settings\nAPPEND_SLASH = True\n# REST Framework settings\nREST_FRAMEWORK = {",
        "detail": "services.notification-service.core.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "services.notification-service.core.settings",
        "description": "services.notification-service.core.settings",
        "peekOfCode": "STATIC_URL = 'static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\n# Default primary key field type\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# URL settings\nAPPEND_SLASH = True\n# REST Framework settings\nREST_FRAMEWORK = {\n    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',\n    'PAGE_SIZE': 10,",
        "detail": "services.notification-service.core.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_ROOT",
        "kind": 5,
        "importPath": "services.notification-service.core.settings",
        "description": "services.notification-service.core.settings",
        "peekOfCode": "STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\n# Default primary key field type\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# URL settings\nAPPEND_SLASH = True\n# REST Framework settings\nREST_FRAMEWORK = {\n    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',\n    'PAGE_SIZE': 10,\n    'DEFAULT_AUTHENTICATION_CLASSES': (",
        "detail": "services.notification-service.core.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "services.notification-service.core.settings",
        "description": "services.notification-service.core.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# URL settings\nAPPEND_SLASH = True\n# REST Framework settings\nREST_FRAMEWORK = {\n    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',\n    'PAGE_SIZE': 10,\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'common_auth.authentication.ServiceAuthentication',\n        'rest_framework_simplejwt.authentication.JWTAuthentication',",
        "detail": "services.notification-service.core.settings",
        "documentation": {}
    },
    {
        "label": "APPEND_SLASH",
        "kind": 5,
        "importPath": "services.notification-service.core.settings",
        "description": "services.notification-service.core.settings",
        "peekOfCode": "APPEND_SLASH = True\n# REST Framework settings\nREST_FRAMEWORK = {\n    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',\n    'PAGE_SIZE': 10,\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'common_auth.authentication.ServiceAuthentication',\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n    ),\n    'DEFAULT_PERMISSION_CLASSES': [",
        "detail": "services.notification-service.core.settings",
        "documentation": {}
    },
    {
        "label": "REST_FRAMEWORK",
        "kind": 5,
        "importPath": "services.notification-service.core.settings",
        "description": "services.notification-service.core.settings",
        "peekOfCode": "REST_FRAMEWORK = {\n    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',\n    'PAGE_SIZE': 10,\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'common_auth.authentication.ServiceAuthentication',\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n    ),\n    'DEFAULT_PERMISSION_CLASSES': [\n        'common_auth.permissions.IsAuthenticated',\n        'rest_framework.permissions.IsAuthenticated',",
        "detail": "services.notification-service.core.settings",
        "documentation": {}
    },
    {
        "label": "CORS_ALLOW_ALL_ORIGINS",
        "kind": 5,
        "importPath": "services.notification-service.core.settings",
        "description": "services.notification-service.core.settings",
        "peekOfCode": "CORS_ALLOW_ALL_ORIGINS = True\n# Celery settings\nCELERY_BROKER_URL = os.environ.get('CELERY_BROKER_URL', 'redis://redis:6379/0')\nCELERY_RESULT_BACKEND = os.environ.get('CELERY_RESULT_BACKEND', 'redis://redis:6379/0')\nCELERY_ACCEPT_CONTENT = ['json']\nCELERY_TASK_SERIALIZER = 'json'\nCELERY_RESULT_SERIALIZER = 'json'\nCELERY_TIMEZONE = TIME_ZONE\n# Email settings\nEMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'",
        "detail": "services.notification-service.core.settings",
        "documentation": {}
    },
    {
        "label": "CELERY_BROKER_URL",
        "kind": 5,
        "importPath": "services.notification-service.core.settings",
        "description": "services.notification-service.core.settings",
        "peekOfCode": "CELERY_BROKER_URL = os.environ.get('CELERY_BROKER_URL', 'redis://redis:6379/0')\nCELERY_RESULT_BACKEND = os.environ.get('CELERY_RESULT_BACKEND', 'redis://redis:6379/0')\nCELERY_ACCEPT_CONTENT = ['json']\nCELERY_TASK_SERIALIZER = 'json'\nCELERY_RESULT_SERIALIZER = 'json'\nCELERY_TIMEZONE = TIME_ZONE\n# Email settings\nEMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\nEMAIL_HOST = os.environ.get('EMAIL_HOST', 'smtp.gmail.com')\nEMAIL_PORT = int(os.environ.get('EMAIL_PORT', 587))",
        "detail": "services.notification-service.core.settings",
        "documentation": {}
    },
    {
        "label": "CELERY_RESULT_BACKEND",
        "kind": 5,
        "importPath": "services.notification-service.core.settings",
        "description": "services.notification-service.core.settings",
        "peekOfCode": "CELERY_RESULT_BACKEND = os.environ.get('CELERY_RESULT_BACKEND', 'redis://redis:6379/0')\nCELERY_ACCEPT_CONTENT = ['json']\nCELERY_TASK_SERIALIZER = 'json'\nCELERY_RESULT_SERIALIZER = 'json'\nCELERY_TIMEZONE = TIME_ZONE\n# Email settings\nEMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\nEMAIL_HOST = os.environ.get('EMAIL_HOST', 'smtp.gmail.com')\nEMAIL_PORT = int(os.environ.get('EMAIL_PORT', 587))\nEMAIL_USE_TLS = os.environ.get('EMAIL_USE_TLS', 'True') == 'True'",
        "detail": "services.notification-service.core.settings",
        "documentation": {}
    },
    {
        "label": "CELERY_ACCEPT_CONTENT",
        "kind": 5,
        "importPath": "services.notification-service.core.settings",
        "description": "services.notification-service.core.settings",
        "peekOfCode": "CELERY_ACCEPT_CONTENT = ['json']\nCELERY_TASK_SERIALIZER = 'json'\nCELERY_RESULT_SERIALIZER = 'json'\nCELERY_TIMEZONE = TIME_ZONE\n# Email settings\nEMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\nEMAIL_HOST = os.environ.get('EMAIL_HOST', 'smtp.gmail.com')\nEMAIL_PORT = int(os.environ.get('EMAIL_PORT', 587))\nEMAIL_USE_TLS = os.environ.get('EMAIL_USE_TLS', 'True') == 'True'\nEMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER', '')",
        "detail": "services.notification-service.core.settings",
        "documentation": {}
    },
    {
        "label": "CELERY_TASK_SERIALIZER",
        "kind": 5,
        "importPath": "services.notification-service.core.settings",
        "description": "services.notification-service.core.settings",
        "peekOfCode": "CELERY_TASK_SERIALIZER = 'json'\nCELERY_RESULT_SERIALIZER = 'json'\nCELERY_TIMEZONE = TIME_ZONE\n# Email settings\nEMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\nEMAIL_HOST = os.environ.get('EMAIL_HOST', 'smtp.gmail.com')\nEMAIL_PORT = int(os.environ.get('EMAIL_PORT', 587))\nEMAIL_USE_TLS = os.environ.get('EMAIL_USE_TLS', 'True') == 'True'\nEMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER', '')\nEMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD', '')",
        "detail": "services.notification-service.core.settings",
        "documentation": {}
    },
    {
        "label": "CELERY_RESULT_SERIALIZER",
        "kind": 5,
        "importPath": "services.notification-service.core.settings",
        "description": "services.notification-service.core.settings",
        "peekOfCode": "CELERY_RESULT_SERIALIZER = 'json'\nCELERY_TIMEZONE = TIME_ZONE\n# Email settings\nEMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\nEMAIL_HOST = os.environ.get('EMAIL_HOST', 'smtp.gmail.com')\nEMAIL_PORT = int(os.environ.get('EMAIL_PORT', 587))\nEMAIL_USE_TLS = os.environ.get('EMAIL_USE_TLS', 'True') == 'True'\nEMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER', '')\nEMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD', '')\nDEFAULT_FROM_EMAIL = os.environ.get('DEFAULT_FROM_EMAIL', 'noreply@healthcare.com')",
        "detail": "services.notification-service.core.settings",
        "documentation": {}
    },
    {
        "label": "CELERY_TIMEZONE",
        "kind": 5,
        "importPath": "services.notification-service.core.settings",
        "description": "services.notification-service.core.settings",
        "peekOfCode": "CELERY_TIMEZONE = TIME_ZONE\n# Email settings\nEMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\nEMAIL_HOST = os.environ.get('EMAIL_HOST', 'smtp.gmail.com')\nEMAIL_PORT = int(os.environ.get('EMAIL_PORT', 587))\nEMAIL_USE_TLS = os.environ.get('EMAIL_USE_TLS', 'True') == 'True'\nEMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER', '')\nEMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD', '')\nDEFAULT_FROM_EMAIL = os.environ.get('DEFAULT_FROM_EMAIL', 'noreply@healthcare.com')\n# SendGrid settings",
        "detail": "services.notification-service.core.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_BACKEND",
        "kind": 5,
        "importPath": "services.notification-service.core.settings",
        "description": "services.notification-service.core.settings",
        "peekOfCode": "EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\nEMAIL_HOST = os.environ.get('EMAIL_HOST', 'smtp.gmail.com')\nEMAIL_PORT = int(os.environ.get('EMAIL_PORT', 587))\nEMAIL_USE_TLS = os.environ.get('EMAIL_USE_TLS', 'True') == 'True'\nEMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER', '')\nEMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD', '')\nDEFAULT_FROM_EMAIL = os.environ.get('DEFAULT_FROM_EMAIL', 'noreply@healthcare.com')\n# SendGrid settings\nSENDGRID_API_KEY = os.environ.get('SENDGRID_API_KEY', '')\nUSE_SENDGRID = os.environ.get('USE_SENDGRID', 'False') == 'True'",
        "detail": "services.notification-service.core.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST",
        "kind": 5,
        "importPath": "services.notification-service.core.settings",
        "description": "services.notification-service.core.settings",
        "peekOfCode": "EMAIL_HOST = os.environ.get('EMAIL_HOST', 'smtp.gmail.com')\nEMAIL_PORT = int(os.environ.get('EMAIL_PORT', 587))\nEMAIL_USE_TLS = os.environ.get('EMAIL_USE_TLS', 'True') == 'True'\nEMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER', '')\nEMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD', '')\nDEFAULT_FROM_EMAIL = os.environ.get('DEFAULT_FROM_EMAIL', 'noreply@healthcare.com')\n# SendGrid settings\nSENDGRID_API_KEY = os.environ.get('SENDGRID_API_KEY', '')\nUSE_SENDGRID = os.environ.get('USE_SENDGRID', 'False') == 'True'\n# Twilio settings",
        "detail": "services.notification-service.core.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_PORT",
        "kind": 5,
        "importPath": "services.notification-service.core.settings",
        "description": "services.notification-service.core.settings",
        "peekOfCode": "EMAIL_PORT = int(os.environ.get('EMAIL_PORT', 587))\nEMAIL_USE_TLS = os.environ.get('EMAIL_USE_TLS', 'True') == 'True'\nEMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER', '')\nEMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD', '')\nDEFAULT_FROM_EMAIL = os.environ.get('DEFAULT_FROM_EMAIL', 'noreply@healthcare.com')\n# SendGrid settings\nSENDGRID_API_KEY = os.environ.get('SENDGRID_API_KEY', '')\nUSE_SENDGRID = os.environ.get('USE_SENDGRID', 'False') == 'True'\n# Twilio settings\nTWILIO_ACCOUNT_SID = os.environ.get('TWILIO_ACCOUNT_SID', '')",
        "detail": "services.notification-service.core.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_USE_TLS",
        "kind": 5,
        "importPath": "services.notification-service.core.settings",
        "description": "services.notification-service.core.settings",
        "peekOfCode": "EMAIL_USE_TLS = os.environ.get('EMAIL_USE_TLS', 'True') == 'True'\nEMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER', '')\nEMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD', '')\nDEFAULT_FROM_EMAIL = os.environ.get('DEFAULT_FROM_EMAIL', 'noreply@healthcare.com')\n# SendGrid settings\nSENDGRID_API_KEY = os.environ.get('SENDGRID_API_KEY', '')\nUSE_SENDGRID = os.environ.get('USE_SENDGRID', 'False') == 'True'\n# Twilio settings\nTWILIO_ACCOUNT_SID = os.environ.get('TWILIO_ACCOUNT_SID', '')\nTWILIO_AUTH_TOKEN = os.environ.get('TWILIO_AUTH_TOKEN', '')",
        "detail": "services.notification-service.core.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST_USER",
        "kind": 5,
        "importPath": "services.notification-service.core.settings",
        "description": "services.notification-service.core.settings",
        "peekOfCode": "EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER', '')\nEMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD', '')\nDEFAULT_FROM_EMAIL = os.environ.get('DEFAULT_FROM_EMAIL', 'noreply@healthcare.com')\n# SendGrid settings\nSENDGRID_API_KEY = os.environ.get('SENDGRID_API_KEY', '')\nUSE_SENDGRID = os.environ.get('USE_SENDGRID', 'False') == 'True'\n# Twilio settings\nTWILIO_ACCOUNT_SID = os.environ.get('TWILIO_ACCOUNT_SID', '')\nTWILIO_AUTH_TOKEN = os.environ.get('TWILIO_AUTH_TOKEN', '')\nTWILIO_PHONE_NUMBER = os.environ.get('TWILIO_PHONE_NUMBER', '')",
        "detail": "services.notification-service.core.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST_PASSWORD",
        "kind": 5,
        "importPath": "services.notification-service.core.settings",
        "description": "services.notification-service.core.settings",
        "peekOfCode": "EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD', '')\nDEFAULT_FROM_EMAIL = os.environ.get('DEFAULT_FROM_EMAIL', 'noreply@healthcare.com')\n# SendGrid settings\nSENDGRID_API_KEY = os.environ.get('SENDGRID_API_KEY', '')\nUSE_SENDGRID = os.environ.get('USE_SENDGRID', 'False') == 'True'\n# Twilio settings\nTWILIO_ACCOUNT_SID = os.environ.get('TWILIO_ACCOUNT_SID', '')\nTWILIO_AUTH_TOKEN = os.environ.get('TWILIO_AUTH_TOKEN', '')\nTWILIO_PHONE_NUMBER = os.environ.get('TWILIO_PHONE_NUMBER', '')\nUSE_TWILIO = os.environ.get('USE_TWILIO', 'False') == 'True'",
        "detail": "services.notification-service.core.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_FROM_EMAIL",
        "kind": 5,
        "importPath": "services.notification-service.core.settings",
        "description": "services.notification-service.core.settings",
        "peekOfCode": "DEFAULT_FROM_EMAIL = os.environ.get('DEFAULT_FROM_EMAIL', 'noreply@healthcare.com')\n# SendGrid settings\nSENDGRID_API_KEY = os.environ.get('SENDGRID_API_KEY', '')\nUSE_SENDGRID = os.environ.get('USE_SENDGRID', 'False') == 'True'\n# Twilio settings\nTWILIO_ACCOUNT_SID = os.environ.get('TWILIO_ACCOUNT_SID', '')\nTWILIO_AUTH_TOKEN = os.environ.get('TWILIO_AUTH_TOKEN', '')\nTWILIO_PHONE_NUMBER = os.environ.get('TWILIO_PHONE_NUMBER', '')\nUSE_TWILIO = os.environ.get('USE_TWILIO', 'False') == 'True'\n# Service URLs",
        "detail": "services.notification-service.core.settings",
        "documentation": {}
    },
    {
        "label": "SENDGRID_API_KEY",
        "kind": 5,
        "importPath": "services.notification-service.core.settings",
        "description": "services.notification-service.core.settings",
        "peekOfCode": "SENDGRID_API_KEY = os.environ.get('SENDGRID_API_KEY', '')\nUSE_SENDGRID = os.environ.get('USE_SENDGRID', 'False') == 'True'\n# Twilio settings\nTWILIO_ACCOUNT_SID = os.environ.get('TWILIO_ACCOUNT_SID', '')\nTWILIO_AUTH_TOKEN = os.environ.get('TWILIO_AUTH_TOKEN', '')\nTWILIO_PHONE_NUMBER = os.environ.get('TWILIO_PHONE_NUMBER', '')\nUSE_TWILIO = os.environ.get('USE_TWILIO', 'False') == 'True'\n# Service URLs\nAPI_GATEWAY_URL = os.environ.get('API_GATEWAY_URL', 'http://api-gateway:4000')\nUSER_SERVICE_URL = os.environ.get('USER_SERVICE_URL', 'http://user-service:8000')",
        "detail": "services.notification-service.core.settings",
        "documentation": {}
    },
    {
        "label": "USE_SENDGRID",
        "kind": 5,
        "importPath": "services.notification-service.core.settings",
        "description": "services.notification-service.core.settings",
        "peekOfCode": "USE_SENDGRID = os.environ.get('USE_SENDGRID', 'False') == 'True'\n# Twilio settings\nTWILIO_ACCOUNT_SID = os.environ.get('TWILIO_ACCOUNT_SID', '')\nTWILIO_AUTH_TOKEN = os.environ.get('TWILIO_AUTH_TOKEN', '')\nTWILIO_PHONE_NUMBER = os.environ.get('TWILIO_PHONE_NUMBER', '')\nUSE_TWILIO = os.environ.get('USE_TWILIO', 'False') == 'True'\n# Service URLs\nAPI_GATEWAY_URL = os.environ.get('API_GATEWAY_URL', 'http://api-gateway:4000')\nUSER_SERVICE_URL = os.environ.get('USER_SERVICE_URL', 'http://user-service:8000')\nMEDICAL_RECORD_SERVICE_URL = os.environ.get('MEDICAL_RECORD_SERVICE_URL', 'http://medical-record-service:8001')",
        "detail": "services.notification-service.core.settings",
        "documentation": {}
    },
    {
        "label": "TWILIO_ACCOUNT_SID",
        "kind": 5,
        "importPath": "services.notification-service.core.settings",
        "description": "services.notification-service.core.settings",
        "peekOfCode": "TWILIO_ACCOUNT_SID = os.environ.get('TWILIO_ACCOUNT_SID', '')\nTWILIO_AUTH_TOKEN = os.environ.get('TWILIO_AUTH_TOKEN', '')\nTWILIO_PHONE_NUMBER = os.environ.get('TWILIO_PHONE_NUMBER', '')\nUSE_TWILIO = os.environ.get('USE_TWILIO', 'False') == 'True'\n# Service URLs\nAPI_GATEWAY_URL = os.environ.get('API_GATEWAY_URL', 'http://api-gateway:4000')\nUSER_SERVICE_URL = os.environ.get('USER_SERVICE_URL', 'http://user-service:8000')\nMEDICAL_RECORD_SERVICE_URL = os.environ.get('MEDICAL_RECORD_SERVICE_URL', 'http://medical-record-service:8001')\nAPPOINTMENT_SERVICE_URL = os.environ.get('APPOINTMENT_SERVICE_URL', 'http://appointment-service:8002')\nBILLING_SERVICE_URL = os.environ.get('BILLING_SERVICE_URL', 'http://billing-service:8003')",
        "detail": "services.notification-service.core.settings",
        "documentation": {}
    },
    {
        "label": "TWILIO_AUTH_TOKEN",
        "kind": 5,
        "importPath": "services.notification-service.core.settings",
        "description": "services.notification-service.core.settings",
        "peekOfCode": "TWILIO_AUTH_TOKEN = os.environ.get('TWILIO_AUTH_TOKEN', '')\nTWILIO_PHONE_NUMBER = os.environ.get('TWILIO_PHONE_NUMBER', '')\nUSE_TWILIO = os.environ.get('USE_TWILIO', 'False') == 'True'\n# Service URLs\nAPI_GATEWAY_URL = os.environ.get('API_GATEWAY_URL', 'http://api-gateway:4000')\nUSER_SERVICE_URL = os.environ.get('USER_SERVICE_URL', 'http://user-service:8000')\nMEDICAL_RECORD_SERVICE_URL = os.environ.get('MEDICAL_RECORD_SERVICE_URL', 'http://medical-record-service:8001')\nAPPOINTMENT_SERVICE_URL = os.environ.get('APPOINTMENT_SERVICE_URL', 'http://appointment-service:8002')\nBILLING_SERVICE_URL = os.environ.get('BILLING_SERVICE_URL', 'http://billing-service:8003')\nPHARMACY_SERVICE_URL = os.environ.get('PHARMACY_SERVICE_URL', 'http://pharmacy-service:8004')",
        "detail": "services.notification-service.core.settings",
        "documentation": {}
    },
    {
        "label": "TWILIO_PHONE_NUMBER",
        "kind": 5,
        "importPath": "services.notification-service.core.settings",
        "description": "services.notification-service.core.settings",
        "peekOfCode": "TWILIO_PHONE_NUMBER = os.environ.get('TWILIO_PHONE_NUMBER', '')\nUSE_TWILIO = os.environ.get('USE_TWILIO', 'False') == 'True'\n# Service URLs\nAPI_GATEWAY_URL = os.environ.get('API_GATEWAY_URL', 'http://api-gateway:4000')\nUSER_SERVICE_URL = os.environ.get('USER_SERVICE_URL', 'http://user-service:8000')\nMEDICAL_RECORD_SERVICE_URL = os.environ.get('MEDICAL_RECORD_SERVICE_URL', 'http://medical-record-service:8001')\nAPPOINTMENT_SERVICE_URL = os.environ.get('APPOINTMENT_SERVICE_URL', 'http://appointment-service:8002')\nBILLING_SERVICE_URL = os.environ.get('BILLING_SERVICE_URL', 'http://billing-service:8003')\nPHARMACY_SERVICE_URL = os.environ.get('PHARMACY_SERVICE_URL', 'http://pharmacy-service:8004')\nLABORATORY_SERVICE_URL = os.environ.get('LABORATORY_SERVICE_URL', 'http://laboratory-service:8005')",
        "detail": "services.notification-service.core.settings",
        "documentation": {}
    },
    {
        "label": "USE_TWILIO",
        "kind": 5,
        "importPath": "services.notification-service.core.settings",
        "description": "services.notification-service.core.settings",
        "peekOfCode": "USE_TWILIO = os.environ.get('USE_TWILIO', 'False') == 'True'\n# Service URLs\nAPI_GATEWAY_URL = os.environ.get('API_GATEWAY_URL', 'http://api-gateway:4000')\nUSER_SERVICE_URL = os.environ.get('USER_SERVICE_URL', 'http://user-service:8000')\nMEDICAL_RECORD_SERVICE_URL = os.environ.get('MEDICAL_RECORD_SERVICE_URL', 'http://medical-record-service:8001')\nAPPOINTMENT_SERVICE_URL = os.environ.get('APPOINTMENT_SERVICE_URL', 'http://appointment-service:8002')\nBILLING_SERVICE_URL = os.environ.get('BILLING_SERVICE_URL', 'http://billing-service:8003')\nPHARMACY_SERVICE_URL = os.environ.get('PHARMACY_SERVICE_URL', 'http://pharmacy-service:8004')\nLABORATORY_SERVICE_URL = os.environ.get('LABORATORY_SERVICE_URL', 'http://laboratory-service:8005')\n# Common Auth settings",
        "detail": "services.notification-service.core.settings",
        "documentation": {}
    },
    {
        "label": "API_GATEWAY_URL",
        "kind": 5,
        "importPath": "services.notification-service.core.settings",
        "description": "services.notification-service.core.settings",
        "peekOfCode": "API_GATEWAY_URL = os.environ.get('API_GATEWAY_URL', 'http://api-gateway:4000')\nUSER_SERVICE_URL = os.environ.get('USER_SERVICE_URL', 'http://user-service:8000')\nMEDICAL_RECORD_SERVICE_URL = os.environ.get('MEDICAL_RECORD_SERVICE_URL', 'http://medical-record-service:8001')\nAPPOINTMENT_SERVICE_URL = os.environ.get('APPOINTMENT_SERVICE_URL', 'http://appointment-service:8002')\nBILLING_SERVICE_URL = os.environ.get('BILLING_SERVICE_URL', 'http://billing-service:8003')\nPHARMACY_SERVICE_URL = os.environ.get('PHARMACY_SERVICE_URL', 'http://pharmacy-service:8004')\nLABORATORY_SERVICE_URL = os.environ.get('LABORATORY_SERVICE_URL', 'http://laboratory-service:8005')\n# Common Auth settings\nREDIS_URL = os.environ.get('REDIS_URL', 'redis://redis:6379/0')\n# Đặt JWT_SECRET cố định để đảm bảo nhất quán với các service khác",
        "detail": "services.notification-service.core.settings",
        "documentation": {}
    },
    {
        "label": "USER_SERVICE_URL",
        "kind": 5,
        "importPath": "services.notification-service.core.settings",
        "description": "services.notification-service.core.settings",
        "peekOfCode": "USER_SERVICE_URL = os.environ.get('USER_SERVICE_URL', 'http://user-service:8000')\nMEDICAL_RECORD_SERVICE_URL = os.environ.get('MEDICAL_RECORD_SERVICE_URL', 'http://medical-record-service:8001')\nAPPOINTMENT_SERVICE_URL = os.environ.get('APPOINTMENT_SERVICE_URL', 'http://appointment-service:8002')\nBILLING_SERVICE_URL = os.environ.get('BILLING_SERVICE_URL', 'http://billing-service:8003')\nPHARMACY_SERVICE_URL = os.environ.get('PHARMACY_SERVICE_URL', 'http://pharmacy-service:8004')\nLABORATORY_SERVICE_URL = os.environ.get('LABORATORY_SERVICE_URL', 'http://laboratory-service:8005')\n# Common Auth settings\nREDIS_URL = os.environ.get('REDIS_URL', 'redis://redis:6379/0')\n# Đặt JWT_SECRET cố định để đảm bảo nhất quán với các service khác\nJWT_SECRET = 'healthcare_jwt_secret_key_2025'",
        "detail": "services.notification-service.core.settings",
        "documentation": {}
    },
    {
        "label": "MEDICAL_RECORD_SERVICE_URL",
        "kind": 5,
        "importPath": "services.notification-service.core.settings",
        "description": "services.notification-service.core.settings",
        "peekOfCode": "MEDICAL_RECORD_SERVICE_URL = os.environ.get('MEDICAL_RECORD_SERVICE_URL', 'http://medical-record-service:8001')\nAPPOINTMENT_SERVICE_URL = os.environ.get('APPOINTMENT_SERVICE_URL', 'http://appointment-service:8002')\nBILLING_SERVICE_URL = os.environ.get('BILLING_SERVICE_URL', 'http://billing-service:8003')\nPHARMACY_SERVICE_URL = os.environ.get('PHARMACY_SERVICE_URL', 'http://pharmacy-service:8004')\nLABORATORY_SERVICE_URL = os.environ.get('LABORATORY_SERVICE_URL', 'http://laboratory-service:8005')\n# Common Auth settings\nREDIS_URL = os.environ.get('REDIS_URL', 'redis://redis:6379/0')\n# Đặt JWT_SECRET cố định để đảm bảo nhất quán với các service khác\nJWT_SECRET = 'healthcare_jwt_secret_key_2025'\nACCESS_TOKEN_LIFETIME = timedelta(minutes=60)",
        "detail": "services.notification-service.core.settings",
        "documentation": {}
    },
    {
        "label": "APPOINTMENT_SERVICE_URL",
        "kind": 5,
        "importPath": "services.notification-service.core.settings",
        "description": "services.notification-service.core.settings",
        "peekOfCode": "APPOINTMENT_SERVICE_URL = os.environ.get('APPOINTMENT_SERVICE_URL', 'http://appointment-service:8002')\nBILLING_SERVICE_URL = os.environ.get('BILLING_SERVICE_URL', 'http://billing-service:8003')\nPHARMACY_SERVICE_URL = os.environ.get('PHARMACY_SERVICE_URL', 'http://pharmacy-service:8004')\nLABORATORY_SERVICE_URL = os.environ.get('LABORATORY_SERVICE_URL', 'http://laboratory-service:8005')\n# Common Auth settings\nREDIS_URL = os.environ.get('REDIS_URL', 'redis://redis:6379/0')\n# Đặt JWT_SECRET cố định để đảm bảo nhất quán với các service khác\nJWT_SECRET = 'healthcare_jwt_secret_key_2025'\nACCESS_TOKEN_LIFETIME = timedelta(minutes=60)\nREFRESH_TOKEN_LIFETIME = timedelta(days=7)",
        "detail": "services.notification-service.core.settings",
        "documentation": {}
    },
    {
        "label": "BILLING_SERVICE_URL",
        "kind": 5,
        "importPath": "services.notification-service.core.settings",
        "description": "services.notification-service.core.settings",
        "peekOfCode": "BILLING_SERVICE_URL = os.environ.get('BILLING_SERVICE_URL', 'http://billing-service:8003')\nPHARMACY_SERVICE_URL = os.environ.get('PHARMACY_SERVICE_URL', 'http://pharmacy-service:8004')\nLABORATORY_SERVICE_URL = os.environ.get('LABORATORY_SERVICE_URL', 'http://laboratory-service:8005')\n# Common Auth settings\nREDIS_URL = os.environ.get('REDIS_URL', 'redis://redis:6379/0')\n# Đặt JWT_SECRET cố định để đảm bảo nhất quán với các service khác\nJWT_SECRET = 'healthcare_jwt_secret_key_2025'\nACCESS_TOKEN_LIFETIME = timedelta(minutes=60)\nREFRESH_TOKEN_LIFETIME = timedelta(days=7)\nROTATE_REFRESH_TOKENS = False",
        "detail": "services.notification-service.core.settings",
        "documentation": {}
    },
    {
        "label": "PHARMACY_SERVICE_URL",
        "kind": 5,
        "importPath": "services.notification-service.core.settings",
        "description": "services.notification-service.core.settings",
        "peekOfCode": "PHARMACY_SERVICE_URL = os.environ.get('PHARMACY_SERVICE_URL', 'http://pharmacy-service:8004')\nLABORATORY_SERVICE_URL = os.environ.get('LABORATORY_SERVICE_URL', 'http://laboratory-service:8005')\n# Common Auth settings\nREDIS_URL = os.environ.get('REDIS_URL', 'redis://redis:6379/0')\n# Đặt JWT_SECRET cố định để đảm bảo nhất quán với các service khác\nJWT_SECRET = 'healthcare_jwt_secret_key_2025'\nACCESS_TOKEN_LIFETIME = timedelta(minutes=60)\nREFRESH_TOKEN_LIFETIME = timedelta(days=7)\nROTATE_REFRESH_TOKENS = False\nSESSION_TTL = 86400  # 1 day in seconds",
        "detail": "services.notification-service.core.settings",
        "documentation": {}
    },
    {
        "label": "LABORATORY_SERVICE_URL",
        "kind": 5,
        "importPath": "services.notification-service.core.settings",
        "description": "services.notification-service.core.settings",
        "peekOfCode": "LABORATORY_SERVICE_URL = os.environ.get('LABORATORY_SERVICE_URL', 'http://laboratory-service:8005')\n# Common Auth settings\nREDIS_URL = os.environ.get('REDIS_URL', 'redis://redis:6379/0')\n# Đặt JWT_SECRET cố định để đảm bảo nhất quán với các service khác\nJWT_SECRET = 'healthcare_jwt_secret_key_2025'\nACCESS_TOKEN_LIFETIME = timedelta(minutes=60)\nREFRESH_TOKEN_LIFETIME = timedelta(days=7)\nROTATE_REFRESH_TOKENS = False\nSESSION_TTL = 86400  # 1 day in seconds\nMAX_SESSIONS_PER_USER = 5",
        "detail": "services.notification-service.core.settings",
        "documentation": {}
    },
    {
        "label": "REDIS_URL",
        "kind": 5,
        "importPath": "services.notification-service.core.settings",
        "description": "services.notification-service.core.settings",
        "peekOfCode": "REDIS_URL = os.environ.get('REDIS_URL', 'redis://redis:6379/0')\n# Đặt JWT_SECRET cố định để đảm bảo nhất quán với các service khác\nJWT_SECRET = 'healthcare_jwt_secret_key_2025'\nACCESS_TOKEN_LIFETIME = timedelta(minutes=60)\nREFRESH_TOKEN_LIFETIME = timedelta(days=7)\nROTATE_REFRESH_TOKENS = False\nSESSION_TTL = 86400  # 1 day in seconds\nMAX_SESSIONS_PER_USER = 5\nVERIFY_JWT_SIGNATURE = False  # Tạm thời tắt xác thực chữ ký JWT để debug\n# Swagger UI JWT auth configuration",
        "detail": "services.notification-service.core.settings",
        "documentation": {}
    },
    {
        "label": "JWT_SECRET",
        "kind": 5,
        "importPath": "services.notification-service.core.settings",
        "description": "services.notification-service.core.settings",
        "peekOfCode": "JWT_SECRET = 'healthcare_jwt_secret_key_2025'\nACCESS_TOKEN_LIFETIME = timedelta(minutes=60)\nREFRESH_TOKEN_LIFETIME = timedelta(days=7)\nROTATE_REFRESH_TOKENS = False\nSESSION_TTL = 86400  # 1 day in seconds\nMAX_SESSIONS_PER_USER = 5\nVERIFY_JWT_SIGNATURE = False  # Tạm thời tắt xác thực chữ ký JWT để debug\n# Swagger UI JWT auth configuration\nSWAGGER_SETTINGS = {\n    'SECURITY_DEFINITIONS': {",
        "detail": "services.notification-service.core.settings",
        "documentation": {}
    },
    {
        "label": "ACCESS_TOKEN_LIFETIME",
        "kind": 5,
        "importPath": "services.notification-service.core.settings",
        "description": "services.notification-service.core.settings",
        "peekOfCode": "ACCESS_TOKEN_LIFETIME = timedelta(minutes=60)\nREFRESH_TOKEN_LIFETIME = timedelta(days=7)\nROTATE_REFRESH_TOKENS = False\nSESSION_TTL = 86400  # 1 day in seconds\nMAX_SESSIONS_PER_USER = 5\nVERIFY_JWT_SIGNATURE = False  # Tạm thời tắt xác thực chữ ký JWT để debug\n# Swagger UI JWT auth configuration\nSWAGGER_SETTINGS = {\n    'SECURITY_DEFINITIONS': {\n        'Bearer': {",
        "detail": "services.notification-service.core.settings",
        "documentation": {}
    },
    {
        "label": "REFRESH_TOKEN_LIFETIME",
        "kind": 5,
        "importPath": "services.notification-service.core.settings",
        "description": "services.notification-service.core.settings",
        "peekOfCode": "REFRESH_TOKEN_LIFETIME = timedelta(days=7)\nROTATE_REFRESH_TOKENS = False\nSESSION_TTL = 86400  # 1 day in seconds\nMAX_SESSIONS_PER_USER = 5\nVERIFY_JWT_SIGNATURE = False  # Tạm thời tắt xác thực chữ ký JWT để debug\n# Swagger UI JWT auth configuration\nSWAGGER_SETTINGS = {\n    'SECURITY_DEFINITIONS': {\n        'Bearer': {\n            'type': 'apiKey',",
        "detail": "services.notification-service.core.settings",
        "documentation": {}
    },
    {
        "label": "ROTATE_REFRESH_TOKENS",
        "kind": 5,
        "importPath": "services.notification-service.core.settings",
        "description": "services.notification-service.core.settings",
        "peekOfCode": "ROTATE_REFRESH_TOKENS = False\nSESSION_TTL = 86400  # 1 day in seconds\nMAX_SESSIONS_PER_USER = 5\nVERIFY_JWT_SIGNATURE = False  # Tạm thời tắt xác thực chữ ký JWT để debug\n# Swagger UI JWT auth configuration\nSWAGGER_SETTINGS = {\n    'SECURITY_DEFINITIONS': {\n        'Bearer': {\n            'type': 'apiKey',\n            'in': 'header',",
        "detail": "services.notification-service.core.settings",
        "documentation": {}
    },
    {
        "label": "SESSION_TTL",
        "kind": 5,
        "importPath": "services.notification-service.core.settings",
        "description": "services.notification-service.core.settings",
        "peekOfCode": "SESSION_TTL = 86400  # 1 day in seconds\nMAX_SESSIONS_PER_USER = 5\nVERIFY_JWT_SIGNATURE = False  # Tạm thời tắt xác thực chữ ký JWT để debug\n# Swagger UI JWT auth configuration\nSWAGGER_SETTINGS = {\n    'SECURITY_DEFINITIONS': {\n        'Bearer': {\n            'type': 'apiKey',\n            'in': 'header',\n            'name': 'Authorization',",
        "detail": "services.notification-service.core.settings",
        "documentation": {}
    },
    {
        "label": "MAX_SESSIONS_PER_USER",
        "kind": 5,
        "importPath": "services.notification-service.core.settings",
        "description": "services.notification-service.core.settings",
        "peekOfCode": "MAX_SESSIONS_PER_USER = 5\nVERIFY_JWT_SIGNATURE = False  # Tạm thời tắt xác thực chữ ký JWT để debug\n# Swagger UI JWT auth configuration\nSWAGGER_SETTINGS = {\n    'SECURITY_DEFINITIONS': {\n        'Bearer': {\n            'type': 'apiKey',\n            'in': 'header',\n            'name': 'Authorization',\n            'description': 'JWT Authorization header using the Bearer scheme. Example: \"Bearer {token}\"',",
        "detail": "services.notification-service.core.settings",
        "documentation": {}
    },
    {
        "label": "VERIFY_JWT_SIGNATURE",
        "kind": 5,
        "importPath": "services.notification-service.core.settings",
        "description": "services.notification-service.core.settings",
        "peekOfCode": "VERIFY_JWT_SIGNATURE = False  # Tạm thời tắt xác thực chữ ký JWT để debug\n# Swagger UI JWT auth configuration\nSWAGGER_SETTINGS = {\n    'SECURITY_DEFINITIONS': {\n        'Bearer': {\n            'type': 'apiKey',\n            'in': 'header',\n            'name': 'Authorization',\n            'description': 'JWT Authorization header using the Bearer scheme. Example: \"Bearer {token}\"',\n        },",
        "detail": "services.notification-service.core.settings",
        "documentation": {}
    },
    {
        "label": "SWAGGER_SETTINGS",
        "kind": 5,
        "importPath": "services.notification-service.core.settings",
        "description": "services.notification-service.core.settings",
        "peekOfCode": "SWAGGER_SETTINGS = {\n    'SECURITY_DEFINITIONS': {\n        'Bearer': {\n            'type': 'apiKey',\n            'in': 'header',\n            'name': 'Authorization',\n            'description': 'JWT Authorization header using the Bearer scheme. Example: \"Bearer {token}\"',\n        },\n    },\n    'USE_SESSION_AUTH': False,",
        "detail": "services.notification-service.core.settings",
        "documentation": {}
    },
    {
        "label": "schema_view",
        "kind": 5,
        "importPath": "services.notification-service.core.urls",
        "description": "services.notification-service.core.urls",
        "peekOfCode": "schema_view = get_schema_view(\n    openapi.Info(\n        title=\"Notification Service API\",\n        default_version='v1',\n        description=\"API for the Notification Service\",\n        terms_of_service=\"https://www.google.com/policies/terms/\",\n        contact=openapi.Contact(email=\"contact@healthcare.com\"),\n        license=openapi.License(name=\"BSD License\"),\n    ),\n    public=True,",
        "detail": "services.notification-service.core.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "services.notification-service.core.urls",
        "description": "services.notification-service.core.urls",
        "peekOfCode": "urlpatterns = [\n    path('admin/', admin.site.urls),\n    path('api/', include('notification.urls')),\n    path('', schema_view.with_ui('swagger', cache_timeout=0), name='schema-swagger-ui'),\n    re_path(r'^notification-service(?P<format>\\.json|\\.yaml)$', schema_view.without_ui(cache_timeout=0), name='schema-json'),\n    path('redoc/', schema_view.with_ui('redoc', cache_timeout=0), name='schema-redoc'),\n    # WebSocket URLs are handled by ASGI in asgi.py\n]",
        "detail": "services.notification-service.core.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "services.notification-service.core.wsgi",
        "description": "services.notification-service.core.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "services.notification-service.core.wsgi",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "services.notification-service.notification.management.commands.consume_notifications",
        "description": "services.notification-service.notification.management.commands.consume_notifications",
        "peekOfCode": "class Command(BaseCommand):\n    help = 'Consumes notifications from Redis Stream and processes them as in-app notifications'\n    def add_arguments(self, parser):\n        parser.add_argument('--group', type=str, default='notification_processors', help='Consumer group name')\n        parser.add_argument('--consumer', type=str, default=None, help='Consumer name (default: auto-generated)')\n        parser.add_argument('--batch-size', type=int, default=10, help='Number of notifications to process in one batch')\n        parser.add_argument('--sleep', type=int, default=1, help='Sleep time in seconds when no messages are available')\n    def handle(self, *args, **options):\n        group_name = options['group']\n        consumer_name = options['consumer'] or f\"consumer-{os.getpid()}\"",
        "detail": "services.notification-service.notification.management.commands.consume_notifications",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "services.notification-service.notification.management.commands.consume_notifications",
        "description": "services.notification-service.notification.management.commands.consume_notifications",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass Command(BaseCommand):\n    help = 'Consumes notifications from Redis Stream and processes them as in-app notifications'\n    def add_arguments(self, parser):\n        parser.add_argument('--group', type=str, default='notification_processors', help='Consumer group name')\n        parser.add_argument('--consumer', type=str, default=None, help='Consumer name (default: auto-generated)')\n        parser.add_argument('--batch-size', type=int, default=10, help='Number of notifications to process in one batch')\n        parser.add_argument('--sleep', type=int, default=1, help='Sleep time in seconds when no messages are available')\n    def handle(self, *args, **options):\n        group_name = options['group']",
        "detail": "services.notification-service.notification.management.commands.consume_notifications",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "services.notification-service.notification.management.commands.create_default_templates",
        "description": "services.notification-service.notification.management.commands.create_default_templates",
        "peekOfCode": "class Command(BaseCommand):\n    help = 'Creates default notification templates'\n    def handle(self, *args, **options):\n        self.stdout.write('Creating default notification templates...')\n        # Define default templates\n        templates = [\n            # Appointment templates\n            {\n                'name': 'Appointment Confirmation',\n                'notification_type': Notification.NotificationType.APPOINTMENT,",
        "detail": "services.notification-service.notification.management.commands.create_default_templates",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "services.notification-service.notification.management.commands.schedule_appointment_reminders",
        "description": "services.notification-service.notification.management.commands.schedule_appointment_reminders",
        "peekOfCode": "class Command(BaseCommand):\n    help = 'Schedules appointment reminders for upcoming appointments'\n    def add_arguments(self, parser):\n        parser.add_argument(\n            '--days-before',\n            type=int,\n            default=1,\n            help='Number of days before the appointment to send the reminder'\n        )\n    def handle(self, *args, **options):",
        "detail": "services.notification-service.notification.management.commands.schedule_appointment_reminders",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "services.notification-service.notification.management.commands.schedule_appointment_reminders",
        "description": "services.notification-service.notification.management.commands.schedule_appointment_reminders",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass Command(BaseCommand):\n    help = 'Schedules appointment reminders for upcoming appointments'\n    def add_arguments(self, parser):\n        parser.add_argument(\n            '--days-before',\n            type=int,\n            default=1,\n            help='Number of days before the appointment to send the reminder'\n        )",
        "detail": "services.notification-service.notification.management.commands.schedule_appointment_reminders",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "services.notification-service.notification.management.commands.schedule_followup_reminders",
        "description": "services.notification-service.notification.management.commands.schedule_followup_reminders",
        "peekOfCode": "class Command(BaseCommand):\n    help = 'Schedules follow-up appointment reminders based on medical records'\n    def add_arguments(self, parser):\n        parser.add_argument(\n            '--days-before',\n            type=int,\n            default=7,\n            help='Number of days before the recommended follow-up date to send the reminder'\n        )\n    def handle(self, *args, **options):",
        "detail": "services.notification-service.notification.management.commands.schedule_followup_reminders",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "services.notification-service.notification.management.commands.schedule_followup_reminders",
        "description": "services.notification-service.notification.management.commands.schedule_followup_reminders",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass Command(BaseCommand):\n    help = 'Schedules follow-up appointment reminders based on medical records'\n    def add_arguments(self, parser):\n        parser.add_argument(\n            '--days-before',\n            type=int,\n            default=7,\n            help='Number of days before the recommended follow-up date to send the reminder'\n        )",
        "detail": "services.notification-service.notification.management.commands.schedule_followup_reminders",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "services.notification-service.notification.management.commands.schedule_lab_test_reminders",
        "description": "services.notification-service.notification.management.commands.schedule_lab_test_reminders",
        "peekOfCode": "class Command(BaseCommand):\n    help = 'Schedules lab test reminders for upcoming tests'\n    def add_arguments(self, parser):\n        parser.add_argument(\n            '--days-before',\n            type=int,\n            default=1,\n            help='Number of days before the test to send the reminder'\n        )\n    def handle(self, *args, **options):",
        "detail": "services.notification-service.notification.management.commands.schedule_lab_test_reminders",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "services.notification-service.notification.management.commands.schedule_lab_test_reminders",
        "description": "services.notification-service.notification.management.commands.schedule_lab_test_reminders",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass Command(BaseCommand):\n    help = 'Schedules lab test reminders for upcoming tests'\n    def add_arguments(self, parser):\n        parser.add_argument(\n            '--days-before',\n            type=int,\n            default=1,\n            help='Number of days before the test to send the reminder'\n        )",
        "detail": "services.notification-service.notification.management.commands.schedule_lab_test_reminders",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "services.notification-service.notification.management.commands.schedule_medication_refill_reminders",
        "description": "services.notification-service.notification.management.commands.schedule_medication_refill_reminders",
        "peekOfCode": "class Command(BaseCommand):\n    help = 'Schedules medication refill reminders'\n    def add_arguments(self, parser):\n        parser.add_argument(\n            '--days-before',\n            type=int,\n            default=5,\n            help='Number of days before the refill date to send the reminder'\n        )\n    def handle(self, *args, **options):",
        "detail": "services.notification-service.notification.management.commands.schedule_medication_refill_reminders",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "services.notification-service.notification.management.commands.schedule_medication_refill_reminders",
        "description": "services.notification-service.notification.management.commands.schedule_medication_refill_reminders",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass Command(BaseCommand):\n    help = 'Schedules medication refill reminders'\n    def add_arguments(self, parser):\n        parser.add_argument(\n            '--days-before',\n            type=int,\n            default=5,\n            help='Number of days before the refill date to send the reminder'\n        )",
        "detail": "services.notification-service.notification.management.commands.schedule_medication_refill_reminders",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "services.notification-service.notification.management.commands.schedule_payment_reminders",
        "description": "services.notification-service.notification.management.commands.schedule_payment_reminders",
        "peekOfCode": "class Command(BaseCommand):\n    help = 'Schedules payment reminders for upcoming due dates'\n    def add_arguments(self, parser):\n        parser.add_argument(\n            '--days-before',\n            type=int,\n            default=3,\n            help='Number of days before the due date to send the reminder'\n        )\n    def handle(self, *args, **options):",
        "detail": "services.notification-service.notification.management.commands.schedule_payment_reminders",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "services.notification-service.notification.management.commands.schedule_payment_reminders",
        "description": "services.notification-service.notification.management.commands.schedule_payment_reminders",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass Command(BaseCommand):\n    help = 'Schedules payment reminders for upcoming due dates'\n    def add_arguments(self, parser):\n        parser.add_argument(\n            '--days-before',\n            type=int,\n            default=3,\n            help='Number of days before the due date to send the reminder'\n        )",
        "detail": "services.notification-service.notification.management.commands.schedule_payment_reminders",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "services.notification-service.notification.management.commands.setup_notification_cron_jobs",
        "description": "services.notification-service.notification.management.commands.setup_notification_cron_jobs",
        "peekOfCode": "class Command(BaseCommand):\n    help = 'Sets up cron jobs for notification scheduling'\n    def handle(self, *args, **options):\n        self.stdout.write('Setting up cron jobs for notification scheduling...')\n        # Get the current user's crontab\n        cron = CronTab(user=True)\n        # Clear existing notification cron jobs\n        cron.remove_all(comment='healthcare_notification')\n        # Get the project directory\n        project_dir = settings.BASE_DIR",
        "detail": "services.notification-service.notification.management.commands.setup_notification_cron_jobs",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "services.notification-service.notification.management.commands.setup_notification_cron_jobs",
        "description": "services.notification-service.notification.management.commands.setup_notification_cron_jobs",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass Command(BaseCommand):\n    help = 'Sets up cron jobs for notification scheduling'\n    def handle(self, *args, **options):\n        self.stdout.write('Setting up cron jobs for notification scheduling...')\n        # Get the current user's crontab\n        cron = CronTab(user=True)\n        # Clear existing notification cron jobs\n        cron.remove_all(comment='healthcare_notification')\n        # Get the project directory",
        "detail": "services.notification-service.notification.management.commands.setup_notification_cron_jobs",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "services.notification-service.notification.migrations.0001_initial",
        "description": "services.notification-service.notification.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Notification',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('recipient_id', models.IntegerField()),",
        "detail": "services.notification-service.notification.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "services.notification-service.notification.migrations.0002_inappnotification",
        "description": "services.notification-service.notification.migrations.0002_inappnotification",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('notification', '0001_initial'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='InAppNotification',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('recipient_id', models.IntegerField()),",
        "detail": "services.notification-service.notification.migrations.0002_inappnotification",
        "documentation": {}
    },
    {
        "label": "NotificationAdmin",
        "kind": 6,
        "importPath": "services.notification-service.notification.admin",
        "description": "services.notification-service.notification.admin",
        "peekOfCode": "class NotificationAdmin(admin.ModelAdmin):\n    list_display = ('id', 'recipient_id', 'recipient_type', 'notification_type', 'channel', 'status', 'created_at')\n    list_filter = ('notification_type', 'channel', 'status', 'created_at')\n    search_fields = ('recipient_id', 'recipient_email', 'recipient_phone', 'subject', 'content')\n    readonly_fields = ('created_at', 'updated_at')\n@admin.register(NotificationTemplate)\nclass NotificationTemplateAdmin(admin.ModelAdmin):\n    list_display = ('id', 'name', 'notification_type', 'channel')\n    list_filter = ('notification_type', 'channel')\n    search_fields = ('name', 'subject_template', 'content_template')",
        "detail": "services.notification-service.notification.admin",
        "documentation": {}
    },
    {
        "label": "NotificationTemplateAdmin",
        "kind": 6,
        "importPath": "services.notification-service.notification.admin",
        "description": "services.notification-service.notification.admin",
        "peekOfCode": "class NotificationTemplateAdmin(admin.ModelAdmin):\n    list_display = ('id', 'name', 'notification_type', 'channel')\n    list_filter = ('notification_type', 'channel')\n    search_fields = ('name', 'subject_template', 'content_template')\n@admin.register(NotificationSchedule)\nclass NotificationScheduleAdmin(admin.ModelAdmin):\n    list_display = ('id', 'recipient_id', 'recipient_type', 'notification_type', 'scheduled_at', 'status')\n    list_filter = ('notification_type', 'status', 'scheduled_at')\n    search_fields = ('recipient_id', 'subject', 'content')\n    readonly_fields = ('created_at', 'updated_at')",
        "detail": "services.notification-service.notification.admin",
        "documentation": {}
    },
    {
        "label": "NotificationScheduleAdmin",
        "kind": 6,
        "importPath": "services.notification-service.notification.admin",
        "description": "services.notification-service.notification.admin",
        "peekOfCode": "class NotificationScheduleAdmin(admin.ModelAdmin):\n    list_display = ('id', 'recipient_id', 'recipient_type', 'notification_type', 'scheduled_at', 'status')\n    list_filter = ('notification_type', 'status', 'scheduled_at')\n    search_fields = ('recipient_id', 'subject', 'content')\n    readonly_fields = ('created_at', 'updated_at')",
        "detail": "services.notification-service.notification.admin",
        "documentation": {}
    },
    {
        "label": "NotificationConfig",
        "kind": 6,
        "importPath": "services.notification-service.notification.apps",
        "description": "services.notification-service.notification.apps",
        "peekOfCode": "class NotificationConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'notification'",
        "detail": "services.notification-service.notification.apps",
        "documentation": {}
    },
    {
        "label": "HeaderAuthentication",
        "kind": 5,
        "importPath": "services.notification-service.notification.authentication",
        "description": "services.notification-service.notification.authentication",
        "peekOfCode": "HeaderAuthentication = ServiceAuthentication",
        "detail": "services.notification-service.notification.authentication",
        "documentation": {}
    },
    {
        "label": "NotificationConsumer",
        "kind": 6,
        "importPath": "services.notification-service.notification.consumers",
        "description": "services.notification-service.notification.consumers",
        "peekOfCode": "class NotificationConsumer(AsyncWebsocketConsumer):\n    \"\"\"\n    WebSocket consumer for handling real-time notifications.\n    \"\"\"\n    async def connect(self):\n        \"\"\"\n        Called when the WebSocket is handshaking as part of initial connection.\n        \"\"\"\n        self.user_id = self.scope['url_route']['kwargs'].get('user_id')\n        self.notification_group_name = f'user_{self.user_id}_notifications'",
        "detail": "services.notification-service.notification.consumers",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "services.notification-service.notification.consumers",
        "description": "services.notification-service.notification.consumers",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass NotificationConsumer(AsyncWebsocketConsumer):\n    \"\"\"\n    WebSocket consumer for handling real-time notifications.\n    \"\"\"\n    async def connect(self):\n        \"\"\"\n        Called when the WebSocket is handshaking as part of initial connection.\n        \"\"\"\n        self.user_id = self.scope['url_route']['kwargs'].get('user_id')",
        "detail": "services.notification-service.notification.consumers",
        "documentation": {}
    },
    {
        "label": "process_appointment_event",
        "kind": 2,
        "importPath": "services.notification-service.notification.event_handlers",
        "description": "services.notification-service.notification.event_handlers",
        "peekOfCode": "def process_appointment_event(event_data):\n    \"\"\"\n    Process events from the Appointment Service.\n    \"\"\"\n    event_type = event_data.get('event_type')\n    appointment_id = event_data.get('appointment_id')\n    patient_id = event_data.get('patient_id')\n    doctor_id = event_data.get('doctor_id')\n    appointment_date = event_data.get('appointment_date')\n    appointment_type = event_data.get('appointment_type')",
        "detail": "services.notification-service.notification.event_handlers",
        "documentation": {}
    },
    {
        "label": "process_medical_record_event",
        "kind": 2,
        "importPath": "services.notification-service.notification.event_handlers",
        "description": "services.notification-service.notification.event_handlers",
        "peekOfCode": "def process_medical_record_event(event_data):\n    \"\"\"\n    Process events from the Medical Record Service.\n    \"\"\"\n    event_type = event_data.get('event_type')\n    record_id = event_data.get('record_id')\n    patient_id = event_data.get('patient_id')\n    doctor_id = event_data.get('doctor_id')\n    record_type = event_data.get('record_type')\n    description = event_data.get('description', '')",
        "detail": "services.notification-service.notification.event_handlers",
        "documentation": {}
    },
    {
        "label": "process_billing_event",
        "kind": 2,
        "importPath": "services.notification-service.notification.event_handlers",
        "description": "services.notification-service.notification.event_handlers",
        "peekOfCode": "def process_billing_event(event_data):\n    \"\"\"\n    Process events from the Billing Service.\n    \"\"\"\n    event_type = event_data.get('event_type')\n    invoice_id = event_data.get('invoice_id')\n    payment_id = event_data.get('payment_id')\n    claim_id = event_data.get('claim_id')\n    patient_id = event_data.get('patient_id')\n    amount = event_data.get('amount')",
        "detail": "services.notification-service.notification.event_handlers",
        "documentation": {}
    },
    {
        "label": "process_pharmacy_event",
        "kind": 2,
        "importPath": "services.notification-service.notification.event_handlers",
        "description": "services.notification-service.notification.event_handlers",
        "peekOfCode": "def process_pharmacy_event(event_data):\n    \"\"\"\n    Process events from the Pharmacy Service.\n    \"\"\"\n    event_type = event_data.get('event_type')\n    prescription_id = event_data.get('prescription_id')\n    medication_id = event_data.get('medication_id')\n    patient_id = event_data.get('patient_id')\n    doctor_id = event_data.get('doctor_id')\n    medication_name = event_data.get('medication_name', '')",
        "detail": "services.notification-service.notification.event_handlers",
        "documentation": {}
    },
    {
        "label": "process_laboratory_event",
        "kind": 2,
        "importPath": "services.notification-service.notification.event_handlers",
        "description": "services.notification-service.notification.event_handlers",
        "peekOfCode": "def process_laboratory_event(event_data):\n    \"\"\"\n    Process events from the Laboratory Service.\n    \"\"\"\n    event_type = event_data.get('event_type')\n    test_id = event_data.get('test_id')\n    result_id = event_data.get('result_id')\n    patient_id = event_data.get('patient_id')\n    doctor_id = event_data.get('doctor_id')\n    test_name = event_data.get('test_name', '')",
        "detail": "services.notification-service.notification.event_handlers",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "services.notification-service.notification.event_handlers",
        "description": "services.notification-service.notification.event_handlers",
        "peekOfCode": "logger = logging.getLogger(__name__)\ndef process_appointment_event(event_data):\n    \"\"\"\n    Process events from the Appointment Service.\n    \"\"\"\n    event_type = event_data.get('event_type')\n    appointment_id = event_data.get('appointment_id')\n    patient_id = event_data.get('patient_id')\n    doctor_id = event_data.get('doctor_id')\n    appointment_date = event_data.get('appointment_date')",
        "detail": "services.notification-service.notification.event_handlers",
        "documentation": {}
    },
    {
        "label": "Notification",
        "kind": 6,
        "importPath": "services.notification-service.notification.models",
        "description": "services.notification-service.notification.models",
        "peekOfCode": "class Notification(models.Model):\n    \"\"\"\n    Model representing a notification.\n    \"\"\"\n    class NotificationType(models.TextChoices):\n        APPOINTMENT = 'APPOINTMENT', _('Appointment')\n        BILLING = 'BILLING', _('Billing')\n        MEDICAL_RECORD = 'MEDICAL_RECORD', _('Medical Record')\n        LAB_RESULT = 'LAB_RESULT', _('Lab Result')\n        PRESCRIPTION = 'PRESCRIPTION', _('Prescription')",
        "detail": "services.notification-service.notification.models",
        "documentation": {}
    },
    {
        "label": "NotificationTemplate",
        "kind": 6,
        "importPath": "services.notification-service.notification.models",
        "description": "services.notification-service.notification.models",
        "peekOfCode": "class NotificationTemplate(models.Model):\n    \"\"\"\n    Model representing a notification template.\n    \"\"\"\n    name = models.CharField(max_length=100)\n    notification_type = models.CharField(max_length=20, choices=Notification.NotificationType.choices)\n    channel = models.CharField(max_length=10, choices=Notification.Channel.choices)\n    subject_template = models.CharField(max_length=255)\n    content_template = models.TextField()\n    is_active = models.BooleanField(default=True)",
        "detail": "services.notification-service.notification.models",
        "documentation": {}
    },
    {
        "label": "NotificationSchedule",
        "kind": 6,
        "importPath": "services.notification-service.notification.models",
        "description": "services.notification-service.notification.models",
        "peekOfCode": "class NotificationSchedule(models.Model):\n    \"\"\"\n    Model representing a scheduled notification.\n    \"\"\"\n    class Status(models.TextChoices):\n        SCHEDULED = 'SCHEDULED', _('Scheduled')\n        PROCESSING = 'PROCESSING', _('Processing')\n        COMPLETED = 'COMPLETED', _('Completed')\n        FAILED = 'FAILED', _('Failed')\n        CANCELLED = 'CANCELLED', _('Cancelled')",
        "detail": "services.notification-service.notification.models",
        "documentation": {}
    },
    {
        "label": "InAppNotification",
        "kind": 6,
        "importPath": "services.notification-service.notification.models",
        "description": "services.notification-service.notification.models",
        "peekOfCode": "class InAppNotification(models.Model):\n    \"\"\"\n    Model representing an in-app notification that will be displayed in the user interface.\n    This model is specifically for storing notifications that are shown within the application.\n    \"\"\"\n    class Status(models.TextChoices):\n        UNREAD = 'UNREAD', _('Unread')\n        READ = 'READ', _('Read')\n        ARCHIVED = 'ARCHIVED', _('Archived')\n    recipient_id = models.IntegerField()",
        "detail": "services.notification-service.notification.models",
        "documentation": {}
    },
    {
        "label": "IsAdminOrStaff",
        "kind": 6,
        "importPath": "services.notification-service.notification.permissions",
        "description": "services.notification-service.notification.permissions",
        "peekOfCode": "class IsAdminOrStaff:\n    def __new__(cls):\n        return CanSendNotification()",
        "detail": "services.notification-service.notification.permissions",
        "documentation": {}
    },
    {
        "label": "CanViewNotifications",
        "kind": 5,
        "importPath": "services.notification-service.notification.permissions",
        "description": "services.notification-service.notification.permissions",
        "peekOfCode": "CanViewNotifications = NotificationPermissions.CanViewNotifications\nCanSendNotification = NotificationPermissions.CanSendNotification\nCanUpdateNotification = NotificationPermissions.CanUpdateNotification\nCanDeleteNotification = NotificationPermissions.CanDeleteNotification\nCanConfigureNotifications = NotificationPermissions.CanConfigureNotifications\n# Legacy classes - mapped to new permissions for backward compatibility\nclass IsAdminOrStaff:\n    def __new__(cls):\n        return CanSendNotification()",
        "detail": "services.notification-service.notification.permissions",
        "documentation": {}
    },
    {
        "label": "CanSendNotification",
        "kind": 5,
        "importPath": "services.notification-service.notification.permissions",
        "description": "services.notification-service.notification.permissions",
        "peekOfCode": "CanSendNotification = NotificationPermissions.CanSendNotification\nCanUpdateNotification = NotificationPermissions.CanUpdateNotification\nCanDeleteNotification = NotificationPermissions.CanDeleteNotification\nCanConfigureNotifications = NotificationPermissions.CanConfigureNotifications\n# Legacy classes - mapped to new permissions for backward compatibility\nclass IsAdminOrStaff:\n    def __new__(cls):\n        return CanSendNotification()",
        "detail": "services.notification-service.notification.permissions",
        "documentation": {}
    },
    {
        "label": "CanUpdateNotification",
        "kind": 5,
        "importPath": "services.notification-service.notification.permissions",
        "description": "services.notification-service.notification.permissions",
        "peekOfCode": "CanUpdateNotification = NotificationPermissions.CanUpdateNotification\nCanDeleteNotification = NotificationPermissions.CanDeleteNotification\nCanConfigureNotifications = NotificationPermissions.CanConfigureNotifications\n# Legacy classes - mapped to new permissions for backward compatibility\nclass IsAdminOrStaff:\n    def __new__(cls):\n        return CanSendNotification()",
        "detail": "services.notification-service.notification.permissions",
        "documentation": {}
    },
    {
        "label": "CanDeleteNotification",
        "kind": 5,
        "importPath": "services.notification-service.notification.permissions",
        "description": "services.notification-service.notification.permissions",
        "peekOfCode": "CanDeleteNotification = NotificationPermissions.CanDeleteNotification\nCanConfigureNotifications = NotificationPermissions.CanConfigureNotifications\n# Legacy classes - mapped to new permissions for backward compatibility\nclass IsAdminOrStaff:\n    def __new__(cls):\n        return CanSendNotification()",
        "detail": "services.notification-service.notification.permissions",
        "documentation": {}
    },
    {
        "label": "CanConfigureNotifications",
        "kind": 5,
        "importPath": "services.notification-service.notification.permissions",
        "description": "services.notification-service.notification.permissions",
        "peekOfCode": "CanConfigureNotifications = NotificationPermissions.CanConfigureNotifications\n# Legacy classes - mapped to new permissions for backward compatibility\nclass IsAdminOrStaff:\n    def __new__(cls):\n        return CanSendNotification()",
        "detail": "services.notification-service.notification.permissions",
        "documentation": {}
    },
    {
        "label": "websocket_urlpatterns",
        "kind": 5,
        "importPath": "services.notification-service.notification.routing",
        "description": "services.notification-service.notification.routing",
        "peekOfCode": "websocket_urlpatterns = [\n    re_path(r'notifications/(?P<user_id>\\w+)/$', consumers.NotificationConsumer.as_asgi()),\n]\nurlpatterns = []",
        "detail": "services.notification-service.notification.routing",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "services.notification-service.notification.routing",
        "description": "services.notification-service.notification.routing",
        "peekOfCode": "urlpatterns = []",
        "detail": "services.notification-service.notification.routing",
        "documentation": {}
    },
    {
        "label": "NotificationSerializer",
        "kind": 6,
        "importPath": "services.notification-service.notification.serializers",
        "description": "services.notification-service.notification.serializers",
        "peekOfCode": "class NotificationSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Notification\n        fields = '__all__'\n        read_only_fields = ['created_at', 'updated_at', 'sent_at', 'delivered_at', 'status', 'error_message']\nclass NotificationTemplateSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = NotificationTemplate\n        fields = '__all__'\n        read_only_fields = ['created_at', 'updated_at']",
        "detail": "services.notification-service.notification.serializers",
        "documentation": {}
    },
    {
        "label": "NotificationTemplateSerializer",
        "kind": 6,
        "importPath": "services.notification-service.notification.serializers",
        "description": "services.notification-service.notification.serializers",
        "peekOfCode": "class NotificationTemplateSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = NotificationTemplate\n        fields = '__all__'\n        read_only_fields = ['created_at', 'updated_at']\nclass NotificationScheduleSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = NotificationSchedule\n        fields = '__all__'\n        read_only_fields = ['created_at', 'updated_at', 'status']",
        "detail": "services.notification-service.notification.serializers",
        "documentation": {}
    },
    {
        "label": "NotificationScheduleSerializer",
        "kind": 6,
        "importPath": "services.notification-service.notification.serializers",
        "description": "services.notification-service.notification.serializers",
        "peekOfCode": "class NotificationScheduleSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = NotificationSchedule\n        fields = '__all__'\n        read_only_fields = ['created_at', 'updated_at', 'status']\nclass InAppNotificationSerializer(serializers.ModelSerializer):\n    \"\"\"\n    Serializer for the InAppNotification model, used for API responses.\n    \"\"\"\n    class Meta:",
        "detail": "services.notification-service.notification.serializers",
        "documentation": {}
    },
    {
        "label": "InAppNotificationSerializer",
        "kind": 6,
        "importPath": "services.notification-service.notification.serializers",
        "description": "services.notification-service.notification.serializers",
        "peekOfCode": "class InAppNotificationSerializer(serializers.ModelSerializer):\n    \"\"\"\n    Serializer for the InAppNotification model, used for API responses.\n    \"\"\"\n    class Meta:\n        model = InAppNotification\n        fields = [\n            'id', 'recipient_id', 'recipient_type', 'notification_type',\n            'title', 'content', 'status', 'reference_id', 'reference_type',\n            'is_urgent', 'read_at', 'service', 'event_type', 'metadata',",
        "detail": "services.notification-service.notification.serializers",
        "documentation": {}
    },
    {
        "label": "SendEmailNotificationSerializer",
        "kind": 6,
        "importPath": "services.notification-service.notification.serializers",
        "description": "services.notification-service.notification.serializers",
        "peekOfCode": "class SendEmailNotificationSerializer(serializers.Serializer):\n    recipient_id = serializers.IntegerField()\n    recipient_type = serializers.ChoiceField(choices=Notification.RecipientType.choices)\n    recipient_email = serializers.EmailField()\n    subject = serializers.CharField(max_length=255)\n    content = serializers.CharField()\n    notification_type = serializers.ChoiceField(choices=Notification.NotificationType.choices)\n    reference_id = serializers.CharField(max_length=100, required=False, allow_blank=True, allow_null=True)\n    reference_type = serializers.CharField(max_length=20, required=False, allow_blank=True, allow_null=True)\nclass SendSMSNotificationSerializer(serializers.Serializer):",
        "detail": "services.notification-service.notification.serializers",
        "documentation": {}
    },
    {
        "label": "SendSMSNotificationSerializer",
        "kind": 6,
        "importPath": "services.notification-service.notification.serializers",
        "description": "services.notification-service.notification.serializers",
        "peekOfCode": "class SendSMSNotificationSerializer(serializers.Serializer):\n    recipient_id = serializers.IntegerField()\n    recipient_type = serializers.ChoiceField(choices=Notification.RecipientType.choices)\n    recipient_phone = serializers.CharField(max_length=20)\n    content = serializers.CharField()\n    notification_type = serializers.ChoiceField(choices=Notification.NotificationType.choices)\n    reference_id = serializers.CharField(max_length=100, required=False, allow_blank=True, allow_null=True)\n    reference_type = serializers.CharField(max_length=20, required=False, allow_blank=True, allow_null=True)\nclass ScheduleNotificationSerializer(serializers.Serializer):\n    recipient_id = serializers.IntegerField()",
        "detail": "services.notification-service.notification.serializers",
        "documentation": {}
    },
    {
        "label": "ScheduleNotificationSerializer",
        "kind": 6,
        "importPath": "services.notification-service.notification.serializers",
        "description": "services.notification-service.notification.serializers",
        "peekOfCode": "class ScheduleNotificationSerializer(serializers.Serializer):\n    recipient_id = serializers.IntegerField()\n    recipient_type = serializers.ChoiceField(choices=Notification.RecipientType.choices)\n    recipient_email = serializers.EmailField(required=False, allow_blank=True, allow_null=True)\n    recipient_phone = serializers.CharField(max_length=20, required=False, allow_blank=True, allow_null=True)\n    notification_type = serializers.ChoiceField(choices=Notification.NotificationType.choices)\n    channel = serializers.ChoiceField(choices=Notification.Channel.choices)\n    subject = serializers.CharField(max_length=255, required=False, allow_blank=True, allow_null=True)\n    content = serializers.CharField()\n    scheduled_at = serializers.DateTimeField()",
        "detail": "services.notification-service.notification.serializers",
        "documentation": {}
    },
    {
        "label": "AppointmentEventSerializer",
        "kind": 6,
        "importPath": "services.notification-service.notification.serializers",
        "description": "services.notification-service.notification.serializers",
        "peekOfCode": "class AppointmentEventSerializer(serializers.Serializer):\n    event_type = serializers.ChoiceField(choices=[\n        ('CREATED', 'Created'),\n        ('UPDATED', 'Updated'),\n        ('CANCELLED', 'Cancelled'),\n        ('REMINDER', 'Reminder'),\n        ('COMPLETED', 'Completed')\n    ])\n    appointment_id = serializers.IntegerField()\n    patient_id = serializers.IntegerField()",
        "detail": "services.notification-service.notification.serializers",
        "documentation": {}
    },
    {
        "label": "MedicalRecordEventSerializer",
        "kind": 6,
        "importPath": "services.notification-service.notification.serializers",
        "description": "services.notification-service.notification.serializers",
        "peekOfCode": "class MedicalRecordEventSerializer(serializers.Serializer):\n    event_type = serializers.ChoiceField(choices=[\n        ('CREATED', 'Created'),\n        ('UPDATED', 'Updated'),\n        ('DIAGNOSIS_ADDED', 'Diagnosis Added'),\n        ('TREATMENT_ADDED', 'Treatment Added'),\n        ('MEDICATION_ADDED', 'Medication Added')\n    ])\n    record_id = serializers.IntegerField()\n    patient_id = serializers.IntegerField()",
        "detail": "services.notification-service.notification.serializers",
        "documentation": {}
    },
    {
        "label": "BillingEventSerializer",
        "kind": 6,
        "importPath": "services.notification-service.notification.serializers",
        "description": "services.notification-service.notification.serializers",
        "peekOfCode": "class BillingEventSerializer(serializers.Serializer):\n    event_type = serializers.ChoiceField(choices=[\n        ('INVOICE_CREATED', 'Invoice Created'),\n        ('PAYMENT_RECEIVED', 'Payment Received'),\n        ('PAYMENT_DUE', 'Payment Due'),\n        ('PAYMENT_OVERDUE', 'Payment Overdue'),\n        ('INSURANCE_CLAIM_SUBMITTED', 'Insurance Claim Submitted'),\n        ('INSURANCE_CLAIM_APPROVED', 'Insurance Claim Approved'),\n        ('INSURANCE_CLAIM_REJECTED', 'Insurance Claim Rejected')\n    ])",
        "detail": "services.notification-service.notification.serializers",
        "documentation": {}
    },
    {
        "label": "PharmacyEventSerializer",
        "kind": 6,
        "importPath": "services.notification-service.notification.serializers",
        "description": "services.notification-service.notification.serializers",
        "peekOfCode": "class PharmacyEventSerializer(serializers.Serializer):\n    event_type = serializers.ChoiceField(choices=[\n        ('PRESCRIPTION_CREATED', 'Prescription Created'),\n        ('PRESCRIPTION_FILLED', 'Prescription Filled'),\n        ('PRESCRIPTION_READY', 'Prescription Ready for Pickup'),\n        ('PRESCRIPTION_PICKED_UP', 'Prescription Picked Up'),\n        ('MEDICATION_REFILL_DUE', 'Medication Refill Due'),\n        ('MEDICATION_EXPIRING', 'Medication Expiring')\n    ])\n    prescription_id = serializers.IntegerField(required=False, allow_null=True)",
        "detail": "services.notification-service.notification.serializers",
        "documentation": {}
    },
    {
        "label": "LaboratoryEventSerializer",
        "kind": 6,
        "importPath": "services.notification-service.notification.serializers",
        "description": "services.notification-service.notification.serializers",
        "peekOfCode": "class LaboratoryEventSerializer(serializers.Serializer):\n    event_type = serializers.ChoiceField(choices=[\n        ('TEST_ORDERED', 'Test Ordered'),\n        ('SAMPLE_COLLECTED', 'Sample Collected'),\n        ('RESULTS_READY', 'Results Ready'),\n        ('RESULTS_DELIVERED', 'Results Delivered'),\n        ('ABNORMAL_RESULTS', 'Abnormal Results')\n    ])\n    test_id = serializers.IntegerField(required=False, allow_null=True)\n    result_id = serializers.IntegerField(required=False, allow_null=True)",
        "detail": "services.notification-service.notification.serializers",
        "documentation": {}
    },
    {
        "label": "EventSerializer",
        "kind": 6,
        "importPath": "services.notification-service.notification.serializers",
        "description": "services.notification-service.notification.serializers",
        "peekOfCode": "class EventSerializer(serializers.Serializer):\n    service = serializers.ChoiceField(choices=[\n        ('APPOINTMENT', 'Appointment Service'),\n        ('MEDICAL_RECORD', 'Medical Record Service'),\n        ('BILLING', 'Billing Service'),\n        ('PHARMACY', 'Pharmacy Service'),\n        ('LABORATORY', 'Laboratory Service')\n    ])\n    event_data = serializers.JSONField()\n    def validate(self, data):",
        "detail": "services.notification-service.notification.serializers",
        "documentation": {}
    },
    {
        "label": "send_email",
        "kind": 2,
        "importPath": "services.notification-service.notification.services",
        "description": "services.notification-service.notification.services",
        "peekOfCode": "def send_email(recipient_email, subject, content, from_email=None):\n    \"\"\"\n    Send an email notification.\n    \"\"\"\n    if not from_email:\n        from_email = settings.DEFAULT_FROM_EMAIL\n    try:\n        # Use SendGrid if configured\n        if hasattr(settings, 'USE_SENDGRID') and settings.USE_SENDGRID and hasattr(settings, 'SENDGRID_API_KEY') and settings.SENDGRID_API_KEY:\n            message = Mail(",
        "detail": "services.notification-service.notification.services",
        "documentation": {}
    },
    {
        "label": "send_sms",
        "kind": 2,
        "importPath": "services.notification-service.notification.services",
        "description": "services.notification-service.notification.services",
        "peekOfCode": "def send_sms(recipient_phone, content):\n    \"\"\"\n    Send an SMS notification.\n    \"\"\"\n    try:\n        # Use Twilio if configured\n        if hasattr(settings, 'USE_TWILIO') and settings.USE_TWILIO and hasattr(settings, 'TWILIO_ACCOUNT_SID') and settings.TWILIO_AUTH_TOKEN:\n            message = twilio_client.messages.create(\n                body=content,\n                from_=settings.TWILIO_PHONE_NUMBER,",
        "detail": "services.notification-service.notification.services",
        "documentation": {}
    },
    {
        "label": "render_template",
        "kind": 2,
        "importPath": "services.notification-service.notification.services",
        "description": "services.notification-service.notification.services",
        "peekOfCode": "def render_template(template_content, context_data):\n    \"\"\"\n    Render a template with the given context data.\n    \"\"\"\n    try:\n        template = Template(template_content)\n        context = Context(context_data)\n        return template.render(context)\n    except Exception as e:\n        logger.error(f\"Error rendering template: {str(e)}\")",
        "detail": "services.notification-service.notification.services",
        "documentation": {}
    },
    {
        "label": "get_user_info",
        "kind": 2,
        "importPath": "services.notification-service.notification.services",
        "description": "services.notification-service.notification.services",
        "peekOfCode": "def get_user_info(user_id, user_type):\n    \"\"\"\n    Get user information from the User Service.\n    \"\"\"\n    import requests\n    import os\n    from django.conf import settings\n    # Get User Service URL from settings or environment variable\n    user_service_url = getattr(settings, 'USER_SERVICE_URL', os.environ.get('USER_SERVICE_URL', 'http://user-service:8000'))\n    try:",
        "detail": "services.notification-service.notification.services",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "services.notification-service.notification.services",
        "description": "services.notification-service.notification.services",
        "peekOfCode": "logger = logging.getLogger(__name__)\n# Try to import SendGrid if it's configured\ntry:\n    if settings.USE_SENDGRID and settings.SENDGRID_API_KEY:\n        import sendgrid\n        from sendgrid.helpers.mail import Mail, Email, To, Content\n        sg = sendgrid.SendGridAPIClient(api_key=settings.SENDGRID_API_KEY)\nexcept (ImportError, AttributeError):\n    logger.warning(\"SendGrid is not properly configured\")\n# Try to import Twilio if it's configured",
        "detail": "services.notification-service.notification.services",
        "documentation": {}
    },
    {
        "label": "send_email_notification",
        "kind": 2,
        "importPath": "services.notification-service.notification.tasks",
        "description": "services.notification-service.notification.tasks",
        "peekOfCode": "def send_email_notification(notification_id):\n    \"\"\"\n    Send an email notification.\n    \"\"\"\n    try:\n        notification = Notification.objects.get(id=notification_id)\n        # Skip if not an email notification or already sent\n        if notification.channel != Notification.Channel.EMAIL or notification.status != Notification.Status.PENDING:\n            return False\n        # Send the email",
        "detail": "services.notification-service.notification.tasks",
        "documentation": {}
    },
    {
        "label": "send_sms_notification",
        "kind": 2,
        "importPath": "services.notification-service.notification.tasks",
        "description": "services.notification-service.notification.tasks",
        "peekOfCode": "def send_sms_notification(notification_id):\n    \"\"\"\n    Send an SMS notification.\n    \"\"\"\n    try:\n        notification = Notification.objects.get(id=notification_id)\n        # Skip if not an SMS notification or already sent\n        if notification.channel != Notification.Channel.SMS or notification.status != Notification.Status.PENDING:\n            return False\n        # Send the SMS",
        "detail": "services.notification-service.notification.tasks",
        "documentation": {}
    },
    {
        "label": "process_scheduled_notifications",
        "kind": 2,
        "importPath": "services.notification-service.notification.tasks",
        "description": "services.notification-service.notification.tasks",
        "peekOfCode": "def process_scheduled_notifications():\n    \"\"\"\n    Process scheduled notifications that are due.\n    \"\"\"\n    now = datetime.now()\n    scheduled_notifications = NotificationSchedule.objects.filter(\n        status=NotificationSchedule.Status.SCHEDULED,\n        scheduled_at__lte=now\n    )\n    for schedule in scheduled_notifications:",
        "detail": "services.notification-service.notification.tasks",
        "documentation": {}
    },
    {
        "label": "send_notification_from_template",
        "kind": 2,
        "importPath": "services.notification-service.notification.tasks",
        "description": "services.notification-service.notification.tasks",
        "peekOfCode": "def send_notification_from_template(template_id, recipient_id, recipient_type, context_data=None, reference_id=None, reference_type=None):\n    \"\"\"\n    Send a notification using a template.\n    \"\"\"\n    if context_data is None:\n        context_data = {}\n    try:\n        # Get the template\n        template = NotificationTemplate.objects.get(id=template_id, is_active=True)\n        # Get user info",
        "detail": "services.notification-service.notification.tasks",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "services.notification-service.notification.tasks",
        "description": "services.notification-service.notification.tasks",
        "peekOfCode": "logger = logging.getLogger(__name__)\n@shared_task\ndef send_email_notification(notification_id):\n    \"\"\"\n    Send an email notification.\n    \"\"\"\n    try:\n        notification = Notification.objects.get(id=notification_id)\n        # Skip if not an email notification or already sent\n        if notification.channel != Notification.Channel.EMAIL or notification.status != Notification.Status.PENDING:",
        "detail": "services.notification-service.notification.tasks",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "services.notification-service.notification.urls",
        "description": "services.notification-service.notification.urls",
        "peekOfCode": "router = DefaultRouter()\nrouter.register(r'notifications', NotificationViewSet, basename='notification')\nrouter.register(r'templates', NotificationTemplateViewSet)\nrouter.register(r'schedules', NotificationScheduleViewSet)\nrouter.register(r'in-app', InAppNotificationViewSet, basename='in-app-notification')\nrouter.register(r'events', EventViewSet, basename='events')\nurlpatterns = [\n    path('', include(router.urls)),\n    # Giữ lại đường dẫn cũ cho khả năng tương thích ngược\n    path('events', EventViewSet.as_view({'post': 'process'}), name='process-event'),",
        "detail": "services.notification-service.notification.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "services.notification-service.notification.urls",
        "description": "services.notification-service.notification.urls",
        "peekOfCode": "urlpatterns = [\n    path('', include(router.urls)),\n    # Giữ lại đường dẫn cũ cho khả năng tương thích ngược\n    path('events', EventViewSet.as_view({'post': 'process'}), name='process-event'),\n]",
        "detail": "services.notification-service.notification.urls",
        "documentation": {}
    },
    {
        "label": "send_realtime_notification",
        "kind": 2,
        "importPath": "services.notification-service.notification.utils",
        "description": "services.notification-service.notification.utils",
        "peekOfCode": "def send_realtime_notification(notification):\n    \"\"\"\n    Send a real-time notification to the user via WebSocket.\n    Args:\n        notification: InAppNotification instance\n    \"\"\"\n    try:\n        channel_layer = get_channel_layer()\n        if channel_layer:\n            # Create notification group name",
        "detail": "services.notification-service.notification.utils",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "services.notification-service.notification.utils",
        "description": "services.notification-service.notification.utils",
        "peekOfCode": "logger = logging.getLogger(__name__)\ndef send_realtime_notification(notification):\n    \"\"\"\n    Send a real-time notification to the user via WebSocket.\n    Args:\n        notification: InAppNotification instance\n    \"\"\"\n    try:\n        channel_layer = get_channel_layer()\n        if channel_layer:",
        "detail": "services.notification-service.notification.utils",
        "documentation": {}
    },
    {
        "label": "NotificationViewSet",
        "kind": 6,
        "importPath": "services.notification-service.notification.views",
        "description": "services.notification-service.notification.views",
        "peekOfCode": "class NotificationViewSet(viewsets.ModelViewSet):\n    \"\"\"\n    API endpoint for managing notifications.\n    \"\"\"\n    queryset = Notification.objects.all().order_by('-created_at')\n    serializer_class = NotificationSerializer\n    # Support both service tokens and user JWTs for unified auth\n    authentication_classes = [HeaderAuthentication, JWTAuthentication]\n    filter_backends = [filters.SearchFilter, filters.OrderingFilter]\n    search_fields = ['recipient_id', 'recipient_email', 'recipient_phone', 'subject', 'content']",
        "detail": "services.notification-service.notification.views",
        "documentation": {}
    },
    {
        "label": "NotificationTemplateViewSet",
        "kind": 6,
        "importPath": "services.notification-service.notification.views",
        "description": "services.notification-service.notification.views",
        "peekOfCode": "class NotificationTemplateViewSet(viewsets.ModelViewSet):\n    \"\"\"\n    API endpoint for managing notification templates.\n    \"\"\"\n    queryset = NotificationTemplate.objects.all().order_by('-created_at')\n    serializer_class = NotificationTemplateSerializer\n    authentication_classes = [HeaderAuthentication]\n    permission_classes = [IsAdminOrStaff]\n    filter_backends = [filters.SearchFilter, filters.OrderingFilter]\n    search_fields = ['name', 'subject_template', 'content_template']",
        "detail": "services.notification-service.notification.views",
        "documentation": {}
    },
    {
        "label": "NotificationScheduleViewSet",
        "kind": 6,
        "importPath": "services.notification-service.notification.views",
        "description": "services.notification-service.notification.views",
        "peekOfCode": "class NotificationScheduleViewSet(viewsets.ModelViewSet):\n    \"\"\"\n    API endpoint for managing notification schedules.\n    \"\"\"\n    queryset = NotificationSchedule.objects.all().order_by('-scheduled_at')\n    serializer_class = NotificationScheduleSerializer\n    authentication_classes = [HeaderAuthentication]\n    permission_classes = [IsAdminOrStaff]\n    filter_backends = [filters.SearchFilter, filters.OrderingFilter]\n    search_fields = ['recipient_id', 'subject', 'content']",
        "detail": "services.notification-service.notification.views",
        "documentation": {}
    },
    {
        "label": "InAppNotificationViewSet",
        "kind": 6,
        "importPath": "services.notification-service.notification.views",
        "description": "services.notification-service.notification.views",
        "peekOfCode": "class InAppNotificationViewSet(viewsets.ModelViewSet):\n    \"\"\"\n    API endpoint for managing in-app notifications.\n    This ViewSet provides endpoints for managing in-app notifications.\n    List endpoint supports the following query parameters:\n    - recipient_id: Filter by recipient ID\n    - status: Filter by status (UNREAD, READ, ARCHIVED)\n    - notification_type: Filter by notification type (APPOINTMENT, MEDICAL_RECORD, BILLING, PHARMACY, LABORATORY)\n    - service: Filter by service (APPOINTMENT, MEDICAL_RECORD, BILLING, PHARMACY, LABORATORY)\n    - reference_id: Filter by reference ID",
        "detail": "services.notification-service.notification.views",
        "documentation": {}
    },
    {
        "label": "EventViewSet",
        "kind": 6,
        "importPath": "services.notification-service.notification.views",
        "description": "services.notification-service.notification.views",
        "peekOfCode": "class EventViewSet(viewsets.ViewSet):\n    \"\"\"\n    ViewSet for processing events from other services.\n    \"\"\"\n    permission_classes = [AllowAny]\n    @action(detail=False, methods=['post'])\n    def process(self, request):\n        \"\"\"\n        Process events from other services and create appropriate notifications.\n        This endpoint receives events from other services and creates appropriate notifications",
        "detail": "services.notification-service.notification.views",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "services.notification-service.notification.views",
        "description": "services.notification-service.notification.views",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass NotificationViewSet(viewsets.ModelViewSet):\n    \"\"\"\n    API endpoint for managing notifications.\n    \"\"\"\n    queryset = Notification.objects.all().order_by('-created_at')\n    serializer_class = NotificationSerializer\n    # Support both service tokens and user JWTs for unified auth\n    authentication_classes = [HeaderAuthentication, JWTAuthentication]\n    filter_backends = [filters.SearchFilter, filters.OrderingFilter]",
        "detail": "services.notification-service.notification.views",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "services.notification-service.manage",
        "description": "services.notification-service.manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'core.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "services.notification-service.manage",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "services.pharmacy-service.core.asgi",
        "description": "services.pharmacy-service.core.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "services.pharmacy-service.core.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "services.pharmacy-service.core.settings",
        "description": "services.pharmacy-service.core.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure-key')\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = os.environ.get('DEBUG', 'False') == 'True'\nALLOWED_HOSTS = ['*']\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',",
        "detail": "services.pharmacy-service.core.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "services.pharmacy-service.core.settings",
        "description": "services.pharmacy-service.core.settings",
        "peekOfCode": "SECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure-key')\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = os.environ.get('DEBUG', 'False') == 'True'\nALLOWED_HOSTS = ['*']\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',",
        "detail": "services.pharmacy-service.core.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "services.pharmacy-service.core.settings",
        "description": "services.pharmacy-service.core.settings",
        "peekOfCode": "DEBUG = os.environ.get('DEBUG', 'False') == 'True'\nALLOWED_HOSTS = ['*']\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',",
        "detail": "services.pharmacy-service.core.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "services.pharmacy-service.core.settings",
        "description": "services.pharmacy-service.core.settings",
        "peekOfCode": "ALLOWED_HOSTS = ['*']\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    # Third-party apps",
        "detail": "services.pharmacy-service.core.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "services.pharmacy-service.core.settings",
        "description": "services.pharmacy-service.core.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    # Third-party apps\n    'rest_framework',\n    'rest_framework_simplejwt',",
        "detail": "services.pharmacy-service.core.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "services.pharmacy-service.core.settings",
        "description": "services.pharmacy-service.core.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'corsheaders.middleware.CorsMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]",
        "detail": "services.pharmacy-service.core.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "services.pharmacy-service.core.settings",
        "description": "services.pharmacy-service.core.settings",
        "peekOfCode": "ROOT_URLCONF = 'core.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',",
        "detail": "services.pharmacy-service.core.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "services.pharmacy-service.core.settings",
        "description": "services.pharmacy-service.core.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "services.pharmacy-service.core.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "services.pharmacy-service.core.settings",
        "description": "services.pharmacy-service.core.settings",
        "peekOfCode": "WSGI_APPLICATION = 'core.wsgi.application'\n# Database\n# https://docs.djangoproject.com/en/4.2/ref/settings/#databases\nDATABASES = {\n    'default': dj_database_url.config(\n        default=os.environ.get('DATABASE_URL', 'postgres://postgres:postgres@postgres:5432/healthcare_pharmacy'),\n        conn_max_age=600,\n    )\n}\n# Password validation",
        "detail": "services.pharmacy-service.core.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "services.pharmacy-service.core.settings",
        "description": "services.pharmacy-service.core.settings",
        "peekOfCode": "DATABASES = {\n    'default': dj_database_url.config(\n        default=os.environ.get('DATABASE_URL', 'postgres://postgres:postgres@postgres:5432/healthcare_pharmacy'),\n        conn_max_age=600,\n    )\n}\n# Password validation\n# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    {",
        "detail": "services.pharmacy-service.core.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "services.pharmacy-service.core.settings",
        "description": "services.pharmacy-service.core.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "services.pharmacy-service.core.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "services.pharmacy-service.core.settings",
        "description": "services.pharmacy-service.core.settings",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = 'static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field",
        "detail": "services.pharmacy-service.core.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "services.pharmacy-service.core.settings",
        "description": "services.pharmacy-service.core.settings",
        "peekOfCode": "TIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = 'static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "services.pharmacy-service.core.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "services.pharmacy-service.core.settings",
        "description": "services.pharmacy-service.core.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = 'static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# REST Framework settings",
        "detail": "services.pharmacy-service.core.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "services.pharmacy-service.core.settings",
        "description": "services.pharmacy-service.core.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = 'static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# REST Framework settings\nREST_FRAMEWORK = {",
        "detail": "services.pharmacy-service.core.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "services.pharmacy-service.core.settings",
        "description": "services.pharmacy-service.core.settings",
        "peekOfCode": "STATIC_URL = 'static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# REST Framework settings\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'common_auth.authentication.ServiceAuthentication',\n        'rest_framework_simplejwt.authentication.JWTAuthentication',",
        "detail": "services.pharmacy-service.core.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_ROOT",
        "kind": 5,
        "importPath": "services.pharmacy-service.core.settings",
        "description": "services.pharmacy-service.core.settings",
        "peekOfCode": "STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# REST Framework settings\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'common_auth.authentication.ServiceAuthentication',\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n    ),",
        "detail": "services.pharmacy-service.core.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "services.pharmacy-service.core.settings",
        "description": "services.pharmacy-service.core.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# REST Framework settings\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'common_auth.authentication.ServiceAuthentication',\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n    ),\n    'DEFAULT_PERMISSION_CLASSES': [\n        'common_auth.permissions.IsAuthenticated',\n        'rest_framework.permissions.IsAuthenticated',",
        "detail": "services.pharmacy-service.core.settings",
        "documentation": {}
    },
    {
        "label": "REST_FRAMEWORK",
        "kind": 5,
        "importPath": "services.pharmacy-service.core.settings",
        "description": "services.pharmacy-service.core.settings",
        "peekOfCode": "REST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'common_auth.authentication.ServiceAuthentication',\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n    ),\n    'DEFAULT_PERMISSION_CLASSES': [\n        'common_auth.permissions.IsAuthenticated',\n        'rest_framework.permissions.IsAuthenticated',\n    ],\n    'DEFAULT_FILTER_BACKENDS': [",
        "detail": "services.pharmacy-service.core.settings",
        "documentation": {}
    },
    {
        "label": "CORS_ALLOW_ALL_ORIGINS",
        "kind": 5,
        "importPath": "services.pharmacy-service.core.settings",
        "description": "services.pharmacy-service.core.settings",
        "peekOfCode": "CORS_ALLOW_ALL_ORIGINS = True\n# API Gateway URL\nAPI_GATEWAY_URL = os.environ.get('API_GATEWAY_URL', 'http://api-gateway:4000')\n# Service URLs\nUSER_SERVICE_URL = os.environ.get('USER_SERVICE_URL', 'http://user-service:8000')\nMEDICAL_RECORD_SERVICE_URL = os.environ.get('MEDICAL_RECORD_SERVICE_URL', 'http://medical-record-service:8001')\n# Service API Keys\nSERVICE_API_KEY = os.environ.get('PHARMACY_SERVICE_API_KEY', 'pharmacy-service-api-key')\nSERVICE_NAME = 'pharmacy-service'\n# Common Auth settings",
        "detail": "services.pharmacy-service.core.settings",
        "documentation": {}
    },
    {
        "label": "API_GATEWAY_URL",
        "kind": 5,
        "importPath": "services.pharmacy-service.core.settings",
        "description": "services.pharmacy-service.core.settings",
        "peekOfCode": "API_GATEWAY_URL = os.environ.get('API_GATEWAY_URL', 'http://api-gateway:4000')\n# Service URLs\nUSER_SERVICE_URL = os.environ.get('USER_SERVICE_URL', 'http://user-service:8000')\nMEDICAL_RECORD_SERVICE_URL = os.environ.get('MEDICAL_RECORD_SERVICE_URL', 'http://medical-record-service:8001')\n# Service API Keys\nSERVICE_API_KEY = os.environ.get('PHARMACY_SERVICE_API_KEY', 'pharmacy-service-api-key')\nSERVICE_NAME = 'pharmacy-service'\n# Common Auth settings\nREDIS_URL = os.environ.get('REDIS_URL', 'redis://redis:6379/0')\nJWT_SECRET = os.environ.get('JWT_SECRET', SECRET_KEY)",
        "detail": "services.pharmacy-service.core.settings",
        "documentation": {}
    },
    {
        "label": "USER_SERVICE_URL",
        "kind": 5,
        "importPath": "services.pharmacy-service.core.settings",
        "description": "services.pharmacy-service.core.settings",
        "peekOfCode": "USER_SERVICE_URL = os.environ.get('USER_SERVICE_URL', 'http://user-service:8000')\nMEDICAL_RECORD_SERVICE_URL = os.environ.get('MEDICAL_RECORD_SERVICE_URL', 'http://medical-record-service:8001')\n# Service API Keys\nSERVICE_API_KEY = os.environ.get('PHARMACY_SERVICE_API_KEY', 'pharmacy-service-api-key')\nSERVICE_NAME = 'pharmacy-service'\n# Common Auth settings\nREDIS_URL = os.environ.get('REDIS_URL', 'redis://redis:6379/0')\nJWT_SECRET = os.environ.get('JWT_SECRET', SECRET_KEY)\nACCESS_TOKEN_LIFETIME = timedelta(minutes=60)\nREFRESH_TOKEN_LIFETIME = timedelta(days=7)",
        "detail": "services.pharmacy-service.core.settings",
        "documentation": {}
    },
    {
        "label": "MEDICAL_RECORD_SERVICE_URL",
        "kind": 5,
        "importPath": "services.pharmacy-service.core.settings",
        "description": "services.pharmacy-service.core.settings",
        "peekOfCode": "MEDICAL_RECORD_SERVICE_URL = os.environ.get('MEDICAL_RECORD_SERVICE_URL', 'http://medical-record-service:8001')\n# Service API Keys\nSERVICE_API_KEY = os.environ.get('PHARMACY_SERVICE_API_KEY', 'pharmacy-service-api-key')\nSERVICE_NAME = 'pharmacy-service'\n# Common Auth settings\nREDIS_URL = os.environ.get('REDIS_URL', 'redis://redis:6379/0')\nJWT_SECRET = os.environ.get('JWT_SECRET', SECRET_KEY)\nACCESS_TOKEN_LIFETIME = timedelta(minutes=60)\nREFRESH_TOKEN_LIFETIME = timedelta(days=7)\nROTATE_REFRESH_TOKENS = False",
        "detail": "services.pharmacy-service.core.settings",
        "documentation": {}
    },
    {
        "label": "SERVICE_API_KEY",
        "kind": 5,
        "importPath": "services.pharmacy-service.core.settings",
        "description": "services.pharmacy-service.core.settings",
        "peekOfCode": "SERVICE_API_KEY = os.environ.get('PHARMACY_SERVICE_API_KEY', 'pharmacy-service-api-key')\nSERVICE_NAME = 'pharmacy-service'\n# Common Auth settings\nREDIS_URL = os.environ.get('REDIS_URL', 'redis://redis:6379/0')\nJWT_SECRET = os.environ.get('JWT_SECRET', SECRET_KEY)\nACCESS_TOKEN_LIFETIME = timedelta(minutes=60)\nREFRESH_TOKEN_LIFETIME = timedelta(days=7)\nROTATE_REFRESH_TOKENS = False\nSESSION_TTL = 86400  # 1 day in seconds\nMAX_SESSIONS_PER_USER = 5",
        "detail": "services.pharmacy-service.core.settings",
        "documentation": {}
    },
    {
        "label": "SERVICE_NAME",
        "kind": 5,
        "importPath": "services.pharmacy-service.core.settings",
        "description": "services.pharmacy-service.core.settings",
        "peekOfCode": "SERVICE_NAME = 'pharmacy-service'\n# Common Auth settings\nREDIS_URL = os.environ.get('REDIS_URL', 'redis://redis:6379/0')\nJWT_SECRET = os.environ.get('JWT_SECRET', SECRET_KEY)\nACCESS_TOKEN_LIFETIME = timedelta(minutes=60)\nREFRESH_TOKEN_LIFETIME = timedelta(days=7)\nROTATE_REFRESH_TOKENS = False\nSESSION_TTL = 86400  # 1 day in seconds\nMAX_SESSIONS_PER_USER = 5\nVERIFY_JWT_SIGNATURE = True",
        "detail": "services.pharmacy-service.core.settings",
        "documentation": {}
    },
    {
        "label": "REDIS_URL",
        "kind": 5,
        "importPath": "services.pharmacy-service.core.settings",
        "description": "services.pharmacy-service.core.settings",
        "peekOfCode": "REDIS_URL = os.environ.get('REDIS_URL', 'redis://redis:6379/0')\nJWT_SECRET = os.environ.get('JWT_SECRET', SECRET_KEY)\nACCESS_TOKEN_LIFETIME = timedelta(minutes=60)\nREFRESH_TOKEN_LIFETIME = timedelta(days=7)\nROTATE_REFRESH_TOKENS = False\nSESSION_TTL = 86400  # 1 day in seconds\nMAX_SESSIONS_PER_USER = 5\nVERIFY_JWT_SIGNATURE = True\n# Swagger UI JWT auth configuration\nSWAGGER_SETTINGS = {",
        "detail": "services.pharmacy-service.core.settings",
        "documentation": {}
    },
    {
        "label": "JWT_SECRET",
        "kind": 5,
        "importPath": "services.pharmacy-service.core.settings",
        "description": "services.pharmacy-service.core.settings",
        "peekOfCode": "JWT_SECRET = os.environ.get('JWT_SECRET', SECRET_KEY)\nACCESS_TOKEN_LIFETIME = timedelta(minutes=60)\nREFRESH_TOKEN_LIFETIME = timedelta(days=7)\nROTATE_REFRESH_TOKENS = False\nSESSION_TTL = 86400  # 1 day in seconds\nMAX_SESSIONS_PER_USER = 5\nVERIFY_JWT_SIGNATURE = True\n# Swagger UI JWT auth configuration\nSWAGGER_SETTINGS = {\n    'SECURITY_DEFINITIONS': {",
        "detail": "services.pharmacy-service.core.settings",
        "documentation": {}
    },
    {
        "label": "ACCESS_TOKEN_LIFETIME",
        "kind": 5,
        "importPath": "services.pharmacy-service.core.settings",
        "description": "services.pharmacy-service.core.settings",
        "peekOfCode": "ACCESS_TOKEN_LIFETIME = timedelta(minutes=60)\nREFRESH_TOKEN_LIFETIME = timedelta(days=7)\nROTATE_REFRESH_TOKENS = False\nSESSION_TTL = 86400  # 1 day in seconds\nMAX_SESSIONS_PER_USER = 5\nVERIFY_JWT_SIGNATURE = True\n# Swagger UI JWT auth configuration\nSWAGGER_SETTINGS = {\n    'SECURITY_DEFINITIONS': {\n        'Bearer': {",
        "detail": "services.pharmacy-service.core.settings",
        "documentation": {}
    },
    {
        "label": "REFRESH_TOKEN_LIFETIME",
        "kind": 5,
        "importPath": "services.pharmacy-service.core.settings",
        "description": "services.pharmacy-service.core.settings",
        "peekOfCode": "REFRESH_TOKEN_LIFETIME = timedelta(days=7)\nROTATE_REFRESH_TOKENS = False\nSESSION_TTL = 86400  # 1 day in seconds\nMAX_SESSIONS_PER_USER = 5\nVERIFY_JWT_SIGNATURE = True\n# Swagger UI JWT auth configuration\nSWAGGER_SETTINGS = {\n    'SECURITY_DEFINITIONS': {\n        'Bearer': {\n            'type': 'apiKey',",
        "detail": "services.pharmacy-service.core.settings",
        "documentation": {}
    },
    {
        "label": "ROTATE_REFRESH_TOKENS",
        "kind": 5,
        "importPath": "services.pharmacy-service.core.settings",
        "description": "services.pharmacy-service.core.settings",
        "peekOfCode": "ROTATE_REFRESH_TOKENS = False\nSESSION_TTL = 86400  # 1 day in seconds\nMAX_SESSIONS_PER_USER = 5\nVERIFY_JWT_SIGNATURE = True\n# Swagger UI JWT auth configuration\nSWAGGER_SETTINGS = {\n    'SECURITY_DEFINITIONS': {\n        'Bearer': {\n            'type': 'apiKey',\n            'in': 'header',",
        "detail": "services.pharmacy-service.core.settings",
        "documentation": {}
    },
    {
        "label": "SESSION_TTL",
        "kind": 5,
        "importPath": "services.pharmacy-service.core.settings",
        "description": "services.pharmacy-service.core.settings",
        "peekOfCode": "SESSION_TTL = 86400  # 1 day in seconds\nMAX_SESSIONS_PER_USER = 5\nVERIFY_JWT_SIGNATURE = True\n# Swagger UI JWT auth configuration\nSWAGGER_SETTINGS = {\n    'SECURITY_DEFINITIONS': {\n        'Bearer': {\n            'type': 'apiKey',\n            'in': 'header',\n            'name': 'Authorization',",
        "detail": "services.pharmacy-service.core.settings",
        "documentation": {}
    },
    {
        "label": "MAX_SESSIONS_PER_USER",
        "kind": 5,
        "importPath": "services.pharmacy-service.core.settings",
        "description": "services.pharmacy-service.core.settings",
        "peekOfCode": "MAX_SESSIONS_PER_USER = 5\nVERIFY_JWT_SIGNATURE = True\n# Swagger UI JWT auth configuration\nSWAGGER_SETTINGS = {\n    'SECURITY_DEFINITIONS': {\n        'Bearer': {\n            'type': 'apiKey',\n            'in': 'header',\n            'name': 'Authorization',\n            'description': 'JWT Authorization header using the Bearer scheme. Example: \"Bearer {token}\"',",
        "detail": "services.pharmacy-service.core.settings",
        "documentation": {}
    },
    {
        "label": "VERIFY_JWT_SIGNATURE",
        "kind": 5,
        "importPath": "services.pharmacy-service.core.settings",
        "description": "services.pharmacy-service.core.settings",
        "peekOfCode": "VERIFY_JWT_SIGNATURE = True\n# Swagger UI JWT auth configuration\nSWAGGER_SETTINGS = {\n    'SECURITY_DEFINITIONS': {\n        'Bearer': {\n            'type': 'apiKey',\n            'in': 'header',\n            'name': 'Authorization',\n            'description': 'JWT Authorization header using the Bearer scheme. Example: \"Bearer {token}\"',\n        },",
        "detail": "services.pharmacy-service.core.settings",
        "documentation": {}
    },
    {
        "label": "SWAGGER_SETTINGS",
        "kind": 5,
        "importPath": "services.pharmacy-service.core.settings",
        "description": "services.pharmacy-service.core.settings",
        "peekOfCode": "SWAGGER_SETTINGS = {\n    'SECURITY_DEFINITIONS': {\n        'Bearer': {\n            'type': 'apiKey',\n            'in': 'header',\n            'name': 'Authorization',\n            'description': 'JWT Authorization header using the Bearer scheme. Example: \"Bearer {token}\"',\n        },\n    },\n    'USE_SESSION_AUTH': False,",
        "detail": "services.pharmacy-service.core.settings",
        "documentation": {}
    },
    {
        "label": "schema_view",
        "kind": 5,
        "importPath": "services.pharmacy-service.core.urls",
        "description": "services.pharmacy-service.core.urls",
        "peekOfCode": "schema_view = get_schema_view(\n    openapi.Info(\n        title=\"Pharmacy Service API\",\n        default_version='v1',\n        description=\"API for managing prescriptions, medications, and pharmacy inventory\",\n        terms_of_service=\"https://www.example.com/terms/\",\n        contact=openapi.Contact(email=\"contact@example.com\"),\n        license=openapi.License(name=\"BSD License\"),\n    ),\n    public=True,",
        "detail": "services.pharmacy-service.core.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "services.pharmacy-service.core.urls",
        "description": "services.pharmacy-service.core.urls",
        "peekOfCode": "urlpatterns = [\n    path('admin/', admin.site.urls),\n    path('api/', include('pharmacy.urls')),\n    path('api/pharmacy/', include('pharmacy.urls')),  # Thêm đường dẫn phù hợp với API Gateway\n    path('', schema_view.with_ui('swagger', cache_timeout=0), name='schema-swagger-ui'),\n    re_path(r'^pharmacy-service(?P<format>\\.json|\\.yaml)$', schema_view.without_ui(cache_timeout=0), name='schema-json'),\n    path('redoc/', schema_view.with_ui('redoc', cache_timeout=0), name='schema-redoc'),\n]",
        "detail": "services.pharmacy-service.core.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "services.pharmacy-service.core.wsgi",
        "description": "services.pharmacy-service.core.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "services.pharmacy-service.core.wsgi",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "services.pharmacy-service.pharmacy.migrations.0001_initial",
        "description": "services.pharmacy-service.pharmacy.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Dispensing',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('pharmacist_id', models.IntegerField()),",
        "detail": "services.pharmacy-service.pharmacy.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "services.pharmacy-service.pharmacy.migrations.0002_prescription_diagnosis_id_prescription_encounter_id",
        "description": "services.pharmacy-service.pharmacy.migrations.0002_prescription_diagnosis_id_prescription_encounter_id",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('pharmacy', '0001_initial'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='prescription',\n            name='diagnosis_id',\n            field=models.IntegerField(blank=True, help_text='ID of the diagnosis in medical-record-service', null=True),\n        ),",
        "detail": "services.pharmacy-service.pharmacy.migrations.0002_prescription_diagnosis_id_prescription_encounter_id",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "services.pharmacy-service.pharmacy.migrations.0003_prescription_diagnosis_code_and_more",
        "description": "services.pharmacy-service.pharmacy.migrations.0003_prescription_diagnosis_code_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('pharmacy', '0002_prescription_diagnosis_id_prescription_encounter_id'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='prescription',\n            name='diagnosis_code',\n            field=models.CharField(blank=True, help_text='Mã chẩn đoán (ICD-10)', max_length=20, null=True),\n        ),",
        "detail": "services.pharmacy-service.pharmacy.migrations.0003_prescription_diagnosis_code_and_more",
        "documentation": {}
    },
    {
        "label": "MedicationAdmin",
        "kind": 6,
        "importPath": "services.pharmacy-service.pharmacy.admin",
        "description": "services.pharmacy-service.pharmacy.admin",
        "peekOfCode": "class MedicationAdmin(admin.ModelAdmin):\n    list_display = ('name', 'strength', 'dosage_form', 'category', 'requires_prescription')\n    list_filter = ('category', 'dosage_form', 'requires_prescription')\n    search_fields = ('name', 'description')\nclass PrescriptionItemInline(admin.TabularInline):\n    model = PrescriptionItem\n    extra = 1\n@admin.register(Prescription)\nclass PrescriptionAdmin(admin.ModelAdmin):\n    list_display = ('id', 'patient_id', 'doctor_id', 'date_prescribed', 'status')",
        "detail": "services.pharmacy-service.pharmacy.admin",
        "documentation": {}
    },
    {
        "label": "PrescriptionItemInline",
        "kind": 6,
        "importPath": "services.pharmacy-service.pharmacy.admin",
        "description": "services.pharmacy-service.pharmacy.admin",
        "peekOfCode": "class PrescriptionItemInline(admin.TabularInline):\n    model = PrescriptionItem\n    extra = 1\n@admin.register(Prescription)\nclass PrescriptionAdmin(admin.ModelAdmin):\n    list_display = ('id', 'patient_id', 'doctor_id', 'date_prescribed', 'status')\n    list_filter = ('status', 'date_prescribed')\n    search_fields = ('patient_id', 'doctor_id')\n    inlines = [PrescriptionItemInline]\n@admin.register(PrescriptionItem)",
        "detail": "services.pharmacy-service.pharmacy.admin",
        "documentation": {}
    },
    {
        "label": "PrescriptionAdmin",
        "kind": 6,
        "importPath": "services.pharmacy-service.pharmacy.admin",
        "description": "services.pharmacy-service.pharmacy.admin",
        "peekOfCode": "class PrescriptionAdmin(admin.ModelAdmin):\n    list_display = ('id', 'patient_id', 'doctor_id', 'date_prescribed', 'status')\n    list_filter = ('status', 'date_prescribed')\n    search_fields = ('patient_id', 'doctor_id')\n    inlines = [PrescriptionItemInline]\n@admin.register(PrescriptionItem)\nclass PrescriptionItemAdmin(admin.ModelAdmin):\n    list_display = ('id', 'prescription', 'medication', 'quantity', 'dosage')\n    list_filter = ('medication',)\n    search_fields = ('prescription__id', 'medication__name')",
        "detail": "services.pharmacy-service.pharmacy.admin",
        "documentation": {}
    },
    {
        "label": "PrescriptionItemAdmin",
        "kind": 6,
        "importPath": "services.pharmacy-service.pharmacy.admin",
        "description": "services.pharmacy-service.pharmacy.admin",
        "peekOfCode": "class PrescriptionItemAdmin(admin.ModelAdmin):\n    list_display = ('id', 'prescription', 'medication', 'quantity', 'dosage')\n    list_filter = ('medication',)\n    search_fields = ('prescription__id', 'medication__name')\n@admin.register(Inventory)\nclass InventoryAdmin(admin.ModelAdmin):\n    list_display = ('id', 'medication', 'batch_number', 'expiry_date', 'quantity', 'unit_price')\n    list_filter = ('medication', 'expiry_date')\n    search_fields = ('medication__name', 'batch_number')\nclass DispensingItemInline(admin.TabularInline):",
        "detail": "services.pharmacy-service.pharmacy.admin",
        "documentation": {}
    },
    {
        "label": "InventoryAdmin",
        "kind": 6,
        "importPath": "services.pharmacy-service.pharmacy.admin",
        "description": "services.pharmacy-service.pharmacy.admin",
        "peekOfCode": "class InventoryAdmin(admin.ModelAdmin):\n    list_display = ('id', 'medication', 'batch_number', 'expiry_date', 'quantity', 'unit_price')\n    list_filter = ('medication', 'expiry_date')\n    search_fields = ('medication__name', 'batch_number')\nclass DispensingItemInline(admin.TabularInline):\n    model = DispensingItem\n    extra = 1\n@admin.register(Dispensing)\nclass DispensingAdmin(admin.ModelAdmin):\n    list_display = ('id', 'prescription', 'pharmacist_id', 'date_dispensed', 'status')",
        "detail": "services.pharmacy-service.pharmacy.admin",
        "documentation": {}
    },
    {
        "label": "DispensingItemInline",
        "kind": 6,
        "importPath": "services.pharmacy-service.pharmacy.admin",
        "description": "services.pharmacy-service.pharmacy.admin",
        "peekOfCode": "class DispensingItemInline(admin.TabularInline):\n    model = DispensingItem\n    extra = 1\n@admin.register(Dispensing)\nclass DispensingAdmin(admin.ModelAdmin):\n    list_display = ('id', 'prescription', 'pharmacist_id', 'date_dispensed', 'status')\n    list_filter = ('status', 'date_dispensed')\n    search_fields = ('prescription__id', 'pharmacist_id')\n    inlines = [DispensingItemInline]\n@admin.register(DispensingItem)",
        "detail": "services.pharmacy-service.pharmacy.admin",
        "documentation": {}
    },
    {
        "label": "DispensingAdmin",
        "kind": 6,
        "importPath": "services.pharmacy-service.pharmacy.admin",
        "description": "services.pharmacy-service.pharmacy.admin",
        "peekOfCode": "class DispensingAdmin(admin.ModelAdmin):\n    list_display = ('id', 'prescription', 'pharmacist_id', 'date_dispensed', 'status')\n    list_filter = ('status', 'date_dispensed')\n    search_fields = ('prescription__id', 'pharmacist_id')\n    inlines = [DispensingItemInline]\n@admin.register(DispensingItem)\nclass DispensingItemAdmin(admin.ModelAdmin):\n    list_display = ('id', 'dispensing', 'prescription_item', 'inventory', 'quantity_dispensed')\n    list_filter = ('dispensing',)\n    search_fields = ('dispensing__id', 'prescription_item__id')",
        "detail": "services.pharmacy-service.pharmacy.admin",
        "documentation": {}
    },
    {
        "label": "DispensingItemAdmin",
        "kind": 6,
        "importPath": "services.pharmacy-service.pharmacy.admin",
        "description": "services.pharmacy-service.pharmacy.admin",
        "peekOfCode": "class DispensingItemAdmin(admin.ModelAdmin):\n    list_display = ('id', 'dispensing', 'prescription_item', 'inventory', 'quantity_dispensed')\n    list_filter = ('dispensing',)\n    search_fields = ('dispensing__id', 'prescription_item__id')",
        "detail": "services.pharmacy-service.pharmacy.admin",
        "documentation": {}
    },
    {
        "label": "PharmacyConfig",
        "kind": 6,
        "importPath": "services.pharmacy-service.pharmacy.apps",
        "description": "services.pharmacy-service.pharmacy.apps",
        "peekOfCode": "class PharmacyConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'pharmacy'",
        "detail": "services.pharmacy-service.pharmacy.apps",
        "documentation": {}
    },
    {
        "label": "CustomJWTAuthentication",
        "kind": 5,
        "importPath": "services.pharmacy-service.pharmacy.authentication",
        "description": "services.pharmacy-service.pharmacy.authentication",
        "peekOfCode": "CustomJWTAuthentication = ServiceAuthentication",
        "detail": "services.pharmacy-service.pharmacy.authentication",
        "documentation": {}
    },
    {
        "label": "create_invoice_from_prescription",
        "kind": 2,
        "importPath": "services.pharmacy-service.pharmacy.integrations",
        "description": "services.pharmacy-service.pharmacy.integrations",
        "peekOfCode": "def create_invoice_from_prescription(prescription, dispensing=None, token=None):\n    \"\"\"\n    Create an invoice in the Billing Service for a dispensed prescription.\n    Args:\n        prescription: The Prescription object\n        dispensing: The Dispensing object (optional)\n        token (str, optional): JWT token for authentication\n    Returns:\n        dict or None: Invoice data or None if creation failed\n    \"\"\"",
        "detail": "services.pharmacy-service.pharmacy.integrations",
        "documentation": {}
    },
    {
        "label": "send_notification",
        "kind": 2,
        "importPath": "services.pharmacy-service.pharmacy.integrations",
        "description": "services.pharmacy-service.pharmacy.integrations",
        "peekOfCode": "def send_notification(user_id, notification_type, message, additional_data=None, token=None):\n    \"\"\"\n    Send a notification to a user.\n    Args:\n        user_id (int): ID of the user to notify\n        notification_type (str): Type of notification\n        message (str): Notification message\n        additional_data (dict, optional): Additional data for the notification\n        token (str, optional): JWT token for authentication\n    Returns:",
        "detail": "services.pharmacy-service.pharmacy.integrations",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "services.pharmacy-service.pharmacy.integrations",
        "description": "services.pharmacy-service.pharmacy.integrations",
        "peekOfCode": "logger = logging.getLogger(__name__)\n# Initialize service clients\nbilling_client = ServiceClient('BILLING_SERVICE')\nnotification_client = ServiceClient('NOTIFICATION_SERVICE')\n# This function is replaced by ServiceClient\ndef create_invoice_from_prescription(prescription, dispensing=None, token=None):\n    \"\"\"\n    Create an invoice in the Billing Service for a dispensed prescription.\n    Args:\n        prescription: The Prescription object",
        "detail": "services.pharmacy-service.pharmacy.integrations",
        "documentation": {}
    },
    {
        "label": "billing_client",
        "kind": 5,
        "importPath": "services.pharmacy-service.pharmacy.integrations",
        "description": "services.pharmacy-service.pharmacy.integrations",
        "peekOfCode": "billing_client = ServiceClient('BILLING_SERVICE')\nnotification_client = ServiceClient('NOTIFICATION_SERVICE')\n# This function is replaced by ServiceClient\ndef create_invoice_from_prescription(prescription, dispensing=None, token=None):\n    \"\"\"\n    Create an invoice in the Billing Service for a dispensed prescription.\n    Args:\n        prescription: The Prescription object\n        dispensing: The Dispensing object (optional)\n        token (str, optional): JWT token for authentication",
        "detail": "services.pharmacy-service.pharmacy.integrations",
        "documentation": {}
    },
    {
        "label": "notification_client",
        "kind": 5,
        "importPath": "services.pharmacy-service.pharmacy.integrations",
        "description": "services.pharmacy-service.pharmacy.integrations",
        "peekOfCode": "notification_client = ServiceClient('NOTIFICATION_SERVICE')\n# This function is replaced by ServiceClient\ndef create_invoice_from_prescription(prescription, dispensing=None, token=None):\n    \"\"\"\n    Create an invoice in the Billing Service for a dispensed prescription.\n    Args:\n        prescription: The Prescription object\n        dispensing: The Dispensing object (optional)\n        token (str, optional): JWT token for authentication\n    Returns:",
        "detail": "services.pharmacy-service.pharmacy.integrations",
        "documentation": {}
    },
    {
        "label": "Medication",
        "kind": 6,
        "importPath": "services.pharmacy-service.pharmacy.models",
        "description": "services.pharmacy-service.pharmacy.models",
        "peekOfCode": "class Medication(models.Model):\n    \"\"\"\n    Model for storing medication information.\n    \"\"\"\n    DOSAGE_FORM_CHOICES = [\n        ('TABLET', 'Tablet'),\n        ('CAPSULE', 'Capsule'),\n        ('LIQUID', 'Liquid'),\n        ('INJECTION', 'Injection'),\n        ('CREAM', 'Cream'),",
        "detail": "services.pharmacy-service.pharmacy.models",
        "documentation": {}
    },
    {
        "label": "Prescription",
        "kind": 6,
        "importPath": "services.pharmacy-service.pharmacy.models",
        "description": "services.pharmacy-service.pharmacy.models",
        "peekOfCode": "class Prescription(models.Model):\n    \"\"\"\n    Model for storing prescription information.\n    \"\"\"\n    STATUS_CHOICES = [\n        ('PENDING', 'Pending'),\n        ('PROCESSING', 'Processing'),\n        ('DISPENSED', 'Dispensed'),\n        ('CANCELLED', 'Cancelled'),\n        ('EXPIRED', 'Expired'),",
        "detail": "services.pharmacy-service.pharmacy.models",
        "documentation": {}
    },
    {
        "label": "PrescriptionItem",
        "kind": 6,
        "importPath": "services.pharmacy-service.pharmacy.models",
        "description": "services.pharmacy-service.pharmacy.models",
        "peekOfCode": "class PrescriptionItem(models.Model):\n    \"\"\"\n    Model for storing prescription item details.\n    \"\"\"\n    prescription = models.ForeignKey(Prescription, related_name='items', on_delete=models.CASCADE)\n    medication = models.ForeignKey(Medication, related_name='prescription_items', on_delete=models.PROTECT)\n    dosage = models.CharField(max_length=100)\n    frequency = models.CharField(max_length=100)\n    duration = models.CharField(max_length=100)\n    instructions = models.TextField()",
        "detail": "services.pharmacy-service.pharmacy.models",
        "documentation": {}
    },
    {
        "label": "Inventory",
        "kind": 6,
        "importPath": "services.pharmacy-service.pharmacy.models",
        "description": "services.pharmacy-service.pharmacy.models",
        "peekOfCode": "class Inventory(models.Model):\n    \"\"\"\n    Model for storing medication inventory.\n    \"\"\"\n    medication = models.ForeignKey(Medication, related_name='inventory_items', on_delete=models.CASCADE)\n    batch_number = models.CharField(max_length=100)\n    expiry_date = models.DateField()\n    quantity = models.PositiveIntegerField()\n    unit_price = models.DecimalField(max_digits=10, decimal_places=2)\n    location = models.CharField(max_length=100, blank=True, null=True)",
        "detail": "services.pharmacy-service.pharmacy.models",
        "documentation": {}
    },
    {
        "label": "Dispensing",
        "kind": 6,
        "importPath": "services.pharmacy-service.pharmacy.models",
        "description": "services.pharmacy-service.pharmacy.models",
        "peekOfCode": "class Dispensing(models.Model):\n    \"\"\"\n    Model for storing dispensing information.\n    \"\"\"\n    STATUS_CHOICES = [\n        ('PENDING', 'Pending'),\n        ('COMPLETED', 'Completed'),\n        ('CANCELLED', 'Cancelled'),\n    ]\n    prescription = models.ForeignKey(Prescription, related_name='dispensings', on_delete=models.CASCADE)",
        "detail": "services.pharmacy-service.pharmacy.models",
        "documentation": {}
    },
    {
        "label": "DispensingItem",
        "kind": 6,
        "importPath": "services.pharmacy-service.pharmacy.models",
        "description": "services.pharmacy-service.pharmacy.models",
        "peekOfCode": "class DispensingItem(models.Model):\n    \"\"\"\n    Model for storing dispensing item details.\n    \"\"\"\n    dispensing = models.ForeignKey(Dispensing, related_name='items', on_delete=models.CASCADE)\n    prescription_item = models.ForeignKey(PrescriptionItem, related_name='dispensing_items', on_delete=models.CASCADE)\n    inventory = models.ForeignKey(Inventory, related_name='dispensing_items', on_delete=models.CASCADE)\n    quantity_dispensed = models.PositiveIntegerField()\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)",
        "detail": "services.pharmacy-service.pharmacy.models",
        "documentation": {}
    },
    {
        "label": "HasAnyRole",
        "kind": 6,
        "importPath": "services.pharmacy-service.pharmacy.permissions",
        "description": "services.pharmacy-service.pharmacy.permissions",
        "peekOfCode": "class HasAnyRole(permissions.BasePermission):\n    \"\"\"\n    Permission class that allows access if the user has any of the specified roles.\n    \"\"\"\n    def has_permission(self, request, view):\n        if not request.user or not hasattr(request.user, 'role'):\n            return False\n        # Allow access for DOCTOR, PHARMACIST, PATIENT roles\n        allowed_roles = ['DOCTOR', 'PHARMACIST', 'PATIENT']\n        return request.user.role in allowed_roles",
        "detail": "services.pharmacy-service.pharmacy.permissions",
        "documentation": {}
    },
    {
        "label": "CanViewPrescriptions",
        "kind": 5,
        "importPath": "services.pharmacy-service.pharmacy.permissions",
        "description": "services.pharmacy-service.pharmacy.permissions",
        "peekOfCode": "CanViewPrescriptions = PharmacyPermissions.CanViewPrescriptions\nCanCreatePrescription = PharmacyPermissions.CanCreatePrescription\nCanUpdatePrescription = PharmacyPermissions.CanUpdatePrescription\nCanCancelPrescription = PharmacyPermissions.CanCancelPrescription\nCanManageMedication = PharmacyPermissions.CanManageMedication\n# Custom permission class that allows any of the specified roles\nclass HasAnyRole(permissions.BasePermission):\n    \"\"\"\n    Permission class that allows access if the user has any of the specified roles.\n    \"\"\"",
        "detail": "services.pharmacy-service.pharmacy.permissions",
        "documentation": {}
    },
    {
        "label": "CanCreatePrescription",
        "kind": 5,
        "importPath": "services.pharmacy-service.pharmacy.permissions",
        "description": "services.pharmacy-service.pharmacy.permissions",
        "peekOfCode": "CanCreatePrescription = PharmacyPermissions.CanCreatePrescription\nCanUpdatePrescription = PharmacyPermissions.CanUpdatePrescription\nCanCancelPrescription = PharmacyPermissions.CanCancelPrescription\nCanManageMedication = PharmacyPermissions.CanManageMedication\n# Custom permission class that allows any of the specified roles\nclass HasAnyRole(permissions.BasePermission):\n    \"\"\"\n    Permission class that allows access if the user has any of the specified roles.\n    \"\"\"\n    def has_permission(self, request, view):",
        "detail": "services.pharmacy-service.pharmacy.permissions",
        "documentation": {}
    },
    {
        "label": "CanUpdatePrescription",
        "kind": 5,
        "importPath": "services.pharmacy-service.pharmacy.permissions",
        "description": "services.pharmacy-service.pharmacy.permissions",
        "peekOfCode": "CanUpdatePrescription = PharmacyPermissions.CanUpdatePrescription\nCanCancelPrescription = PharmacyPermissions.CanCancelPrescription\nCanManageMedication = PharmacyPermissions.CanManageMedication\n# Custom permission class that allows any of the specified roles\nclass HasAnyRole(permissions.BasePermission):\n    \"\"\"\n    Permission class that allows access if the user has any of the specified roles.\n    \"\"\"\n    def has_permission(self, request, view):\n        if not request.user or not hasattr(request.user, 'role'):",
        "detail": "services.pharmacy-service.pharmacy.permissions",
        "documentation": {}
    },
    {
        "label": "CanCancelPrescription",
        "kind": 5,
        "importPath": "services.pharmacy-service.pharmacy.permissions",
        "description": "services.pharmacy-service.pharmacy.permissions",
        "peekOfCode": "CanCancelPrescription = PharmacyPermissions.CanCancelPrescription\nCanManageMedication = PharmacyPermissions.CanManageMedication\n# Custom permission class that allows any of the specified roles\nclass HasAnyRole(permissions.BasePermission):\n    \"\"\"\n    Permission class that allows access if the user has any of the specified roles.\n    \"\"\"\n    def has_permission(self, request, view):\n        if not request.user or not hasattr(request.user, 'role'):\n            return False",
        "detail": "services.pharmacy-service.pharmacy.permissions",
        "documentation": {}
    },
    {
        "label": "CanManageMedication",
        "kind": 5,
        "importPath": "services.pharmacy-service.pharmacy.permissions",
        "description": "services.pharmacy-service.pharmacy.permissions",
        "peekOfCode": "CanManageMedication = PharmacyPermissions.CanManageMedication\n# Custom permission class that allows any of the specified roles\nclass HasAnyRole(permissions.BasePermission):\n    \"\"\"\n    Permission class that allows access if the user has any of the specified roles.\n    \"\"\"\n    def has_permission(self, request, view):\n        if not request.user or not hasattr(request.user, 'role'):\n            return False\n        # Allow access for DOCTOR, PHARMACIST, PATIENT roles",
        "detail": "services.pharmacy-service.pharmacy.permissions",
        "documentation": {}
    },
    {
        "label": "MedicationSerializer",
        "kind": 6,
        "importPath": "services.pharmacy-service.pharmacy.serializers",
        "description": "services.pharmacy-service.pharmacy.serializers",
        "peekOfCode": "class MedicationSerializer(serializers.ModelSerializer):\n    \"\"\"\n    Serializer for Medication model.\n    \"\"\"\n    dosage_form_display = serializers.CharField(source='get_dosage_form_display', read_only=True)\n    category_display = serializers.CharField(source='get_category_display', read_only=True)\n    class Meta:\n        model = Medication\n        fields = [\n            'id', 'name', 'description', 'dosage_form', 'dosage_form_display',",
        "detail": "services.pharmacy-service.pharmacy.serializers",
        "documentation": {}
    },
    {
        "label": "PrescriptionItemSerializer",
        "kind": 6,
        "importPath": "services.pharmacy-service.pharmacy.serializers",
        "description": "services.pharmacy-service.pharmacy.serializers",
        "peekOfCode": "class PrescriptionItemSerializer(serializers.ModelSerializer):\n    \"\"\"\n    Serializer for PrescriptionItem model.\n    \"\"\"\n    medication_details = MedicationSerializer(source='medication', read_only=True)\n    class Meta:\n        model = PrescriptionItem\n        fields = [\n            'id', 'prescription', 'medication', 'medication_details',\n            'dosage', 'frequency', 'duration', 'instructions', 'quantity',",
        "detail": "services.pharmacy-service.pharmacy.serializers",
        "documentation": {}
    },
    {
        "label": "PrescriptionSerializer",
        "kind": 6,
        "importPath": "services.pharmacy-service.pharmacy.serializers",
        "description": "services.pharmacy-service.pharmacy.serializers",
        "peekOfCode": "class PrescriptionSerializer(serializers.ModelSerializer):\n    \"\"\"\n    Serializer for Prescription model.\n    \"\"\"\n    items = PrescriptionItemSerializer(many=True, read_only=True)\n    status_display = serializers.CharField(source='get_status_display', read_only=True)\n    class Meta:\n        model = Prescription\n        fields = [\n            'id', 'patient_id', 'doctor_id', 'diagnosis_id', 'encounter_id',",
        "detail": "services.pharmacy-service.pharmacy.serializers",
        "documentation": {}
    },
    {
        "label": "PrescriptionCreateSerializer",
        "kind": 6,
        "importPath": "services.pharmacy-service.pharmacy.serializers",
        "description": "services.pharmacy-service.pharmacy.serializers",
        "peekOfCode": "class PrescriptionCreateSerializer(serializers.ModelSerializer):\n    \"\"\"\n    Serializer for creating a Prescription with items.\n    \"\"\"\n    items = serializers.ListField(\n        child=serializers.DictField(),\n        write_only=True\n    )\n    class Meta:\n        model = Prescription",
        "detail": "services.pharmacy-service.pharmacy.serializers",
        "documentation": {}
    },
    {
        "label": "InventorySerializer",
        "kind": 6,
        "importPath": "services.pharmacy-service.pharmacy.serializers",
        "description": "services.pharmacy-service.pharmacy.serializers",
        "peekOfCode": "class InventorySerializer(serializers.ModelSerializer):\n    \"\"\"\n    Serializer for Inventory model.\n    \"\"\"\n    medication_details = MedicationSerializer(source='medication', read_only=True)\n    class Meta:\n        model = Inventory\n        fields = [\n            'id', 'medication', 'medication_details', 'batch_number',\n            'expiry_date', 'quantity', 'unit_price', 'location',",
        "detail": "services.pharmacy-service.pharmacy.serializers",
        "documentation": {}
    },
    {
        "label": "DispensingItemSerializer",
        "kind": 6,
        "importPath": "services.pharmacy-service.pharmacy.serializers",
        "description": "services.pharmacy-service.pharmacy.serializers",
        "peekOfCode": "class DispensingItemSerializer(serializers.ModelSerializer):\n    \"\"\"\n    Serializer for DispensingItem model.\n    \"\"\"\n    prescription_item_details = PrescriptionItemSerializer(source='prescription_item', read_only=True)\n    inventory_details = InventorySerializer(source='inventory', read_only=True)\n    class Meta:\n        model = DispensingItem\n        fields = [\n            'id', 'dispensing', 'prescription_item', 'prescription_item_details',",
        "detail": "services.pharmacy-service.pharmacy.serializers",
        "documentation": {}
    },
    {
        "label": "DispensingSerializer",
        "kind": 6,
        "importPath": "services.pharmacy-service.pharmacy.serializers",
        "description": "services.pharmacy-service.pharmacy.serializers",
        "peekOfCode": "class DispensingSerializer(serializers.ModelSerializer):\n    \"\"\"\n    Serializer for Dispensing model.\n    \"\"\"\n    items = DispensingItemSerializer(many=True, read_only=True)\n    status_display = serializers.CharField(source='get_status_display', read_only=True)\n    prescription_details = PrescriptionSerializer(source='prescription', read_only=True)\n    class Meta:\n        model = Dispensing\n        fields = [",
        "detail": "services.pharmacy-service.pharmacy.serializers",
        "documentation": {}
    },
    {
        "label": "DispensingCreateSerializer",
        "kind": 6,
        "importPath": "services.pharmacy-service.pharmacy.serializers",
        "description": "services.pharmacy-service.pharmacy.serializers",
        "peekOfCode": "class DispensingCreateSerializer(serializers.ModelSerializer):\n    \"\"\"\n    Serializer for creating a Dispensing with items.\n    \"\"\"\n    items = serializers.ListField(\n        child=serializers.DictField(),\n        write_only=True\n    )\n    class Meta:\n        model = Dispensing",
        "detail": "services.pharmacy-service.pharmacy.serializers",
        "documentation": {}
    },
    {
        "label": "MedicalRecordService",
        "kind": 6,
        "importPath": "services.pharmacy-service.pharmacy.services",
        "description": "services.pharmacy-service.pharmacy.services",
        "peekOfCode": "class MedicalRecordService:\n    \"\"\"\n    Service để giao tiếp với Medical Record Service thông qua API Gateway.\n    \"\"\"\n    @staticmethod\n    def get_medical_record_info(medical_record_id, auth_token=None):\n        \"\"\"\n        Lấy thông tin hồ sơ bệnh án từ Medical Record Service thông qua API Gateway.\n        Args:\n            medical_record_id (int): ID của hồ sơ bệnh án",
        "detail": "services.pharmacy-service.pharmacy.services",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "services.pharmacy-service.pharmacy.services",
        "description": "services.pharmacy-service.pharmacy.services",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass MedicalRecordService:\n    \"\"\"\n    Service để giao tiếp với Medical Record Service thông qua API Gateway.\n    \"\"\"\n    @staticmethod\n    def get_medical_record_info(medical_record_id, auth_token=None):\n        \"\"\"\n        Lấy thông tin hồ sơ bệnh án từ Medical Record Service thông qua API Gateway.\n        Args:",
        "detail": "services.pharmacy-service.pharmacy.services",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "services.pharmacy-service.pharmacy.urls",
        "description": "services.pharmacy-service.pharmacy.urls",
        "peekOfCode": "router = DefaultRouter()\nrouter.register(r'medications', MedicationViewSet)\nrouter.register(r'prescriptions', PrescriptionViewSet)\nrouter.register(r'prescription-items', PrescriptionItemViewSet)\nrouter.register(r'inventory', InventoryViewSet)\nrouter.register(r'dispensings', DispensingViewSet)\nrouter.register(r'dispensing-items', DispensingItemViewSet)\nurlpatterns = [\n    path('', include(router.urls)),\n    path('pharmacy/', include(router.urls)),  # Thêm prefix 'pharmacy/' để phù hợp với API Gateway",
        "detail": "services.pharmacy-service.pharmacy.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "services.pharmacy-service.pharmacy.urls",
        "description": "services.pharmacy-service.pharmacy.urls",
        "peekOfCode": "urlpatterns = [\n    path('', include(router.urls)),\n    path('pharmacy/', include(router.urls)),  # Thêm prefix 'pharmacy/' để phù hợp với API Gateway\n]\n# Register health check endpoint\nurlpatterns = register_health_check(urlpatterns)",
        "detail": "services.pharmacy-service.pharmacy.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "services.pharmacy-service.pharmacy.urls",
        "description": "services.pharmacy-service.pharmacy.urls",
        "peekOfCode": "urlpatterns = register_health_check(urlpatterns)",
        "detail": "services.pharmacy-service.pharmacy.urls",
        "documentation": {}
    },
    {
        "label": "MedicationViewSet",
        "kind": 6,
        "importPath": "services.pharmacy-service.pharmacy.views",
        "description": "services.pharmacy-service.pharmacy.views",
        "peekOfCode": "class MedicationViewSet(viewsets.ModelViewSet):\n    \"\"\"\n    API endpoint for managing medications.\n    \"\"\"\n    queryset = Medication.objects.all()\n    serializer_class = MedicationSerializer\n    authentication_classes = [CustomJWTAuthentication]\n    permission_classes = [IsPharmacist]\n    filter_backends = [DjangoFilterBackend, filters.SearchFilter, filters.OrderingFilter]\n    filterset_fields = ['category', 'dosage_form', 'requires_prescription', 'manufacturer']",
        "detail": "services.pharmacy-service.pharmacy.views",
        "documentation": {}
    },
    {
        "label": "PrescriptionViewSet",
        "kind": 6,
        "importPath": "services.pharmacy-service.pharmacy.views",
        "description": "services.pharmacy-service.pharmacy.views",
        "peekOfCode": "class PrescriptionViewSet(viewsets.ModelViewSet):\n    \"\"\"\n    API endpoint for managing prescriptions.\n    \"\"\"\n    queryset = Prescription.objects.all()\n    serializer_class = PrescriptionSerializer\n    authentication_classes = [CustomJWTAuthentication]\n    permission_classes = [IsDoctor | IsAdmin | IsPharmacist | IsPatient]\n    filter_backends = [DjangoFilterBackend, filters.OrderingFilter]\n    filterset_fields = ['patient_id', 'doctor_id', 'diagnosis_id', 'encounter_id', 'status']",
        "detail": "services.pharmacy-service.pharmacy.views",
        "documentation": {}
    },
    {
        "label": "PrescriptionItemViewSet",
        "kind": 6,
        "importPath": "services.pharmacy-service.pharmacy.views",
        "description": "services.pharmacy-service.pharmacy.views",
        "peekOfCode": "class PrescriptionItemViewSet(viewsets.ModelViewSet):\n    \"\"\"\n    API endpoint for managing prescription items.\n    \"\"\"\n    queryset = PrescriptionItem.objects.all()\n    serializer_class = PrescriptionItemSerializer\n    authentication_classes = [CustomJWTAuthentication]\n    permission_classes = [HasAnyRole]  # HasAnyRole already includes PATIENT role\n    filter_backends = [DjangoFilterBackend]\n    filterset_fields = ['prescription', 'medication']",
        "detail": "services.pharmacy-service.pharmacy.views",
        "documentation": {}
    },
    {
        "label": "InventoryViewSet",
        "kind": 6,
        "importPath": "services.pharmacy-service.pharmacy.views",
        "description": "services.pharmacy-service.pharmacy.views",
        "peekOfCode": "class InventoryViewSet(viewsets.ModelViewSet):\n    \"\"\"\n    API endpoint for managing inventory.\n    \"\"\"\n    queryset = Inventory.objects.all()\n    serializer_class = InventorySerializer\n    authentication_classes = [CustomJWTAuthentication]\n    permission_classes = [IsPharmacist | IsAdmin]\n    filter_backends = [DjangoFilterBackend, filters.OrderingFilter]\n    filterset_fields = ['medication', 'batch_number']",
        "detail": "services.pharmacy-service.pharmacy.views",
        "documentation": {}
    },
    {
        "label": "DispensingViewSet",
        "kind": 6,
        "importPath": "services.pharmacy-service.pharmacy.views",
        "description": "services.pharmacy-service.pharmacy.views",
        "peekOfCode": "class DispensingViewSet(viewsets.ModelViewSet):\n    \"\"\"\n    API endpoint for managing dispensing.\n    \"\"\"\n    queryset = Dispensing.objects.all()\n    serializer_class = DispensingSerializer\n    authentication_classes = [CustomJWTAuthentication]\n    permission_classes = [IsPharmacist | IsAdmin]\n    filter_backends = [DjangoFilterBackend, filters.OrderingFilter]\n    filterset_fields = ['prescription', 'pharmacist_id', 'status']",
        "detail": "services.pharmacy-service.pharmacy.views",
        "documentation": {}
    },
    {
        "label": "DispensingItemViewSet",
        "kind": 6,
        "importPath": "services.pharmacy-service.pharmacy.views",
        "description": "services.pharmacy-service.pharmacy.views",
        "peekOfCode": "class DispensingItemViewSet(viewsets.ModelViewSet):\n    \"\"\"\n    API endpoint for managing dispensing items.\n    \"\"\"\n    queryset = DispensingItem.objects.all()\n    serializer_class = DispensingItemSerializer\n    authentication_classes = [CustomJWTAuthentication]\n    permission_classes = [IsPharmacist]\n    filter_backends = [DjangoFilterBackend]\n    filterset_fields = ['dispensing', 'prescription_item', 'inventory']",
        "detail": "services.pharmacy-service.pharmacy.views",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "services.pharmacy-service.pharmacy.views",
        "description": "services.pharmacy-service.pharmacy.views",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass MedicationViewSet(viewsets.ModelViewSet):\n    \"\"\"\n    API endpoint for managing medications.\n    \"\"\"\n    queryset = Medication.objects.all()\n    serializer_class = MedicationSerializer\n    authentication_classes = [CustomJWTAuthentication]\n    permission_classes = [IsPharmacist]\n    filter_backends = [DjangoFilterBackend, filters.SearchFilter, filters.OrderingFilter]",
        "detail": "services.pharmacy-service.pharmacy.views",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "services.pharmacy-service.manage",
        "description": "services.pharmacy-service.manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'core.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "services.pharmacy-service.manage",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "services.user-service.authentication.management.commands.create_default_users",
        "description": "services.user-service.authentication.management.commands.create_default_users",
        "peekOfCode": "class Command(BaseCommand):\n    help = 'Create default users for testing'\n    def handle(self, *args, **options):\n        with transaction.atomic():\n            # Check if admin already exists\n            if not User.objects.filter(email='admin@example.com').exists():\n                admin_user = User.objects.create_user(\n                    email='admin@example.com',\n                    password='admin123',\n                    first_name='Admin',",
        "detail": "services.user-service.authentication.management.commands.create_default_users",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "services.user-service.authentication.migrations.0001_initial",
        "description": "services.user-service.authentication.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('auth', '0012_alter_user_first_name_max_length'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='User',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "services.user-service.authentication.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "services.user-service.authentication.migrations.0002_delete_userpermission",
        "description": "services.user-service.authentication.migrations.0002_delete_userpermission",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('authentication', '0001_initial'),\n    ]\n    operations = [\n        migrations.DeleteModel(\n            name='UserPermission',\n        ),\n    ]",
        "detail": "services.user-service.authentication.migrations.0002_delete_userpermission",
        "documentation": {}
    },
    {
        "label": "UserAdmin",
        "kind": 6,
        "importPath": "services.user-service.authentication.admin",
        "description": "services.user-service.authentication.admin",
        "peekOfCode": "class UserAdmin(admin.ModelAdmin):\n    list_display = ('email', 'first_name', 'last_name', 'role', 'is_active', 'is_staff')\n    search_fields = ('email', 'first_name', 'last_name')\n    list_filter = ('role', 'is_active', 'is_staff')",
        "detail": "services.user-service.authentication.admin",
        "documentation": {}
    },
    {
        "label": "AuthenticationConfig",
        "kind": 6,
        "importPath": "services.user-service.authentication.apps",
        "description": "services.user-service.authentication.apps",
        "peekOfCode": "class AuthenticationConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'authentication'",
        "detail": "services.user-service.authentication.apps",
        "documentation": {}
    },
    {
        "label": "CustomTokenObtainPairSerializer",
        "kind": 6,
        "importPath": "services.user-service.authentication.jwt_customization",
        "description": "services.user-service.authentication.jwt_customization",
        "peekOfCode": "class CustomTokenObtainPairSerializer(TokenObtainPairSerializer):\n    @classmethod\n    def get_token(cls, user):\n        token = super().get_token(user)\n        # Thêm thông tin người dùng vào token\n        token['email'] = user.email\n        token['first_name'] = user.first_name\n        token['last_name'] = user.last_name\n        token['role'] = user.role\n        return token",
        "detail": "services.user-service.authentication.jwt_customization",
        "documentation": {}
    },
    {
        "label": "CustomTokenObtainPairView",
        "kind": 6,
        "importPath": "services.user-service.authentication.jwt_customization",
        "description": "services.user-service.authentication.jwt_customization",
        "peekOfCode": "class CustomTokenObtainPairView(TokenObtainPairView):\n    serializer_class = CustomTokenObtainPairSerializer",
        "detail": "services.user-service.authentication.jwt_customization",
        "documentation": {}
    },
    {
        "label": "UserRole",
        "kind": 6,
        "importPath": "services.user-service.authentication.models",
        "description": "services.user-service.authentication.models",
        "peekOfCode": "class UserRole(models.TextChoices):\n    PATIENT = 'PATIENT', 'Patient'\n    DOCTOR = 'DOCTOR', 'Doctor'\n    NURSE = 'NURSE', 'Nurse'\n    ADMIN = 'ADMIN', 'Administrator'\n    PHARMACIST = 'PHARMACIST', 'Pharmacist'\n    INSURANCE = 'INSURANCE', 'Insurance Provider'\n    LAB_TECH = 'LAB_TECH', 'Laboratory Technician'\nclass UserManager(BaseUserManager):\n    def create_user(self, email, password=None, **extra_fields):",
        "detail": "services.user-service.authentication.models",
        "documentation": {}
    },
    {
        "label": "UserManager",
        "kind": 6,
        "importPath": "services.user-service.authentication.models",
        "description": "services.user-service.authentication.models",
        "peekOfCode": "class UserManager(BaseUserManager):\n    def create_user(self, email, password=None, **extra_fields):\n        if not email:\n            raise ValueError('The Email field must be set')\n        email = self.normalize_email(email)\n        user = self.model(email=email, **extra_fields)\n        user.set_password(password)\n        user.save(using=self._db)\n        return user\n    def create_superuser(self, email, password=None, **extra_fields):",
        "detail": "services.user-service.authentication.models",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "services.user-service.authentication.models",
        "description": "services.user-service.authentication.models",
        "peekOfCode": "class User(AbstractBaseUser, PermissionsMixin):\n    email = models.EmailField(unique=True)\n    first_name = models.CharField(max_length=30)\n    last_name = models.CharField(max_length=30)\n    role = models.CharField(max_length=20, choices=UserRole.choices, default=UserRole.PATIENT)\n    is_active = models.BooleanField(default=True)\n    is_staff = models.BooleanField(default=False)\n    is_superuser = models.BooleanField(default=False)\n    date_joined = models.DateTimeField(auto_now_add=True)\n    USERNAME_FIELD = 'email'",
        "detail": "services.user-service.authentication.models",
        "documentation": {}
    },
    {
        "label": "UserAuthSerializer",
        "kind": 6,
        "importPath": "services.user-service.authentication.serializers",
        "description": "services.user-service.authentication.serializers",
        "peekOfCode": "class UserAuthSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = User\n        fields = ('id', 'email', 'first_name', 'last_name', 'role', 'date_joined')\n        read_only_fields = ('id', 'date_joined')\nclass UserRegistrationSerializer(serializers.ModelSerializer):\n    password = serializers.CharField(write_only=True, required=True, style={'input_type': 'password'})\n    password_confirm = serializers.CharField(write_only=True, required=True, style={'input_type': 'password'})\n    role = serializers.CharField(default='PATIENT', read_only=True)  # Chỉ cho phép vai trò PATIENT\n    class Meta:",
        "detail": "services.user-service.authentication.serializers",
        "documentation": {}
    },
    {
        "label": "UserRegistrationSerializer",
        "kind": 6,
        "importPath": "services.user-service.authentication.serializers",
        "description": "services.user-service.authentication.serializers",
        "peekOfCode": "class UserRegistrationSerializer(serializers.ModelSerializer):\n    password = serializers.CharField(write_only=True, required=True, style={'input_type': 'password'})\n    password_confirm = serializers.CharField(write_only=True, required=True, style={'input_type': 'password'})\n    role = serializers.CharField(default='PATIENT', read_only=True)  # Chỉ cho phép vai trò PATIENT\n    class Meta:\n        model = User\n        fields = ('email', 'password', 'password_confirm', 'first_name', 'last_name', 'role')\n    def validate(self, attrs):\n        if attrs['password'] != attrs['password_confirm']:\n            raise serializers.ValidationError({\"password\": \"Password fields didn't match.\"})",
        "detail": "services.user-service.authentication.serializers",
        "documentation": {}
    },
    {
        "label": "UserLoginSerializer",
        "kind": 6,
        "importPath": "services.user-service.authentication.serializers",
        "description": "services.user-service.authentication.serializers",
        "peekOfCode": "class UserLoginSerializer(serializers.Serializer):\n    email = serializers.EmailField(required=True)\n    password = serializers.CharField(required=True, write_only=True)\n    def validate(self, attrs):\n        email = attrs.get('email')\n        password = attrs.get('password')\n        if email and password:\n            # Tìm kiếm user trực tiếp bằng email thay vì sử dụng authenticate\n            try:\n                user = User.objects.get(email=email)",
        "detail": "services.user-service.authentication.serializers",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "services.user-service.authentication.urls",
        "description": "services.user-service.authentication.urls",
        "peekOfCode": "router = DefaultRouter()\nrouter.register(r'', AuthViewSet, basename='auth')\nurlpatterns = [\n    path('', include(router.urls)),\n    path('token/refresh/', TokenRefreshView.as_view(), name='token_refresh'),\n]",
        "detail": "services.user-service.authentication.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "services.user-service.authentication.urls",
        "description": "services.user-service.authentication.urls",
        "peekOfCode": "urlpatterns = [\n    path('', include(router.urls)),\n    path('token/refresh/', TokenRefreshView.as_view(), name='token_refresh'),\n]",
        "detail": "services.user-service.authentication.urls",
        "documentation": {}
    },
    {
        "label": "AuthViewSet",
        "kind": 6,
        "importPath": "services.user-service.authentication.views",
        "description": "services.user-service.authentication.views",
        "peekOfCode": "class AuthViewSet(viewsets.GenericViewSet):\n    queryset = User.objects.all()\n    permission_classes = [AllowAny]\n    def get_serializer_class(self):\n        if self.action == 'register':\n            return UserRegistrationSerializer\n        if self.action == 'login' or self.action == 'token':\n            return UserLoginSerializer\n        return UserAuthSerializer\n    @action(detail=False, methods=['post'])",
        "detail": "services.user-service.authentication.views",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "services.user-service.core.asgi",
        "description": "services.user-service.core.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "services.user-service.core.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "services.user-service.core.settings",
        "description": "services.user-service.core.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure-key')\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = os.environ.get('DEBUG', 'False') == 'True'\nALLOWED_HOSTS = ['*']\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',",
        "detail": "services.user-service.core.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "services.user-service.core.settings",
        "description": "services.user-service.core.settings",
        "peekOfCode": "SECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure-key')\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = os.environ.get('DEBUG', 'False') == 'True'\nALLOWED_HOSTS = ['*']\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',",
        "detail": "services.user-service.core.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "services.user-service.core.settings",
        "description": "services.user-service.core.settings",
        "peekOfCode": "DEBUG = os.environ.get('DEBUG', 'False') == 'True'\nALLOWED_HOSTS = ['*']\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',",
        "detail": "services.user-service.core.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "services.user-service.core.settings",
        "description": "services.user-service.core.settings",
        "peekOfCode": "ALLOWED_HOSTS = ['*']\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    # Third-party apps",
        "detail": "services.user-service.core.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "services.user-service.core.settings",
        "description": "services.user-service.core.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    # Third-party apps\n    'rest_framework',\n    'rest_framework_simplejwt',",
        "detail": "services.user-service.core.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "services.user-service.core.settings",
        "description": "services.user-service.core.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'corsheaders.middleware.CorsMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n    # 'common_auth.middleware.SessionMiddleware',",
        "detail": "services.user-service.core.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "services.user-service.core.settings",
        "description": "services.user-service.core.settings",
        "peekOfCode": "ROOT_URLCONF = 'core.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',",
        "detail": "services.user-service.core.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "services.user-service.core.settings",
        "description": "services.user-service.core.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "services.user-service.core.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "services.user-service.core.settings",
        "description": "services.user-service.core.settings",
        "peekOfCode": "WSGI_APPLICATION = 'core.wsgi.application'\n# Database\n# https://docs.djangoproject.com/en/4.2/ref/settings/#databases\nDATABASES = {\n    'default': dj_database_url.config(\n        default=os.environ.get('DATABASE_URL', 'postgres://postgres:postgres@postgres:5432/healthcare_user'),\n        conn_max_age=600,\n    )\n}\n# Custom user model",
        "detail": "services.user-service.core.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "services.user-service.core.settings",
        "description": "services.user-service.core.settings",
        "peekOfCode": "DATABASES = {\n    'default': dj_database_url.config(\n        default=os.environ.get('DATABASE_URL', 'postgres://postgres:postgres@postgres:5432/healthcare_user'),\n        conn_max_age=600,\n    )\n}\n# Custom user model\nAUTH_USER_MODEL = 'authentication.User'\n# Password validation\n# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators",
        "detail": "services.user-service.core.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_USER_MODEL",
        "kind": 5,
        "importPath": "services.user-service.core.settings",
        "description": "services.user-service.core.settings",
        "peekOfCode": "AUTH_USER_MODEL = 'authentication.User'\n# Password validation\n# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },",
        "detail": "services.user-service.core.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "services.user-service.core.settings",
        "description": "services.user-service.core.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "services.user-service.core.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "services.user-service.core.settings",
        "description": "services.user-service.core.settings",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = 'static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field",
        "detail": "services.user-service.core.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "services.user-service.core.settings",
        "description": "services.user-service.core.settings",
        "peekOfCode": "TIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = 'static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "services.user-service.core.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "services.user-service.core.settings",
        "description": "services.user-service.core.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = 'static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# REST Framework settings",
        "detail": "services.user-service.core.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "services.user-service.core.settings",
        "description": "services.user-service.core.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = 'static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# REST Framework settings\nREST_FRAMEWORK = {",
        "detail": "services.user-service.core.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "services.user-service.core.settings",
        "description": "services.user-service.core.settings",
        "peekOfCode": "STATIC_URL = 'static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# REST Framework settings\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'common_auth.authentication.ServiceAuthentication',\n        'rest_framework_simplejwt.authentication.JWTAuthentication',",
        "detail": "services.user-service.core.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_ROOT",
        "kind": 5,
        "importPath": "services.user-service.core.settings",
        "description": "services.user-service.core.settings",
        "peekOfCode": "STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# REST Framework settings\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'common_auth.authentication.ServiceAuthentication',\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n    ),",
        "detail": "services.user-service.core.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "services.user-service.core.settings",
        "description": "services.user-service.core.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# REST Framework settings\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'common_auth.authentication.ServiceAuthentication',\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n    ),\n    'DEFAULT_PERMISSION_CLASSES': [\n        'common_auth.permissions.IsAuthenticated',\n        'rest_framework.permissions.IsAuthenticated',",
        "detail": "services.user-service.core.settings",
        "documentation": {}
    },
    {
        "label": "REST_FRAMEWORK",
        "kind": 5,
        "importPath": "services.user-service.core.settings",
        "description": "services.user-service.core.settings",
        "peekOfCode": "REST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'common_auth.authentication.ServiceAuthentication',\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n    ),\n    'DEFAULT_PERMISSION_CLASSES': [\n        'common_auth.permissions.IsAuthenticated',\n        'rest_framework.permissions.IsAuthenticated',\n    ],\n}",
        "detail": "services.user-service.core.settings",
        "documentation": {}
    },
    {
        "label": "CORS_ALLOW_ALL_ORIGINS",
        "kind": 5,
        "importPath": "services.user-service.core.settings",
        "description": "services.user-service.core.settings",
        "peekOfCode": "CORS_ALLOW_ALL_ORIGINS = True\n# JWT settings\nSIMPLE_JWT = {\n    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),\n    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),\n    'ROTATE_REFRESH_TOKENS': False,\n    'BLACKLIST_AFTER_ROTATION': True,\n    'UPDATE_LAST_LOGIN': False,\n    'ALGORITHM': 'HS256',\n    'SIGNING_KEY': os.environ.get('JWT_SECRET', SECRET_KEY),",
        "detail": "services.user-service.core.settings",
        "documentation": {}
    },
    {
        "label": "SIMPLE_JWT",
        "kind": 5,
        "importPath": "services.user-service.core.settings",
        "description": "services.user-service.core.settings",
        "peekOfCode": "SIMPLE_JWT = {\n    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),\n    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),\n    'ROTATE_REFRESH_TOKENS': False,\n    'BLACKLIST_AFTER_ROTATION': True,\n    'UPDATE_LAST_LOGIN': False,\n    'ALGORITHM': 'HS256',\n    'SIGNING_KEY': os.environ.get('JWT_SECRET', SECRET_KEY),\n    'VERIFYING_KEY': None,\n    'AUDIENCE': None,",
        "detail": "services.user-service.core.settings",
        "documentation": {}
    },
    {
        "label": "SWAGGER_SETTINGS",
        "kind": 5,
        "importPath": "services.user-service.core.settings",
        "description": "services.user-service.core.settings",
        "peekOfCode": "SWAGGER_SETTINGS = {\n    'SECURITY_DEFINITIONS': {\n        'Bearer': {\n            'type': 'apiKey',\n            'in': 'header',\n            'name': 'Authorization',\n            'description': 'JWT Authorization header using the Bearer scheme. Example: \"Bearer {token}\"',\n        },\n    },\n    'USE_SESSION_AUTH': False,",
        "detail": "services.user-service.core.settings",
        "documentation": {}
    },
    {
        "label": "REDIS_URL",
        "kind": 5,
        "importPath": "services.user-service.core.settings",
        "description": "services.user-service.core.settings",
        "peekOfCode": "REDIS_URL = os.environ.get('REDIS_URL', 'redis://redis:6379/0')\nJWT_SECRET = os.environ.get('JWT_SECRET', SECRET_KEY)\nACCESS_TOKEN_LIFETIME = timedelta(minutes=60)\nREFRESH_TOKEN_LIFETIME = timedelta(days=7)\nROTATE_REFRESH_TOKENS = False\nSESSION_TTL = 86400  # 1 day in seconds\nMAX_SESSIONS_PER_USER = 5\nVERIFY_JWT_SIGNATURE = True\n# Celery settings\nCELERY_BROKER_URL = REDIS_URL",
        "detail": "services.user-service.core.settings",
        "documentation": {}
    },
    {
        "label": "JWT_SECRET",
        "kind": 5,
        "importPath": "services.user-service.core.settings",
        "description": "services.user-service.core.settings",
        "peekOfCode": "JWT_SECRET = os.environ.get('JWT_SECRET', SECRET_KEY)\nACCESS_TOKEN_LIFETIME = timedelta(minutes=60)\nREFRESH_TOKEN_LIFETIME = timedelta(days=7)\nROTATE_REFRESH_TOKENS = False\nSESSION_TTL = 86400  # 1 day in seconds\nMAX_SESSIONS_PER_USER = 5\nVERIFY_JWT_SIGNATURE = True\n# Celery settings\nCELERY_BROKER_URL = REDIS_URL\nCELERY_RESULT_BACKEND = REDIS_URL",
        "detail": "services.user-service.core.settings",
        "documentation": {}
    },
    {
        "label": "ACCESS_TOKEN_LIFETIME",
        "kind": 5,
        "importPath": "services.user-service.core.settings",
        "description": "services.user-service.core.settings",
        "peekOfCode": "ACCESS_TOKEN_LIFETIME = timedelta(minutes=60)\nREFRESH_TOKEN_LIFETIME = timedelta(days=7)\nROTATE_REFRESH_TOKENS = False\nSESSION_TTL = 86400  # 1 day in seconds\nMAX_SESSIONS_PER_USER = 5\nVERIFY_JWT_SIGNATURE = True\n# Celery settings\nCELERY_BROKER_URL = REDIS_URL\nCELERY_RESULT_BACKEND = REDIS_URL\nCELERY_ACCEPT_CONTENT = ['json']",
        "detail": "services.user-service.core.settings",
        "documentation": {}
    },
    {
        "label": "REFRESH_TOKEN_LIFETIME",
        "kind": 5,
        "importPath": "services.user-service.core.settings",
        "description": "services.user-service.core.settings",
        "peekOfCode": "REFRESH_TOKEN_LIFETIME = timedelta(days=7)\nROTATE_REFRESH_TOKENS = False\nSESSION_TTL = 86400  # 1 day in seconds\nMAX_SESSIONS_PER_USER = 5\nVERIFY_JWT_SIGNATURE = True\n# Celery settings\nCELERY_BROKER_URL = REDIS_URL\nCELERY_RESULT_BACKEND = REDIS_URL\nCELERY_ACCEPT_CONTENT = ['json']\nCELERY_TASK_SERIALIZER = 'json'",
        "detail": "services.user-service.core.settings",
        "documentation": {}
    },
    {
        "label": "ROTATE_REFRESH_TOKENS",
        "kind": 5,
        "importPath": "services.user-service.core.settings",
        "description": "services.user-service.core.settings",
        "peekOfCode": "ROTATE_REFRESH_TOKENS = False\nSESSION_TTL = 86400  # 1 day in seconds\nMAX_SESSIONS_PER_USER = 5\nVERIFY_JWT_SIGNATURE = True\n# Celery settings\nCELERY_BROKER_URL = REDIS_URL\nCELERY_RESULT_BACKEND = REDIS_URL\nCELERY_ACCEPT_CONTENT = ['json']\nCELERY_TASK_SERIALIZER = 'json'\nCELERY_RESULT_SERIALIZER = 'json'",
        "detail": "services.user-service.core.settings",
        "documentation": {}
    },
    {
        "label": "SESSION_TTL",
        "kind": 5,
        "importPath": "services.user-service.core.settings",
        "description": "services.user-service.core.settings",
        "peekOfCode": "SESSION_TTL = 86400  # 1 day in seconds\nMAX_SESSIONS_PER_USER = 5\nVERIFY_JWT_SIGNATURE = True\n# Celery settings\nCELERY_BROKER_URL = REDIS_URL\nCELERY_RESULT_BACKEND = REDIS_URL\nCELERY_ACCEPT_CONTENT = ['json']\nCELERY_TASK_SERIALIZER = 'json'\nCELERY_RESULT_SERIALIZER = 'json'\nCELERY_TIMEZONE = TIME_ZONE",
        "detail": "services.user-service.core.settings",
        "documentation": {}
    },
    {
        "label": "MAX_SESSIONS_PER_USER",
        "kind": 5,
        "importPath": "services.user-service.core.settings",
        "description": "services.user-service.core.settings",
        "peekOfCode": "MAX_SESSIONS_PER_USER = 5\nVERIFY_JWT_SIGNATURE = True\n# Celery settings\nCELERY_BROKER_URL = REDIS_URL\nCELERY_RESULT_BACKEND = REDIS_URL\nCELERY_ACCEPT_CONTENT = ['json']\nCELERY_TASK_SERIALIZER = 'json'\nCELERY_RESULT_SERIALIZER = 'json'\nCELERY_TIMEZONE = TIME_ZONE",
        "detail": "services.user-service.core.settings",
        "documentation": {}
    },
    {
        "label": "VERIFY_JWT_SIGNATURE",
        "kind": 5,
        "importPath": "services.user-service.core.settings",
        "description": "services.user-service.core.settings",
        "peekOfCode": "VERIFY_JWT_SIGNATURE = True\n# Celery settings\nCELERY_BROKER_URL = REDIS_URL\nCELERY_RESULT_BACKEND = REDIS_URL\nCELERY_ACCEPT_CONTENT = ['json']\nCELERY_TASK_SERIALIZER = 'json'\nCELERY_RESULT_SERIALIZER = 'json'\nCELERY_TIMEZONE = TIME_ZONE",
        "detail": "services.user-service.core.settings",
        "documentation": {}
    },
    {
        "label": "CELERY_BROKER_URL",
        "kind": 5,
        "importPath": "services.user-service.core.settings",
        "description": "services.user-service.core.settings",
        "peekOfCode": "CELERY_BROKER_URL = REDIS_URL\nCELERY_RESULT_BACKEND = REDIS_URL\nCELERY_ACCEPT_CONTENT = ['json']\nCELERY_TASK_SERIALIZER = 'json'\nCELERY_RESULT_SERIALIZER = 'json'\nCELERY_TIMEZONE = TIME_ZONE",
        "detail": "services.user-service.core.settings",
        "documentation": {}
    },
    {
        "label": "CELERY_RESULT_BACKEND",
        "kind": 5,
        "importPath": "services.user-service.core.settings",
        "description": "services.user-service.core.settings",
        "peekOfCode": "CELERY_RESULT_BACKEND = REDIS_URL\nCELERY_ACCEPT_CONTENT = ['json']\nCELERY_TASK_SERIALIZER = 'json'\nCELERY_RESULT_SERIALIZER = 'json'\nCELERY_TIMEZONE = TIME_ZONE",
        "detail": "services.user-service.core.settings",
        "documentation": {}
    },
    {
        "label": "CELERY_ACCEPT_CONTENT",
        "kind": 5,
        "importPath": "services.user-service.core.settings",
        "description": "services.user-service.core.settings",
        "peekOfCode": "CELERY_ACCEPT_CONTENT = ['json']\nCELERY_TASK_SERIALIZER = 'json'\nCELERY_RESULT_SERIALIZER = 'json'\nCELERY_TIMEZONE = TIME_ZONE",
        "detail": "services.user-service.core.settings",
        "documentation": {}
    },
    {
        "label": "CELERY_TASK_SERIALIZER",
        "kind": 5,
        "importPath": "services.user-service.core.settings",
        "description": "services.user-service.core.settings",
        "peekOfCode": "CELERY_TASK_SERIALIZER = 'json'\nCELERY_RESULT_SERIALIZER = 'json'\nCELERY_TIMEZONE = TIME_ZONE",
        "detail": "services.user-service.core.settings",
        "documentation": {}
    },
    {
        "label": "CELERY_RESULT_SERIALIZER",
        "kind": 5,
        "importPath": "services.user-service.core.settings",
        "description": "services.user-service.core.settings",
        "peekOfCode": "CELERY_RESULT_SERIALIZER = 'json'\nCELERY_TIMEZONE = TIME_ZONE",
        "detail": "services.user-service.core.settings",
        "documentation": {}
    },
    {
        "label": "CELERY_TIMEZONE",
        "kind": 5,
        "importPath": "services.user-service.core.settings",
        "description": "services.user-service.core.settings",
        "peekOfCode": "CELERY_TIMEZONE = TIME_ZONE",
        "detail": "services.user-service.core.settings",
        "documentation": {}
    },
    {
        "label": "schema_view",
        "kind": 5,
        "importPath": "services.user-service.core.urls",
        "description": "services.user-service.core.urls",
        "peekOfCode": "schema_view = get_schema_view(\n    openapi.Info(\n        title=\"User Service API\",\n        default_version='v1',\n        description=\"API documentation for User Service (Authentication, Authorization & User Management)\",\n        terms_of_service=\"https://www.example.com/terms/\",\n        contact=openapi.Contact(email=\"contact@example.com\"),\n        license=openapi.License(name=\"BSD License\"),\n    ),\n    public=True,",
        "detail": "services.user-service.core.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "services.user-service.core.urls",
        "description": "services.user-service.core.urls",
        "peekOfCode": "urlpatterns = [\n    path('admin/', admin.site.urls),\n    path('api/auth/', include('authentication.urls')),\n    path('api/', include('users.urls')),\n    path('', schema_view.with_ui('swagger', cache_timeout=0), name='schema-swagger-ui'),\n    re_path(r'^user-service(?P<format>\\.json|\\.yaml)$', schema_view.without_ui(cache_timeout=0), name='schema-json'),\n    path('redoc/', schema_view.with_ui('redoc', cache_timeout=0), name='schema-redoc'),\n]",
        "detail": "services.user-service.core.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "services.user-service.core.wsgi",
        "description": "services.user-service.core.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "services.user-service.core.wsgi",
        "documentation": {}
    },
    {
        "label": "create_admin_user",
        "kind": 2,
        "importPath": "services.user-service.scripts.create_admin_user",
        "description": "services.user-service.scripts.create_admin_user",
        "peekOfCode": "def create_admin_user(email, password, first_name, last_name, admin_type='SYSTEM', \n                     position='System Administrator', employee_id='ADMIN001', \n                     access_level=5, department='IT'):\n    \"\"\"\n    Tạo tài khoản admin và profile tương ứng.\n    Args:\n        email (str): Email của admin\n        password (str): Mật khẩu của admin\n        first_name (str): Tên của admin\n        last_name (str): Họ của admin",
        "detail": "services.user-service.scripts.create_admin_user",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "services.user-service.scripts.create_admin_user",
        "description": "services.user-service.scripts.create_admin_user",
        "peekOfCode": "def main():\n    parser = argparse.ArgumentParser(description='Tạo tài khoản admin cho hệ thống Healthcare')\n    parser.add_argument('--email', default='admin@gmail.com', help='Email của admin')\n    parser.add_argument('--password', default='123456', help='Mật khẩu của admin')\n    parser.add_argument('--first_name', default='Admin', help='Tên của admin')\n    parser.add_argument('--last_name', default='User', help='Họ của admin')\n    parser.add_argument('--admin_type', default='SYSTEM', help='Loại admin (SYSTEM, CLINIC, BILLING)')\n    parser.add_argument('--position', default='System Administrator', help='Vị trí công việc')\n    parser.add_argument('--employee_id', default='ADMIN001', help='Mã nhân viên')\n    parser.add_argument('--access_level', type=int, default=5, help='Cấp độ truy cập (1-5)')",
        "detail": "services.user-service.scripts.create_admin_user",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "services.user-service.users.migrations.0001_initial",
        "description": "services.user-service.users.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Address',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "services.user-service.users.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "services.user-service.users.migrations.0002_alter_patientprofile_date_of_birth_and_more",
        "description": "services.user-service.users.migrations.0002_alter_patientprofile_date_of_birth_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('users', '0001_initial'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='patientprofile',\n            name='date_of_birth',\n            field=models.DateField(blank=True, null=True),\n        ),",
        "detail": "services.user-service.users.migrations.0002_alter_patientprofile_date_of_birth_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "services.user-service.users.migrations.0002_alter_patientprofile_fields",
        "description": "services.user-service.users.migrations.0002_alter_patientprofile_fields",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('users', '0001_initial'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='patientprofile',\n            name='date_of_birth',\n            field=models.DateField(blank=True, null=True),\n        ),",
        "detail": "services.user-service.users.migrations.0002_alter_patientprofile_fields",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "services.user-service.users.migrations.0003_merge_20250418_0035",
        "description": "services.user-service.users.migrations.0003_merge_20250418_0035",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('users', '0002_alter_patientprofile_date_of_birth_and_more'),\n        ('users', '0002_alter_patientprofile_fields'),\n    ]\n    operations = [\n    ]",
        "detail": "services.user-service.users.migrations.0003_merge_20250418_0035",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "services.user-service.users.migrations.0004_remove_doctorprofile_accepts_new_patients_and_more",
        "description": "services.user-service.users.migrations.0004_remove_doctorprofile_accepts_new_patients_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('users', '0003_merge_20250418_0035'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='doctorprofile',\n            name='accepts_new_patients',\n        ),\n        migrations.RemoveField(",
        "detail": "services.user-service.users.migrations.0004_remove_doctorprofile_accepts_new_patients_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "services.user-service.users.migrations.0005_alter_doctorprofile_secondary_specialization_and_more",
        "description": "services.user-service.users.migrations.0005_alter_doctorprofile_secondary_specialization_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('users', '0004_remove_doctorprofile_accepts_new_patients_and_more'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='doctorprofile',\n            name='secondary_specialization',\n            field=models.CharField(blank=True, choices=[('NOI_TIM_MACH', 'Chuyên khoa Tim mạch'), ('NOI_TIEU_HOA', 'Chuyên khoa Tiêu hóa'), ('NOI_HO_HAP', 'Chuyên khoa Hô hấp'), ('NOI_THAN', 'Chuyên khoa Thận - Tiết niệu'), ('NOI_TIET', 'Chuyên khoa Nội tiết'), ('NOI_THAN_KINH', 'Chuyên khoa Thần kinh'), ('NOI_DA_LIEU', 'Chuyên khoa Da liễu'), ('NOI_TONG_QUAT', 'Chuyên khoa Nội tổng quát'), ('NGOAI_CHINH_HINH', 'Chuyên khoa Chấn thương chỉnh hình'), ('NGOAI_TIET_NIEU', 'Chuyên khoa Tiết niệu'), ('NGOAI_THAN_KINH', 'Chuyên khoa Thần kinh'), ('NGOAI_LONG_NGUC', 'Chuyên khoa Lồng ngực - Mạch máu'), ('NGOAI_TIEU_HOA', 'Chuyên khoa Tiêu hóa'), ('NGOAI_TONG_QUAT', 'Chuyên khoa Ngoại tổng quát'), ('SAN_KHOA', 'Chuyên khoa Sản'), ('PHU_KHOA', 'Chuyên khoa Phụ khoa'), ('VO_SINH', 'Chuyên khoa Vô sinh - Hiếm muộn'), ('NHI_TONG_QUAT', 'Chuyên khoa Nhi Tổng quát'), ('NHI_TIM_MACH', 'Chuyên khoa Nhi Tim mạch'), ('NHI_THAN_KINH', 'Chuyên khoa Nhi Thần kinh'), ('NHI_SO_SINH', 'Chuyên khoa Sơ sinh'), ('MAT', 'Chuyên khoa Mắt'), ('TAI_MUI_HONG', 'Chuyên khoa Tai Mũi Họng'), ('RANG_HAM_MAT', 'Chuyên khoa Răng Hàm Mặt'), ('TAM_THAN', 'Chuyên khoa Tâm thần'), ('UNG_BUOU', 'Chuyên khoa Ung bướu'), ('DA_KHOA', 'Đa khoa'), ('KHAC', 'Chuyên khoa khác')], max_length=100, null=True),\n        ),",
        "detail": "services.user-service.users.migrations.0005_alter_doctorprofile_secondary_specialization_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "services.user-service.users.migrations.0006_insuranceinformation_member_id",
        "description": "services.user-service.users.migrations.0006_insuranceinformation_member_id",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('users', '0005_alter_doctorprofile_secondary_specialization_and_more'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='insuranceinformation',\n            name='member_id',\n            field=models.CharField(blank=True, max_length=100, null=True),\n        ),",
        "detail": "services.user-service.users.migrations.0006_insuranceinformation_member_id",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "services.user-service.users.migrations.0007_remove_userpreference_user_remove_usersession_user_and_more",
        "description": "services.user-service.users.migrations.0007_remove_userpreference_user_remove_usersession_user_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('users', '0006_insuranceinformation_member_id'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='userpreference',\n            name='user',\n        ),\n        migrations.RemoveField(",
        "detail": "services.user-service.users.migrations.0007_remove_userpreference_user_remove_usersession_user_and_more",
        "documentation": {}
    },
    {
        "label": "AddressAdmin",
        "kind": 6,
        "importPath": "services.user-service.users.admin",
        "description": "services.user-service.users.admin",
        "peekOfCode": "class AddressAdmin(admin.ModelAdmin):\n    list_display = ('user', 'street', 'city', 'state', 'postal_code', 'country', 'is_primary')\n    search_fields = ('user__email', 'street', 'city', 'state', 'postal_code', 'country')\n    list_filter = ('is_primary', 'country', 'state', 'city')\n@admin.register(ContactInfo)\nclass ContactInfoAdmin(admin.ModelAdmin):\n    list_display = ('user', 'phone_number', 'emergency_contact_name', 'emergency_contact_phone')\n    search_fields = ('user__email', 'phone_number', 'emergency_contact_name', 'emergency_contact_phone')\n@admin.register(PatientProfile)\nclass PatientProfileAdmin(admin.ModelAdmin):",
        "detail": "services.user-service.users.admin",
        "documentation": {}
    },
    {
        "label": "ContactInfoAdmin",
        "kind": 6,
        "importPath": "services.user-service.users.admin",
        "description": "services.user-service.users.admin",
        "peekOfCode": "class ContactInfoAdmin(admin.ModelAdmin):\n    list_display = ('user', 'phone_number', 'emergency_contact_name', 'emergency_contact_phone')\n    search_fields = ('user__email', 'phone_number', 'emergency_contact_name', 'emergency_contact_phone')\n@admin.register(PatientProfile)\nclass PatientProfileAdmin(admin.ModelAdmin):\n    list_display = ('user', 'date_of_birth', 'gender', 'blood_type')\n    search_fields = ('user__email', 'blood_type', 'allergies', 'medical_conditions')\n    list_filter = ('gender', 'blood_type')\n@admin.register(DoctorProfile)\nclass DoctorProfileAdmin(admin.ModelAdmin):",
        "detail": "services.user-service.users.admin",
        "documentation": {}
    },
    {
        "label": "PatientProfileAdmin",
        "kind": 6,
        "importPath": "services.user-service.users.admin",
        "description": "services.user-service.users.admin",
        "peekOfCode": "class PatientProfileAdmin(admin.ModelAdmin):\n    list_display = ('user', 'date_of_birth', 'gender', 'blood_type')\n    search_fields = ('user__email', 'blood_type', 'allergies', 'medical_conditions')\n    list_filter = ('gender', 'blood_type')\n@admin.register(DoctorProfile)\nclass DoctorProfileAdmin(admin.ModelAdmin):\n    list_display = ('user', 'specialization', 'license_number', 'years_of_experience')\n    search_fields = ('user__email', 'specialization', 'license_number', 'education')\n    list_filter = ('specialization', 'years_of_experience')\n@admin.register(NurseProfile)",
        "detail": "services.user-service.users.admin",
        "documentation": {}
    },
    {
        "label": "DoctorProfileAdmin",
        "kind": 6,
        "importPath": "services.user-service.users.admin",
        "description": "services.user-service.users.admin",
        "peekOfCode": "class DoctorProfileAdmin(admin.ModelAdmin):\n    list_display = ('user', 'specialization', 'license_number', 'years_of_experience')\n    search_fields = ('user__email', 'specialization', 'license_number', 'education')\n    list_filter = ('specialization', 'years_of_experience')\n@admin.register(NurseProfile)\nclass NurseProfileAdmin(admin.ModelAdmin):\n    list_display = ('user', 'license_number', 'department')\n    search_fields = ('user__email', 'license_number', 'department')\n    list_filter = ('department',)\n@admin.register(UserDocument)",
        "detail": "services.user-service.users.admin",
        "documentation": {}
    },
    {
        "label": "NurseProfileAdmin",
        "kind": 6,
        "importPath": "services.user-service.users.admin",
        "description": "services.user-service.users.admin",
        "peekOfCode": "class NurseProfileAdmin(admin.ModelAdmin):\n    list_display = ('user', 'license_number', 'department')\n    search_fields = ('user__email', 'license_number', 'department')\n    list_filter = ('department',)\n@admin.register(UserDocument)\nclass UserDocumentAdmin(admin.ModelAdmin):\n    list_display = ('user', 'document_type', 'document_number', 'is_verified')\n    search_fields = ('user__email', 'document_type', 'document_number')\n    list_filter = ('document_type', 'is_verified')\n@admin.register(PharmacistProfile)",
        "detail": "services.user-service.users.admin",
        "documentation": {}
    },
    {
        "label": "UserDocumentAdmin",
        "kind": 6,
        "importPath": "services.user-service.users.admin",
        "description": "services.user-service.users.admin",
        "peekOfCode": "class UserDocumentAdmin(admin.ModelAdmin):\n    list_display = ('user', 'document_type', 'document_number', 'is_verified')\n    search_fields = ('user__email', 'document_type', 'document_number')\n    list_filter = ('document_type', 'is_verified')\n@admin.register(PharmacistProfile)\nclass PharmacistProfileAdmin(admin.ModelAdmin):\n    list_display = ('user', 'license_number', 'specialization', 'pharmacy_name')\n    search_fields = ('user__email', 'license_number', 'pharmacy_name')\n    list_filter = ('specialization',)\n@admin.register(InsuranceInformation)",
        "detail": "services.user-service.users.admin",
        "documentation": {}
    },
    {
        "label": "PharmacistProfileAdmin",
        "kind": 6,
        "importPath": "services.user-service.users.admin",
        "description": "services.user-service.users.admin",
        "peekOfCode": "class PharmacistProfileAdmin(admin.ModelAdmin):\n    list_display = ('user', 'license_number', 'specialization', 'pharmacy_name')\n    search_fields = ('user__email', 'license_number', 'pharmacy_name')\n    list_filter = ('specialization',)\n@admin.register(InsuranceInformation)\nclass InsuranceInformationAdmin(admin.ModelAdmin):\n    list_display = ('provider', 'policy_number', 'subscriber_name', 'is_active')\n    search_fields = ('policy_number', 'subscriber_name')\n    list_filter = ('insurance_type', 'is_active')\n@admin.register(InsuranceProviderProfile)",
        "detail": "services.user-service.users.admin",
        "documentation": {}
    },
    {
        "label": "InsuranceInformationAdmin",
        "kind": 6,
        "importPath": "services.user-service.users.admin",
        "description": "services.user-service.users.admin",
        "peekOfCode": "class InsuranceInformationAdmin(admin.ModelAdmin):\n    list_display = ('provider', 'policy_number', 'subscriber_name', 'is_active')\n    search_fields = ('policy_number', 'subscriber_name')\n    list_filter = ('insurance_type', 'is_active')\n@admin.register(InsuranceProviderProfile)\nclass InsuranceProviderProfileAdmin(admin.ModelAdmin):\n    list_display = ('user', 'company_name', 'provider_id', 'contact_person')\n    search_fields = ('user__email', 'company_name', 'provider_id', 'contact_person')\n@admin.register(LabTechnicianProfile)\nclass LabTechnicianProfileAdmin(admin.ModelAdmin):",
        "detail": "services.user-service.users.admin",
        "documentation": {}
    },
    {
        "label": "InsuranceProviderProfileAdmin",
        "kind": 6,
        "importPath": "services.user-service.users.admin",
        "description": "services.user-service.users.admin",
        "peekOfCode": "class InsuranceProviderProfileAdmin(admin.ModelAdmin):\n    list_display = ('user', 'company_name', 'provider_id', 'contact_person')\n    search_fields = ('user__email', 'company_name', 'provider_id', 'contact_person')\n@admin.register(LabTechnicianProfile)\nclass LabTechnicianProfileAdmin(admin.ModelAdmin):\n    list_display = ('user', 'license_number', 'specialization', 'laboratory_name')\n    search_fields = ('user__email', 'license_number', 'laboratory_name')\n    list_filter = ('specialization',)\n@admin.register(AdminProfile)\nclass AdminProfileAdmin(admin.ModelAdmin):",
        "detail": "services.user-service.users.admin",
        "documentation": {}
    },
    {
        "label": "LabTechnicianProfileAdmin",
        "kind": 6,
        "importPath": "services.user-service.users.admin",
        "description": "services.user-service.users.admin",
        "peekOfCode": "class LabTechnicianProfileAdmin(admin.ModelAdmin):\n    list_display = ('user', 'license_number', 'specialization', 'laboratory_name')\n    search_fields = ('user__email', 'license_number', 'laboratory_name')\n    list_filter = ('specialization',)\n@admin.register(AdminProfile)\nclass AdminProfileAdmin(admin.ModelAdmin):\n    list_display = ('user', 'admin_type', 'employee_id', 'position', 'access_level')\n    search_fields = ('user__email', 'employee_id', 'position')\n    list_filter = ('admin_type', 'access_level')",
        "detail": "services.user-service.users.admin",
        "documentation": {}
    },
    {
        "label": "AdminProfileAdmin",
        "kind": 6,
        "importPath": "services.user-service.users.admin",
        "description": "services.user-service.users.admin",
        "peekOfCode": "class AdminProfileAdmin(admin.ModelAdmin):\n    list_display = ('user', 'admin_type', 'employee_id', 'position', 'access_level')\n    search_fields = ('user__email', 'employee_id', 'position')\n    list_filter = ('admin_type', 'access_level')",
        "detail": "services.user-service.users.admin",
        "documentation": {}
    },
    {
        "label": "UsersConfig",
        "kind": 6,
        "importPath": "services.user-service.users.apps",
        "description": "services.user-service.users.apps",
        "peekOfCode": "class UsersConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'users'",
        "detail": "services.user-service.users.apps",
        "documentation": {}
    },
    {
        "label": "Address",
        "kind": 6,
        "importPath": "services.user-service.users.models",
        "description": "services.user-service.users.models",
        "peekOfCode": "class Address(models.Model):\n    \"\"\"Địa chỉ của người dùng\"\"\"\n    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='addresses')\n    street = models.CharField(max_length=255)\n    city = models.CharField(max_length=100)\n    state = models.CharField(max_length=100)\n    postal_code = models.CharField(max_length=20)\n    country = models.CharField(max_length=100)\n    is_primary = models.BooleanField(default=False)\n    address_type = models.CharField(max_length=20, choices=[",
        "detail": "services.user-service.users.models",
        "documentation": {}
    },
    {
        "label": "ContactInfo",
        "kind": 6,
        "importPath": "services.user-service.users.models",
        "description": "services.user-service.users.models",
        "peekOfCode": "class ContactInfo(models.Model):\n    \"\"\"Thông tin liên hệ của người dùng\"\"\"\n    user = models.OneToOneField(User, on_delete=models.CASCADE, related_name='contact_info')\n    phone_number = models.CharField(max_length=20)\n    secondary_phone = models.CharField(max_length=20, blank=True, null=True)\n    work_phone = models.CharField(max_length=20, blank=True, null=True)\n    emergency_contact_name = models.CharField(max_length=100, blank=True, null=True)\n    emergency_contact_relationship = models.CharField(max_length=50, blank=True, null=True)\n    emergency_contact_phone = models.CharField(max_length=20, blank=True, null=True)\n    preferred_contact_method = models.CharField(max_length=20, choices=[",
        "detail": "services.user-service.users.models",
        "documentation": {}
    },
    {
        "label": "UserDocument",
        "kind": 6,
        "importPath": "services.user-service.users.models",
        "description": "services.user-service.users.models",
        "peekOfCode": "class UserDocument(models.Model):\n    \"\"\"Tài liệu của người dùng (ID, giấy phép, chứng chỉ, v.v.)\"\"\"\n    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='documents')\n    document_type = models.CharField(max_length=50, choices=[\n        ('ID_CARD', 'ID Card'),\n        ('PASSPORT', 'Passport'),\n        ('DRIVER_LICENSE', 'Driver License'),\n        ('MEDICAL_LICENSE', 'Medical License'),\n        ('INSURANCE_CARD', 'Insurance Card'),\n        ('CERTIFICATION', 'Certification'),",
        "detail": "services.user-service.users.models",
        "documentation": {}
    },
    {
        "label": "PatientProfile",
        "kind": 6,
        "importPath": "services.user-service.users.models",
        "description": "services.user-service.users.models",
        "peekOfCode": "class PatientProfile(models.Model):\n    \"\"\"Hồ sơ bệnh nhân\"\"\"\n    GENDER_CHOICES = [\n        ('M', 'Male'),\n        ('F', 'Female'),\n        ('O', 'Other'),\n    ]\n    BLOOD_TYPE_CHOICES = [\n        ('A+', 'A+'),\n        ('A-', 'A-'),",
        "detail": "services.user-service.users.models",
        "documentation": {}
    },
    {
        "label": "DoctorProfile",
        "kind": 6,
        "importPath": "services.user-service.users.models",
        "description": "services.user-service.users.models",
        "peekOfCode": "class DoctorProfile(models.Model):\n    \"\"\"Hồ sơ bác sĩ\"\"\"\n    SPECIALIZATION_CHOICES = [\n        # Chuyên khoa thuộc Khoa Nội\n        ('NOI_TIM_MACH', 'Chuyên khoa Tim mạch'),\n        ('NOI_TIEU_HOA', 'Chuyên khoa Tiêu hóa'),\n        ('NOI_HO_HAP', 'Chuyên khoa Hô hấp'),\n        ('NOI_THAN', 'Chuyên khoa Thận - Tiết niệu'),\n        ('NOI_TIET', 'Chuyên khoa Nội tiết'),\n        ('NOI_THAN_KINH', 'Chuyên khoa Thần kinh'),",
        "detail": "services.user-service.users.models",
        "documentation": {}
    },
    {
        "label": "NurseProfile",
        "kind": 6,
        "importPath": "services.user-service.users.models",
        "description": "services.user-service.users.models",
        "peekOfCode": "class NurseProfile(models.Model):\n    \"\"\"Hồ sơ y tá\"\"\"\n    DEPARTMENT_CHOICES = [\n        ('KHOA_NOI', 'Khoa Nội'),\n        ('KHOA_NGOAI', 'Khoa Ngoại'),\n        ('KHOA_SAN', 'Khoa Sản - Phụ khoa'),\n        ('KHOA_NHI', 'Khoa Nhi'),\n        ('KHOA_CAP_CUU', 'Khoa Cấp cứu'),\n        ('KHOA_XET_NGHIEM', 'Khoa Xét nghiệm'),\n        ('KHOA_CHAN_DOAN_HINH_ANH', 'Khoa Chẩn đoán hình ảnh'),",
        "detail": "services.user-service.users.models",
        "documentation": {}
    },
    {
        "label": "PharmacistProfile",
        "kind": 6,
        "importPath": "services.user-service.users.models",
        "description": "services.user-service.users.models",
        "peekOfCode": "class PharmacistProfile(models.Model):\n    \"\"\"Hồ sơ dược sĩ\"\"\"\n    SPECIALIZATION_CHOICES = [\n        ('CLINICAL', 'Clinical Pharmacist'),\n        ('RETAIL', 'Retail Pharmacist'),\n        ('HOSPITAL', 'Hospital Pharmacist'),\n        ('RESEARCH', 'Research Pharmacist'),\n        ('INDUSTRIAL', 'Industrial Pharmacist'),\n        ('CONSULTANT', 'Consultant Pharmacist'),\n        ('ONCOLOGY', 'Oncology Pharmacist'),",
        "detail": "services.user-service.users.models",
        "documentation": {}
    },
    {
        "label": "InsuranceInformation",
        "kind": 6,
        "importPath": "services.user-service.users.models",
        "description": "services.user-service.users.models",
        "peekOfCode": "class InsuranceInformation(models.Model):\n    \"\"\"Thông tin bảo hiểm\"\"\"\n    INSURANCE_TYPE_CHOICES = [\n        ('HEALTH', 'Health Insurance'),\n        ('DENTAL', 'Dental Insurance'),\n        ('VISION', 'Vision Insurance'),\n        ('LIFE', 'Life Insurance'),\n        ('DISABILITY', 'Disability Insurance'),\n        ('OTHER', 'Other'),\n    ]",
        "detail": "services.user-service.users.models",
        "documentation": {}
    },
    {
        "label": "InsuranceProviderProfile",
        "kind": 6,
        "importPath": "services.user-service.users.models",
        "description": "services.user-service.users.models",
        "peekOfCode": "class InsuranceProviderProfile(models.Model):\n    \"\"\"Hồ sơ nhà cung cấp bảo hiểm\"\"\"\n    # Thông tin cơ bản (bắt buộc)\n    user = models.OneToOneField(User, on_delete=models.CASCADE, related_name='insurance_provider_profile')\n    company_name = models.CharField(max_length=200)\n    provider_id = models.CharField(max_length=100, unique=True)\n    # Thông tin liên hệ (bắt buộc)\n    contact_person = models.CharField(max_length=200)\n    contact_email = models.EmailField()\n    contact_phone = models.CharField(max_length=20)",
        "detail": "services.user-service.users.models",
        "documentation": {}
    },
    {
        "label": "LabTechnicianProfile",
        "kind": 6,
        "importPath": "services.user-service.users.models",
        "description": "services.user-service.users.models",
        "peekOfCode": "class LabTechnicianProfile(models.Model):\n    \"\"\"Hồ sơ kỹ thuật viên phòng thí nghiệm\"\"\"\n    SPECIALIZATION_CHOICES = [\n        ('HEMATOLOGY', 'Hematology'),\n        ('MICROBIOLOGY', 'Microbiology'),\n        ('BIOCHEMISTRY', 'Biochemistry'),\n        ('IMMUNOLOGY', 'Immunology'),\n        ('PATHOLOGY', 'Pathology'),\n        ('TOXICOLOGY', 'Toxicology'),\n        ('GENETICS', 'Genetics'),",
        "detail": "services.user-service.users.models",
        "documentation": {}
    },
    {
        "label": "AdminProfile",
        "kind": 6,
        "importPath": "services.user-service.users.models",
        "description": "services.user-service.users.models",
        "peekOfCode": "class AdminProfile(models.Model):\n    \"\"\"Hồ sơ quản trị viên\"\"\"\n    ADMIN_TYPE_CHOICES = [\n        ('SYSTEM', 'System Administrator'),\n        ('HOSPITAL', 'Hospital Administrator'),\n        ('DEPARTMENT', 'Department Administrator'),\n        ('CLINIC', 'Clinic Administrator'),\n        ('BILLING', 'Billing Administrator'),\n        ('HR', 'Human Resources Administrator'),\n        ('OTHER', 'Other'),",
        "detail": "services.user-service.users.models",
        "documentation": {}
    },
    {
        "label": "AddressSerializer",
        "kind": 6,
        "importPath": "services.user-service.users.serializers",
        "description": "services.user-service.users.serializers",
        "peekOfCode": "class AddressSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Address\n        fields = '__all__'\n        read_only_fields = ('id', 'created_at', 'updated_at')\n        extra_kwargs = {\n            'user': {'required': False}\n        }\nclass ContactInfoSerializer(serializers.ModelSerializer):\n    class Meta:",
        "detail": "services.user-service.users.serializers",
        "documentation": {}
    },
    {
        "label": "ContactInfoSerializer",
        "kind": 6,
        "importPath": "services.user-service.users.serializers",
        "description": "services.user-service.users.serializers",
        "peekOfCode": "class ContactInfoSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = ContactInfo\n        fields = '__all__'\n        read_only_fields = ('id', 'created_at', 'updated_at')\nclass UserDocumentSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = UserDocument\n        fields = '__all__'\n        read_only_fields = ('id', 'is_verified', 'verification_date', 'verification_notes', 'created_at', 'updated_at')",
        "detail": "services.user-service.users.serializers",
        "documentation": {}
    },
    {
        "label": "UserDocumentSerializer",
        "kind": 6,
        "importPath": "services.user-service.users.serializers",
        "description": "services.user-service.users.serializers",
        "peekOfCode": "class UserDocumentSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = UserDocument\n        fields = '__all__'\n        read_only_fields = ('id', 'is_verified', 'verification_date', 'verification_notes', 'created_at', 'updated_at')\nclass PatientProfileSerializer(serializers.ModelSerializer):\n    age = serializers.SerializerMethodField()\n    bmi = serializers.SerializerMethodField()\n    class Meta:\n        model = PatientProfile",
        "detail": "services.user-service.users.serializers",
        "documentation": {}
    },
    {
        "label": "PatientProfileSerializer",
        "kind": 6,
        "importPath": "services.user-service.users.serializers",
        "description": "services.user-service.users.serializers",
        "peekOfCode": "class PatientProfileSerializer(serializers.ModelSerializer):\n    age = serializers.SerializerMethodField()\n    bmi = serializers.SerializerMethodField()\n    class Meta:\n        model = PatientProfile\n        fields = '__all__'\n        read_only_fields = ('id', 'created_at', 'updated_at')\n    def get_age(self, obj):\n        return obj.get_age()\n    def get_bmi(self, obj):",
        "detail": "services.user-service.users.serializers",
        "documentation": {}
    },
    {
        "label": "DoctorProfileSerializer",
        "kind": 6,
        "importPath": "services.user-service.users.serializers",
        "description": "services.user-service.users.serializers",
        "peekOfCode": "class DoctorProfileSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = DoctorProfile\n        fields = '__all__'\n        read_only_fields = ('id', 'average_rating', 'rating_count', 'created_at', 'updated_at')\nclass NurseProfileSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = NurseProfile\n        fields = '__all__'\n        read_only_fields = ('id', 'created_at', 'updated_at')",
        "detail": "services.user-service.users.serializers",
        "documentation": {}
    },
    {
        "label": "NurseProfileSerializer",
        "kind": 6,
        "importPath": "services.user-service.users.serializers",
        "description": "services.user-service.users.serializers",
        "peekOfCode": "class NurseProfileSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = NurseProfile\n        fields = '__all__'\n        read_only_fields = ('id', 'created_at', 'updated_at')\nclass PharmacistProfileSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = PharmacistProfile\n        fields = '__all__'\n        read_only_fields = ('id', 'created_at', 'updated_at')",
        "detail": "services.user-service.users.serializers",
        "documentation": {}
    },
    {
        "label": "PharmacistProfileSerializer",
        "kind": 6,
        "importPath": "services.user-service.users.serializers",
        "description": "services.user-service.users.serializers",
        "peekOfCode": "class PharmacistProfileSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = PharmacistProfile\n        fields = '__all__'\n        read_only_fields = ('id', 'created_at', 'updated_at')\nclass InsuranceInformationSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = InsuranceInformation\n        fields = '__all__'\n        read_only_fields = ('id', 'created_at', 'updated_at')",
        "detail": "services.user-service.users.serializers",
        "documentation": {}
    },
    {
        "label": "InsuranceInformationSerializer",
        "kind": 6,
        "importPath": "services.user-service.users.serializers",
        "description": "services.user-service.users.serializers",
        "peekOfCode": "class InsuranceInformationSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = InsuranceInformation\n        fields = '__all__'\n        read_only_fields = ('id', 'created_at', 'updated_at')\nclass InsuranceProviderProfileSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = InsuranceProviderProfile\n        fields = '__all__'\n        read_only_fields = ('id', 'created_at', 'updated_at')",
        "detail": "services.user-service.users.serializers",
        "documentation": {}
    },
    {
        "label": "InsuranceProviderProfileSerializer",
        "kind": 6,
        "importPath": "services.user-service.users.serializers",
        "description": "services.user-service.users.serializers",
        "peekOfCode": "class InsuranceProviderProfileSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = InsuranceProviderProfile\n        fields = '__all__'\n        read_only_fields = ('id', 'created_at', 'updated_at')\nclass LabTechnicianProfileSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = LabTechnicianProfile\n        fields = '__all__'\n        read_only_fields = ('id', 'created_at', 'updated_at')",
        "detail": "services.user-service.users.serializers",
        "documentation": {}
    },
    {
        "label": "LabTechnicianProfileSerializer",
        "kind": 6,
        "importPath": "services.user-service.users.serializers",
        "description": "services.user-service.users.serializers",
        "peekOfCode": "class LabTechnicianProfileSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = LabTechnicianProfile\n        fields = '__all__'\n        read_only_fields = ('id', 'created_at', 'updated_at')\nclass AdminProfileSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = AdminProfile\n        fields = '__all__'\n        read_only_fields = ('id', 'created_at', 'updated_at')",
        "detail": "services.user-service.users.serializers",
        "documentation": {}
    },
    {
        "label": "AdminProfileSerializer",
        "kind": 6,
        "importPath": "services.user-service.users.serializers",
        "description": "services.user-service.users.serializers",
        "peekOfCode": "class AdminProfileSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = AdminProfile\n        fields = '__all__'\n        read_only_fields = ('id', 'created_at', 'updated_at')\nclass UserDetailSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer chi tiết cho người dùng, bao gồm tất cả các thông tin liên quan\"\"\"\n    addresses = AddressSerializer(many=True, read_only=True)\n    contact_info = ContactInfoSerializer(read_only=True)\n    documents = UserDocumentSerializer(many=True, read_only=True)",
        "detail": "services.user-service.users.serializers",
        "documentation": {}
    },
    {
        "label": "UserDetailSerializer",
        "kind": 6,
        "importPath": "services.user-service.users.serializers",
        "description": "services.user-service.users.serializers",
        "peekOfCode": "class UserDetailSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer chi tiết cho người dùng, bao gồm tất cả các thông tin liên quan\"\"\"\n    addresses = AddressSerializer(many=True, read_only=True)\n    contact_info = ContactInfoSerializer(read_only=True)\n    documents = UserDocumentSerializer(many=True, read_only=True)\n    # Các hồ sơ theo vai trò\n    patient_profile = PatientProfileSerializer(read_only=True)\n    doctor_profile = DoctorProfileSerializer(read_only=True)\n    nurse_profile = NurseProfileSerializer(read_only=True)\n    pharmacist_profile = PharmacistProfileSerializer(read_only=True)",
        "detail": "services.user-service.users.serializers",
        "documentation": {}
    },
    {
        "label": "UserBasicSerializer",
        "kind": 6,
        "importPath": "services.user-service.users.serializers",
        "description": "services.user-service.users.serializers",
        "peekOfCode": "class UserBasicSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer cơ bản cho người dùng, chỉ bao gồm thông tin cơ bản\"\"\"\n    class Meta:\n        model = User\n        fields = ('id', 'email', 'first_name', 'last_name', 'role', 'date_joined', 'is_active')\n        read_only_fields = ('id', 'date_joined')\nclass AdminCreateUserSerializer(serializers.ModelSerializer):\n    password = serializers.CharField(write_only=True, required=True)\n    class Meta:\n        model = User",
        "detail": "services.user-service.users.serializers",
        "documentation": {}
    },
    {
        "label": "AdminCreateUserSerializer",
        "kind": 6,
        "importPath": "services.user-service.users.serializers",
        "description": "services.user-service.users.serializers",
        "peekOfCode": "class AdminCreateUserSerializer(serializers.ModelSerializer):\n    password = serializers.CharField(write_only=True, required=True)\n    class Meta:\n        model = User\n        fields = ('email', 'password', 'first_name', 'last_name', 'role')\n    def create(self, validated_data):\n        password = validated_data.pop('password')\n        user = User(**validated_data)\n        user.set_password(password)\n        user.save()",
        "detail": "services.user-service.users.serializers",
        "documentation": {}
    },
    {
        "label": "doctor_user_info",
        "kind": 2,
        "importPath": "services.user-service.users.urls",
        "description": "services.user-service.users.urls",
        "peekOfCode": "def doctor_user_info(request, doctor_id):\n    \"\"\"\n    Lấy thông tin người dùng của bác sĩ.\n    Endpoint này được tạo để tương thích với medical-record-service.\n    \"\"\"\n    try:\n        # Tìm người dùng với ID và role là DOCTOR\n        user = User.objects.get(id=doctor_id, role='DOCTOR')\n        serializer = UserDetailSerializer(user)\n        return Response(serializer.data)",
        "detail": "services.user-service.users.urls",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "services.user-service.users.urls",
        "description": "services.user-service.users.urls",
        "peekOfCode": "router = DefaultRouter()\nrouter.register(r'users', UserViewSet, basename='user')\nrouter.register(r'documents', UserDocumentViewSet, basename='document')\nrouter.register(r'addresses', AddressViewSet, basename='address')\nrouter.register(r'contact-info', ContactInfoViewSet, basename='contact-info')\nrouter.register(r'patient-profile', PatientProfileViewSet, basename='patient-profile')\nrouter.register(r'doctor-profile', DoctorProfileViewSet, basename='doctor-profile')\nrouter.register(r'nurse-profile', NurseProfileViewSet, basename='nurse-profile')\nrouter.register(r'pharmacist-profile', PharmacistProfileViewSet, basename='pharmacist-profile')\nrouter.register(r'insurance-provider-profile', InsuranceProviderProfileViewSet, basename='insurance-provider-profile')",
        "detail": "services.user-service.users.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "services.user-service.users.urls",
        "description": "services.user-service.users.urls",
        "peekOfCode": "urlpatterns = [\n    # Bao gồm tất cả các URL từ router\n    path('', include(router.urls)),\n    # Thêm route đặc biệt cho medical-record-service\n    path('users/doctors/<int:doctor_id>/', doctor_user_info, name='doctor-user-info'),\n    # Thêm route cho profile user\n    path('users/<int:pk>/profile', user_profile_view, name='user-profile'),\n]",
        "detail": "services.user-service.users.urls",
        "documentation": {}
    },
    {
        "label": "UserViewSet",
        "kind": 6,
        "importPath": "services.user-service.users.views",
        "description": "services.user-service.users.views",
        "peekOfCode": "class UserViewSet(viewsets.ModelViewSet):\n    \"\"\"\n    ViewSet để quản lý người dùng.\n    \"\"\"\n    serializer_class = UserDetailSerializer\n    permission_classes = [permissions.IsAuthenticated]\n    def get_serializer_class(self):\n        if self.action == 'create' and hasattr(self.request.user, 'role') and self.request.user.role == 'ADMIN':\n            return AdminCreateUserSerializer\n        return super().get_serializer_class()",
        "detail": "services.user-service.users.views",
        "documentation": {}
    },
    {
        "label": "UserDocumentViewSet",
        "kind": 6,
        "importPath": "services.user-service.users.views",
        "description": "services.user-service.users.views",
        "peekOfCode": "class UserDocumentViewSet(viewsets.ModelViewSet):\n    \"\"\"\n    ViewSet để quản lý tài liệu người dùng.\n    \"\"\"\n    serializer_class = UserDocumentSerializer\n    permission_classes = [permissions.IsAuthenticated]\n    def get_queryset(self):\n        \"\"\"Lấy danh sách tài liệu dựa trên quyền\"\"\"\n        # Check if user is authenticated and has a role attribute\n        if not hasattr(self.request.user, 'role') or not self.request.user.is_authenticated:",
        "detail": "services.user-service.users.views",
        "documentation": {}
    },
    {
        "label": "AddressViewSet",
        "kind": 6,
        "importPath": "services.user-service.users.views",
        "description": "services.user-service.users.views",
        "peekOfCode": "class AddressViewSet(viewsets.ModelViewSet):\n    \"\"\"\n    ViewSet để quản lý địa chỉ.\n    \"\"\"\n    serializer_class = AddressSerializer\n    permission_classes = [permissions.IsAuthenticated]\n    def get_queryset(self):\n        \"\"\"Lấy danh sách địa chỉ của người dùng hiện tại\"\"\"\n        # Check if user is authenticated and has a role attribute\n        if not hasattr(self.request.user, 'role') or not self.request.user.is_authenticated:",
        "detail": "services.user-service.users.views",
        "documentation": {}
    },
    {
        "label": "ContactInfoViewSet",
        "kind": 6,
        "importPath": "services.user-service.users.views",
        "description": "services.user-service.users.views",
        "peekOfCode": "class ContactInfoViewSet(viewsets.GenericViewSet):\n    \"\"\"\n    ViewSet để quản lý thông tin liên hệ.\n    \"\"\"\n    serializer_class = ContactInfoSerializer\n    permission_classes = [permissions.IsAuthenticated]\n    def get_queryset(self):\n        \"\"\"Lấy thông tin liên hệ của người dùng hiện tại\"\"\"\n        return ContactInfo.objects.filter(user=self.request.user)\n    @action(detail=False, methods=['get'])",
        "detail": "services.user-service.users.views",
        "documentation": {}
    },
    {
        "label": "ProfileViewSetMixin",
        "kind": 6,
        "importPath": "services.user-service.users.views",
        "description": "services.user-service.users.views",
        "peekOfCode": "class ProfileViewSetMixin:\n    \"\"\"\n    Mixin chung cho các ViewSet quản lý hồ sơ.\n    \"\"\"\n    permission_classes = [permissions.IsAuthenticated]\n    def get_queryset(self):\n        \"\"\"Lấy danh sách hồ sơ dựa trên quyền\"\"\"\n        if self.request.user.role == 'ADMIN':\n            return self.model.objects.all()\n        return self.model.objects.filter(user_id=self.request.user.id)",
        "detail": "services.user-service.users.views",
        "documentation": {}
    },
    {
        "label": "PatientProfileViewSet",
        "kind": 6,
        "importPath": "services.user-service.users.views",
        "description": "services.user-service.users.views",
        "peekOfCode": "class PatientProfileViewSet(ProfileViewSetMixin, viewsets.GenericViewSet):\n    \"\"\"\n    ViewSet để quản lý hồ sơ bệnh nhân.\n    \"\"\"\n    serializer_class = PatientProfileSerializer\n    model = PatientProfile\n    profile_type = \"Patient\"\n    required_role = \"PATIENT\"\n    @action(detail=True, methods=['get'], url_path='by-user')\n    def by_user(self, request, pk=None):",
        "detail": "services.user-service.users.views",
        "documentation": {}
    },
    {
        "label": "DoctorProfileViewSet",
        "kind": 6,
        "importPath": "services.user-service.users.views",
        "description": "services.user-service.users.views",
        "peekOfCode": "class DoctorProfileViewSet(ProfileViewSetMixin, viewsets.GenericViewSet):\n    \"\"\"\n    ViewSet để quản lý hồ sơ bác sĩ.\n    \"\"\"\n    serializer_class = DoctorProfileSerializer\n    model = DoctorProfile\n    profile_type = \"Doctor\"\n    required_role = \"DOCTOR\"\n    @action(detail=True, methods=['get'], url_path='by-user')\n    def by_user(self, request, pk=None):",
        "detail": "services.user-service.users.views",
        "documentation": {}
    },
    {
        "label": "NurseProfileViewSet",
        "kind": 6,
        "importPath": "services.user-service.users.views",
        "description": "services.user-service.users.views",
        "peekOfCode": "class NurseProfileViewSet(ProfileViewSetMixin, viewsets.GenericViewSet):\n    \"\"\"\n    ViewSet để quản lý hồ sơ y tá.\n    \"\"\"\n    serializer_class = NurseProfileSerializer\n    model = NurseProfile\n    profile_type = \"Nurse\"\n    required_role = \"NURSE\"\n    @action(detail=True, methods=['get'], url_path='by-user')\n    def by_user(self, request, pk=None):",
        "detail": "services.user-service.users.views",
        "documentation": {}
    },
    {
        "label": "PharmacistProfileViewSet",
        "kind": 6,
        "importPath": "services.user-service.users.views",
        "description": "services.user-service.users.views",
        "peekOfCode": "class PharmacistProfileViewSet(ProfileViewSetMixin, viewsets.GenericViewSet):\n    \"\"\"\n    ViewSet để quản lý hồ sơ dược sĩ.\n    \"\"\"\n    serializer_class = PharmacistProfileSerializer\n    model = PharmacistProfile\n    profile_type = \"Pharmacist\"\n    required_role = \"PHARMACIST\"\n    @action(detail=True, methods=['get'], url_path='by-user')\n    def by_user(self, request, pk=None):",
        "detail": "services.user-service.users.views",
        "documentation": {}
    },
    {
        "label": "InsuranceProviderProfileViewSet",
        "kind": 6,
        "importPath": "services.user-service.users.views",
        "description": "services.user-service.users.views",
        "peekOfCode": "class InsuranceProviderProfileViewSet(ProfileViewSetMixin, viewsets.GenericViewSet):\n    \"\"\"\n    ViewSet để quản lý hồ sơ nhà cung cấp bảo hiểm.\n    \"\"\"\n    serializer_class = InsuranceProviderProfileSerializer\n    model = InsuranceProviderProfile\n    profile_type = \"Insurance Provider\"\n    required_role = \"INSURANCE\"\n    @action(detail=True, methods=['get'], url_path='by-user')\n    def by_user(self, request, pk=None):",
        "detail": "services.user-service.users.views",
        "documentation": {}
    },
    {
        "label": "LabTechnicianProfileViewSet",
        "kind": 6,
        "importPath": "services.user-service.users.views",
        "description": "services.user-service.users.views",
        "peekOfCode": "class LabTechnicianProfileViewSet(ProfileViewSetMixin, viewsets.GenericViewSet):\n    \"\"\"\n    ViewSet để quản lý hồ sơ kỹ thuật viên phòng thí nghiệm.\n    \"\"\"\n    serializer_class = LabTechnicianProfileSerializer\n    model = LabTechnicianProfile\n    profile_type = \"Lab Technician\"\n    required_role = \"LAB_TECH\"\n    @action(detail=True, methods=['get'], url_path='by-user')\n    def by_user(self, request, pk=None):",
        "detail": "services.user-service.users.views",
        "documentation": {}
    },
    {
        "label": "AdminProfileViewSet",
        "kind": 6,
        "importPath": "services.user-service.users.views",
        "description": "services.user-service.users.views",
        "peekOfCode": "class AdminProfileViewSet(ProfileViewSetMixin, viewsets.GenericViewSet):\n    \"\"\"\n    ViewSet để quản lý hồ sơ quản trị viên.\n    \"\"\"\n    serializer_class = AdminProfileSerializer\n    model = AdminProfile\n    profile_type = \"Admin\"\n    required_role = \"ADMIN\"\n    @action(detail=True, methods=['get'], url_path='by-user')\n    def by_user(self, request, pk=None):",
        "detail": "services.user-service.users.views",
        "documentation": {}
    },
    {
        "label": "InsuranceInformationViewSet",
        "kind": 6,
        "importPath": "services.user-service.users.views",
        "description": "services.user-service.users.views",
        "peekOfCode": "class InsuranceInformationViewSet(viewsets.ModelViewSet):\n    \"\"\"\n    ViewSet để quản lý thông tin bảo hiểm.\n    \"\"\"\n    serializer_class = InsuranceInformationSerializer\n    permission_classes = [permissions.IsAuthenticated]\n    def get_queryset(self):\n        \"\"\"Lấy danh sách thông tin bảo hiểm dựa trên quyền\"\"\"\n        # Check if swagger fake view or unauthenticated\n        if getattr(self, 'swagger_fake_view', False):",
        "detail": "services.user-service.users.views",
        "documentation": {}
    },
    {
        "label": "SpecialtyViewSet",
        "kind": 6,
        "importPath": "services.user-service.users.views",
        "description": "services.user-service.users.views",
        "peekOfCode": "class SpecialtyViewSet(viewsets.ViewSet):\n    \"\"\"\n    ViewSet để lấy danh sách chuyên khoa.\n    \"\"\"\n    permission_classes = [permissions.IsAuthenticated]\n    def list(self, request):\n        \"\"\"Lấy danh sách chuyên khoa\"\"\"\n        # Lấy tham số department nếu có\n        department = request.query_params.get('department', None)\n        # Lấy danh sách chuyên khoa từ model DoctorProfile",
        "detail": "services.user-service.users.views",
        "documentation": {}
    },
    {
        "label": "DepartmentViewSet",
        "kind": 6,
        "importPath": "services.user-service.users.views",
        "description": "services.user-service.users.views",
        "peekOfCode": "class DepartmentViewSet(viewsets.ViewSet):\n    \"\"\"\n    ViewSet để lấy danh sách khoa.\n    \"\"\"\n    permission_classes = [permissions.IsAuthenticated]\n    def list(self, request):\n        \"\"\"Lấy danh sách khoa\"\"\"\n        # Lấy danh sách khoa từ model NurseProfile\n        departments = []\n        for choice in NurseProfile.DEPARTMENT_CHOICES:",
        "detail": "services.user-service.users.views",
        "documentation": {}
    },
    {
        "label": "DoctorListViewSet",
        "kind": 6,
        "importPath": "services.user-service.users.views",
        "description": "services.user-service.users.views",
        "peekOfCode": "class DoctorListViewSet(viewsets.ReadOnlyModelViewSet):\n    \"\"\"\n    ViewSet để lấy danh sách bác sĩ.\n    Tất cả người dùng đã xác thực đều có thể truy cập thông tin bác sĩ.\n    \"\"\"\n    serializer_class = DoctorProfileSerializer\n    permission_classes = [permissions.IsAuthenticated]\n    @action(detail=True, methods=['get'], url_path='user')\n    def get_user_info(self, request, pk=None):\n        \"\"\"",
        "detail": "services.user-service.users.views",
        "documentation": {}
    },
    {
        "label": "user_profile_view",
        "kind": 2,
        "importPath": "services.user-service.users.views",
        "description": "services.user-service.users.views",
        "peekOfCode": "def user_profile_view(request, pk):\n    \"\"\"\n    Lấy hoặc cập nhật profile của user theo role.\n    \"\"\"\n    user = get_object_or_404(User, pk=pk)\n    role = user.role\n    profile = None\n    serializer_class = None\n    profile_model = None\n    profile_data = None",
        "detail": "services.user-service.users.views",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "services.user-service.manage",
        "description": "services.user-service.manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'core.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed?\"\n        ) from exc\n    execute_from_command_line(sys.argv)",
        "detail": "services.user-service.manage",
        "documentation": {}
    }
]